export const mainDir = {
    id: 'main',
    title: 'Main',
    pageDir: [
        {
            id: 'html', 
            title: 'HTML', 
            dis: 'Basic Building Block for Web Sites', 
            TableDir: [
                {
                    id: 'basicHTML',
                    title: 'Basic HTML',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'doctype', 
                            title: "<!DOCTYPE>",
                            code: '',
                            table: '',
                            cellDir: [
                                {text: `All HTML documents must start with a <!DOCTYPE> declaration.`},
                                {text: `The declaration is not an HTML tag. It is an "information" to the browser about what document type to expect.`},
                            ]
                        },
                        {
                            id: 'html', 
                            title: "<html>",
                            cellDir: [
                                {text: `The <html> tag represents the root of an HTML document.`},
                                {text: `The <html> tag is the container for all other HTML elements (except for the <!DOCTYPE> tag).`},
                                {text: (<><b>Note:</b> You should always include the lang attribute inside the {'<html>'} tag, to declare the language of the Web page. This is meant to assist search engines and browsers.</>)},
                            ],
                        },
                        {
                            id: 'head', 
                            title: "<head>",
                            cellDir: [
                                {text: `The <head> element is a container for metadata (data about data) and is placed between the <html> tag and the <body> tag.`},
                                {text: `Metadata is data about the HTML document. Metadata is not displayed.`},
                                {text: `Metadata typically define the document title, character set, styles, scripts, and other meta information.`},
                                {text: `The following elements can go inside the <head> element:`},
                                {list: ['<title>', '<style>', '<base>', '<link>', '<meta>', '<script>']},
                            ]
                        },
                        {
                            id: 'title', 
                            title: "<title>",
                            cellDir: [
                                {text: `The <title> tag defines the title of the document. The title must be text-only, and it is shown in the browser's title bar or in the page's tab.`},
                                {text: `The <title> tag is required in HTML documents!`},
                                {text: `The contents of a page title is very important for search engine optimization (SEO)! The page title is used by search engine algorithms to decide the order when listing pages in search results.`},
                                {text: `The <title> element:`},
                                {list: [
                                    'defines a title in the browser toolbar', 
                                    'provides a title for the page when it is added to favorites', 
                                    'displays a title for the page in search-engine results']},
                                {text: `Here are some tips for creating good titles:`},
                                {list: [
                                    `Go for a longer, descriptive title (avoid one- or two-word titles)`, 
                                    `Search engines will display about 50-60 characters of the title, so try not to have titles longer than that`, 
                                    `Do not use just a list of words as the title (this may reduce the page's position in search results)`,]},
                                {text: `So, try to make the title as accurate and meaningful as possible!`},
                                {text: (<><b>Note:</b> You can NOT have more than one {"<title>"} element in an HTML document.</>)},
                                
                            ],
                        },
                        {
                            id: 'body', 
                            title: "<body>",
                            cellDir: [
                                {text: `The <body> tag defines the document's body.`},
                                {text: `The <body> element contains all the contents of an HTML document, such as headings, paragraphs, images, hyperlinks, tables, lists, etc.`},
                                {text: (<><b>Note: </b>{`There can only be one <body> element in an HTML document.`}</>)},
                            ],
                        },
                        {
                            id: 'h1-h6', 
                            title: "<h1> to <h6>",
                            cellDir: [
                                {text: `The <h1> to <h6> tags are used to define HTML headings.`},
                                {text: `<h1> defines the most important heading. <h6> defines the least important heading.`},
                                {text: (<><b>Note: </b>{`Only use one <h1> per page - this should represent the main heading/subject for the whole page. Also, do not skip heading levels - start with <h1>, then use <h2>, and so on.`}</>)},
                            ],
                        },
                        {
                            id: 'p', 
                            title: "<p>",
                            cellDir: [
                                {text: `The <p> tag defines a paragraph.`},
                                {text: `Browsers automatically add a single blank line before and after each <p> element.`},
                            ],
                        },
                        {
                            id: 'br', 
                            title: "<br>",
                            cellDir: [
                                {text: `The <br> tag inserts a single line break.`},
                                {text: `The <br> tag is useful for writing addresses or poems.`},
                                {text: `The <br> tag is an empty tag which means that it has no end tag.`},
                                {text: (<><b>Note: </b>{`Use the <br> tag to enter line breaks, not to add space between paragraphs.`}</>)},
                            ],
                        },
                        {
                            id: 'comment', 
                            title: "<!--...-->",
                            cellDir: [
                                {text: `The comment tag is used to insert comments in the source code. Comments are not displayed in the browsers.`},
                                {text: `You can use comments to explain your code, which can help you when you edit the source code at a later date. This is especially useful if you have a lot of code.`},
                            ],
                        },   
                    ] 
                },
                {
                    id: 'formInput',
                    title: 'Forms & Input',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'form', 
                            title: '<form>', 
                            cellDir: [
                                {text: `Defines an HTML form for user input`},
                                {table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `accept-charset`, 
                                                `character_set`, 
                                                `Specifies the character encodings that are to be used for the form submission`],
                                            [
                                                `action`, 
                                                `URL`, 
                                                `Specifies where to send the form-data when a form is submitted`],
                                            [
                                                `autocomplete`, 
                                                (<>
                                                    on<br/>
                                                    off
                                                </>), 
                                                `Specifies whether a form should have autocomplete on or off`],
                                            [
                                                `enctype`, 
                                                (<>
                                                    application/x-www-form-urlencoded<br/>
                                                    multipart/form-data<br/>
                                                    text/plain
                                                    
                                                </>), 
                                                `Specifies how the form-data should be encoded when submitting it to the server (only for method="post")`],
                                            [
                                                `method`, 
                                                (<>
                                                    get<br/>
                                                    post
                                                </>), 
                                                `Specifies the HTTP method to use when sending form-data`],
                                            [
                                                `name`, 
                                                `text`, 
                                                `Specifies the name of a form`],
                                            [
                                                `novalidate`, 
                                                `novalidate`, 
                                                `Specifies that the form should not be validated when submitted`],
                                            [
                                                `rel`, 
                                                (<>
                                                    external<br/>
                                                    help<br/>
                                                    license<br/>
                                                    next<br/>
                                                    nofollow<br/>
                                                    noopener<br/>
                                                    noreferrer<br/>
                                                    opener<br/>
                                                    prev<br/>
                                                    search
                                                </>), 
                                                `Specifies the relationship between a linked resource and the current document`],
                                            [
                                                `target`, 
                                                (<>
                                                    _blank<br/>
                                                    _self<br/>
                                                    _parent<br/>
                                                    _top
                                                </>), 
                                                `Specifies where to display the response that is received after submitting the form`],

                                        ]
                                    }
                                }
                            ]
                        },
                        {
                            id: 'input', 
                            title: '<input>', 
                            cellDir: [
                                {text: `Defines an input control`},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `accept`, 
                                                (<>
                                                    file_extension<br/>
                                                    audio/*<br/>
                                                    video/*<br/>
                                                    image/*<br/>
                                                    media_type
                                                </>),
                                                `Specifies a filter for what file types the user can pick from the file input dialog box (only for type="file")`
                                            ],
                                            [
                                                `alt`, 
                                                `text`,
                                                `Specifies an alternate text for images (only for type="image")`
                                            ],
                                            [
                                                `autocomplete`, 
                                                (<>
                                                    on<br/>
                                                    off
                                                </>),
                                                `Specifies whether an <input> element should have autocomplete enabled`
                                            ],
                                            [
                                                `autofocus`, 
                                                `autofocus`,
                                                `Specifies that an <input> element should automatically get focus when the page loads`
                                            ],
                                            [
                                                `checked`, 
                                                `inputname.dir`,
                                                `Specifies that the text direction will be submitted`
                                            ],
                                            [
                                                `disabled`, 
                                                `URL`,
                                                `Specifies the URL of the file that will process the input control when the form is submitted (for type="submit" and type="image")`
                                            ],
                                            [
                                                `formenctype`, 
                                                (<>
                                                    application/x-www-form-urlencoded<br/>
                                                    multipart/form-data<br/>
                                                    text/plain
                                                </>),
                                                ``
                                            ],
                                            [
                                                `formmethod`, 
                                                (<>
                                                    get<br/>
                                                    post
                                                </>),
                                                `Defines the HTTP method for sending data to the action URL (for type="submit" and type="image")`
                                            ],
                                            [
                                                `formnovalidate`, 
                                                `formnovalidate`,
                                                `Defines that form elements should not be validated when submitted`
                                            ],
                                            [
                                                `formtarget`, 
                                                (<>
                                                    _blank<br/>
                                                    _self<br/>
                                                    _parent<br/>
                                                    _top<br/>
                                                    framename<br/>
                                                </>),
                                                `Specifies where to display the response that is received after submitting the form (for type="submit" and type="image")`
                                            ],
                                            [
                                                `height`, 
                                                `pixels`,
                                                `Specifies the height of an <input> element (only for type="image")`
                                            ],
                                            [
                                                `list`, 
                                                `datalist_id`,
                                                `Refers to a <datalist> element that contains pre-defined options for an <input> element`
                                            ],
                                            [
                                                `max`, 
                                                (<>
                                                    number<br/>
                                                    date
                                                </>),
                                                `Specifies the maximum value for an <input> element`
                                            ],
                                            [
                                                `maxlength`, 
                                                `number`,
                                                `Specifies the maximum number of characters allowed in an <input> element`
                                            ],
                                            [
                                                `min`, 
                                                (<>
                                                    number<br/>
                                                    date
                                                </>),
                                                `Specifies a minimum value for an <input> element`
                                            ],
                                            [
                                                `minlength`, 
                                                `number`,
                                                `Specifies the minimum number of characters required in an <input> element`
                                            ],
                                            [
                                                `multiple`, 
                                                `multiple`,
                                                `Specifies that a user can enter more than one value in an <input> element`
                                            ],
                                            [
                                                `name`, 
                                                `text`,
                                                `Specifies the name of an <input> element`
                                            ],
                                            [
                                                `pattern`, 
                                                `regexp`,
                                                `Specifies a regular expression that an <input> element's value is checked against`
                                            ],
                                            [
                                                `placeholder`, 
                                                `text`,
                                                `Specifies a short hint that describes the expected value of an <input> element`
                                            ],
                                            [
                                                `readonly`, 
                                                `readonly`,
                                                `Specifies that an input field is read-only`
                                            ],
                                            [
                                                `required`, 
                                                `required`,
                                                `Specifies that an input field must be filled out before submitting the form`
                                            ],
                                            [
                                                `size`, 
                                                `number`,
                                                `Specifies the width, in characters, of an <input> element`
                                            ],
                                            [
                                                `src`, 
                                                `URL`,
                                                `Specifies the URL of the image to use as a submit button (only for type="image")`
                                            ],
                                            [
                                                `step`, 
                                                (<>
                                                    number<br/>
                                                    any
                                                </>),
                                                `Specifies the interval between legal numbers in an input field`
                                            ],
                                            [
                                                `type`, 
                                                (<>
                                                    button<br/>
                                                    checkbox<br/>
                                                    color<br/>
                                                    date<br/>
                                                    datetime-local <br/>
                                                    email <br/>
                                                    file<br/>
                                                    hidden<br/>
                                                    image<br/>
                                                    month <br/>
                                                    number <br/>
                                                    password<br/>
                                                    radio<br/>
                                                    range <br/>
                                                    reset<br/>
                                                    search<br/>
                                                    submit<br/>
                                                    tel<br/>
                                                    text<br/>
                                                    time <br/>
                                                    url<br/>
                                                    week<br/>
                                                </>),
                                                `Specifies the type <input> element to display`
                                            ],
                                            [
                                                `value`, 
                                                `text`,
                                                `Specifies the value of an <input> element`
                                            ],
                                            [
                                                `width`, 
                                                `pixels`,
                                                `Specifies the width of an <input> element (only for type="image")`
                                            ],
                                        ]
                                    }
                                }
                            ]
                        },
                        {
                            id: 'textarea', 
                            title: '<textarea>', 
                            cellDir: [
                                {text: `Defines a multiline input control (text area). The <textarea> element is often used in a form, to collect user inputs like comments or reviews.`},
                                {text: `A text area can hold an unlimited number of characters, and the text renders in a fixed-width font (usually Courier).`},
                                {text: `The size of a text area is specified by the <cols> and <rows> attributes (or with CSS).`},
                                {text: `The name attribute is needed to reference the form data after the form is submitted (if you omit the name attribute, no data from the text area will be submitted).`},
                                {text: `The id attribute is needed to associate the text area with a label. `},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `autofocus`, 
                                                `autofocus`,
                                                `Specifies that a text area should automatically get focus when the page loads`
                                            ],
                                            [
                                                `cols`, 
                                                `number`,
                                                `Specifies the visible width of a text area`
                                            ],
                                            [
                                                `dirname`, 
                                                `textareaname.dir`,
                                                `Specifies that the text direction of the textarea will be submitted`
                                            ],
                                            [
                                                `disabled`, 
                                                `disabled`,
                                                `Specifies that a text area should be disabled`
                                            ],
                                            [
                                                `form`, 
                                                `form_id`,
                                                `Specifies which form the text area belongs to`
                                            ],
                                            [
                                                `maxlength`, 
                                                `number`,
                                                `Specifies the maximum number of characters allowed in the text area`
                                            ],
                                            [
                                                `name`, 
                                                `text`,
                                                `Specifies a name for a text area`
                                            ],
                                            [
                                                `placeholder`, 
                                                `text`,
                                                `Specifies a short hint that describes the expected value of a text area`
                                            ],
                                            [
                                                `readonly`, 
                                                `readonly`,
                                                `Specifies that a text area should be read-only`
                                            ],
                                            [
                                                `required`, 
                                                `required`,
                                                `Specifies that a text area is required/must be filled out`
                                            ],
                                            [
                                                `rows`, 
                                                `number`,
                                                `Specifies the visible number of lines in a text area`
                                            ],
                                            [
                                                `wrap`, 
                                                (<>
                                                    hard<br/>
                                                    soft
                                                </>),
                                                `Specifies how the text in a text area is to be wrapped when submitted in a form`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'button', 
                            title: '<button>', 
                            cellDir: [
                                {text: `Defines a clickable button.  Inside a <button> element you can put text (and tags like <i>, <b>, <strong>, <br>, <img>, etc.). That is not possible with a button created with the <input> element!`},
                                {text: (<><b>Tip: </b>Always specify the type attribute for a {"<button>"} element, to tell browsers what type of button it is.</>)},
                                {text: (<><b>Tip: </b>You can easily style buttons with CSS! Look at the examples below or visit our CSS Buttons tutorial.</>)},{
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `autofocus`, 
                                                `autofocus`, 
                                                `Specifies that a button should automatically get focus when the page loads`
                                            ],
                                            [
                                                `disabled`, 
                                                (<>
                                                    disabled
                                                </>), 
                                                `Specifies that a button should be disabled`
                                            ],
                                            [
                                                `form`, 
                                                (<>
                                                form_id
                                                </>), 
                                                `Specifies which form the button belongs to`
                                            ],
                                            [
                                                `formaction`, 
                                                (<>
                                                URL
                                                </>), 
                                                `Specifies where to send the form-data when a form is submitted. Only for type="submit"`
                                            ],
                                            [
                                                `formenctype`, 
                                                (<>
                                                application/x-www-form-urlencoded<br/>
                                                multipart/form-data<br/>
                                                text/plain
                                                </>), 
                                                `Specifies how form-data should be encoded before sending it to a server. Only for type="submit"`
                                            ],
                                            [
                                                `formmethod`, 
                                                (<>
                                                get<br/>
                                                post
                                                </>), 
                                                `Specifies how to send the form-data (which HTTP method to use). Only for type="submit"`
                                            ],
                                            [
                                                `formnovalidate`, 
                                                (<>
                                                formnovalidate
                                                </>), 
                                                `Specifies that the form-data should not be validated on submission. Only for type="submit"`
                                            ],
                                            [
                                                `formtarget`, 
                                                (<>
                                                _blank
                                                _self
                                                _parent
                                                _top
                                                framename
                                                </>), 
                                                `Specifies where to display the response after submitting the form. Only for type="submit"`
                                            ],
                                            [
                                                `name`, 
                                                (<>
                                                name
                                                </>), 
                                                `Specifies a name for the button`
                                            ],
                                            [
                                                `type`, 
                                                (<>
                                                button
                                                reset
                                                submit
                                                </>), 
                                                `Specifies the type of button`
                                            ],
                                            [
                                                `value`, 
                                                (<>
                                                text
                                                </>), 
                                                `Specifies an initial value for the button`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'select', 
                            title: '<select>', 
                            cellDir: [
                                {text: `The <select> element is used to create a drop-down list.`},
                                {text: `The <select> element is most often used in a form, to collect user input.`},
                                {text: `The name attribute is needed to reference the form data after the form is submitted (if you omit the name attribute, no data from the drop-down list will be submitted).`},
                                {text: `The id attribute is needed to associate the drop-down list with a label.`},
                                {text: `The <option> tags inside the <select> element define the available options in the drop-down list.`},
                                {code: `<label for="cars">Choose a car:</label>`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `<select name="cars" id="cars">`, indent: 0},
                                {code: `<option value="volvo">Volvo</option>`, indent: 1},
                                {code: `<option value="saab">Saab</option>`, indent: 1},
                                {code: `<option value="mercedes">Mercedes</option>`, indent: 1},
                                {code: `<option value="audi">Audi</option>`, indent: 1},
                                {code: `</select>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `autofocus`, 
                                                (<>
                                                autofocus
                                                </>),  
                                                `Specifies that the drop-down list should automatically get focus when the page loads`
                                            ],
                                            [
                                                `disabled`, 
                                                (<>
                                                disabled
                                                </>),  
                                                `Specifies that a drop-down list should be disabled`
                                            ],
                                            [
                                                `form`, 
                                                (<>
                                                form_id
                                                </>),  
                                                `Defines which form the drop-down list belongs to`
                                            ],
                                            [
                                                `multiple`, 
                                                (<>
                                                multiple
                                                </>),  
                                                `Specifies that multiple options can be selected at once`
                                            ],
                                            [
                                                `name`, 
                                                (<>
                                                name
                                                </>),  
                                                `Defines a name for the drop-down list`
                                            ],
                                            [
                                                `required`, 
                                                (<>
                                                required
                                                </>),  
                                                `Specifies that the user is required to select a value before submitting the form`
                                            ],
                                            [
                                                `size`, 
                                                (<>
                                                number
                                                </>),  
                                                `Defines the number of visible options in a drop-down list`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'optgroup', 
                            title: '<optgroup>', 
                            cellDir: [
                                {text: `Defines a group of related options in a <select> element (drop-down list).`},
                                {code: `<label for="cars">Choose a car:</label>`, indent: 0},
                                {code: `<select  name="cars" id="cars">`, indent: 0},
                                {code: `<optgroup label="Swedish Cars">`, indent: 1},
                                {code: `<option value="volvo">Volvo</option>`, indent: 2},
                                {code: `<option value="saab">Saab</option>`, indent: 2},
                                {code: `</optgroup>`, indent: 1},
                                {code: `<optgroup label="German Cars">`, indent: 1},
                                {code: `<option value="mercedes">Mercedes</option>`, indent: 2},
                                {code: `<option value="audi">Audi</option>`, indent: 2},
                                {code: `</optgroup>`, indent: 1},
                                {code: `</select>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `disabled`, 
                                                (<>
                                                disabled
                                                </>),  
                                                `Specifies that an option-group should be disabled`
                                            ],
                                            [
                                                `label`, 
                                                (<>
                                                text
                                                </>),  
                                                `Specifies a label for an option-group`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'option', 
                            title: '<option>', 
                            cellDir: [
                                {text: `Defines an option in a drop-down list. <option> elements go inside a <select>, <optgroup>, or <datalist> element.`},
                                {text: (<><b>Note:</b>{"The <option> tag can be used without any attributes, but you usually need the value attribute, which indicates what is sent to the server on form submission."}</>)},{
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `disabled`, 
                                                (<>
                                                disabled
                                                </>),  
                                                `Specifies that an option should be disabled`
                                            ],
                                            [
                                                `label`, 
                                                (<>
                                                text
                                                </>),  
                                                `Specifies a shorter label for an option`
                                            ],
                                            [
                                                `selected`, 
                                                (<>
                                                selected
                                                </>),  
                                                `Specifies that an option should be pre-selected when the page loads`
                                            ],
                                            [
                                                `value`, 
                                                (<>
                                                text
                                                </>),  
                                                `Specifies the value to be sent to a server`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'label', 
                            title: '<label>', 
                            cellDir: [
                                {text: `Defines a label for an <input> element `},
                                {text: (<><b>Tip:</b>{"The for attribute of <label> must be equal to the id attribute of the related element to bind them together. A label can also be bound to an element by placing the element inside the <label> element."} </>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `for`, 
                                                (<>
                                                element_id
                                                </>),  
                                                `Specifies the id of the form element the label should be bound to`
                                            ],
                                            [
                                                `form`, 
                                                (<>
                                                form_id
                                                </>),  
                                                `Specifies which form the label belongs to`
                                            ]
                                        ]
                                    }
                                }
                            ]
                        },
                        {
                            id: 'fieldset', 
                            title: '<fieldset>', 
                            cellDir: [
                                {text: `Groups related elements in a form. The <fieldset> tag draws a box around the related elements.`},
                                {text: (<><b>Tip:</b>{"The <legend> tag is used to define a caption for the <fieldset> element."}</>)},
                                {code: `<form action="/action_page.php"></form>`, indent: 0},
                                {code: `<fieldset></fieldset>`, indent: 1},
                                {code: `<legend>Personalia:</legend>`, indent: 2},
                                {code: `<label for="fname">First name:</label>`, indent: 2},
                                {code: `<input type="text" id="fname" name="fname"></input>`, indent: 2},
                                {code: `<label for="lname">Last name:</label>`, indent: 2},
                                {code: `<input type="text" id="lname" name="lname"></input>`, indent: 2},
                                {code: `<label for="email">Email:</label>`, indent: 2},
                                {code: `<input type="email" id="email" name="email"></input>`, indent: 2},
                                {code: `<label for="birthday">Birthday:</label>`, indent: 2},
                                {code: `<input type="date" id="birthday" name="birthday"></input>`, indent: 2},
                                {code: `<input type="submit" value="Submit"></input>`, indent: 2},
                                {code: `</fieldset>`, indent: 1},
                                {code: `</form>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `disabled`, 
                                                (<>
                                                disabled
                                                </>),  
                                                `Specifies that a group of related form elements should be disabled`
                                            ],
                                            [
                                                `form`, 
                                                (<>
                                                form_id
                                                </>),  
                                                `Specifies which form the fieldset belongs to`
                                            ],
                                            [
                                                `name`, 
                                                (<>
                                                text
                                                </>),  
                                                `Specifies a name for the fieldset`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'legend', 
                            title: '<legend>', 
                            cellDir: [
                                {text: `Defines a caption for a <fieldset> element`},
                            ]
                        },
                        {
                            id: 'datalist', 
                            title: '<datalist>', 
                            cellDir: [
                                {text: `Specifies a list of pre-defined options for an <input> element. `},
                                {text: `The <datalist> tag is used to provide an "autocomplete" feature for <input> elements. Users will see a drop-down list of pre-defined options as they input data.`},
                                {text: `The <datalist> element's id attribute must be equal to the <input> element's list attribute (this binds them together).`},
                                {code: `<label for="browser">Choose your browser from the list:</label>`, indent: 0},
                                {code: `<input list="browsers" name="browser" id="browser"></input>`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `<datalist id="browsers"></datalist>`, indent: 0},
                                {code: `<option value="Edge"></option>`, indent: 1},
                                {code: `<option value="Firefox"></option>`, indent: 1},
                                {code: `<option value="Chrome"></option>`, indent: 1},
                                {code: `<option value="Opera">`, indent: 1},
                                {code: `<option value="Safari">`, indent: 1},
                                {code: `</datalist>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                            ]
                        },
                        {
                            id: 'output', 
                            title: '<output>', 
                            cellDir: [
                                {text: `Used to represent the result of a calculation (like one performed by a script).`},
                                {code: `<form oninput="x.value = parseInt(a.value) + parseInt(b.value)">`, indent: 0},
                                {code: `<input type="range" id="a" value="50">`, indent: 1},
                                {code: `<input type="number" id="b" value="25">`, indent: 1},
                                {code: `<output name="x" for="a b"></output>`, indent: 1},
                                {code: `</form>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `for`, 
                                                (<>
                                                element_id
                                                </>),  
                                                `Specifies the relationship between the result of the calculation, and the elements used in the calculation`
                                            ],
                                            [
                                                `form`, 
                                                (<>
                                                form_id
                                                </>),  
                                                `Specifies which form the output element belongs to`
                                            ],
                                            [
                                                `name`, 
                                                (<>
                                                name
                                                </>),  
                                                `Specifies a name for the output element`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'frames',
                    title: 'Frames',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'iframe', 
                            title: '<iframe>', 
                            cellDir: [
                                {text: `Defines an inline frame.  An inline frame is used to embed another document (website) within the current HTML document.`},
                                {text: (<><b>Tip: </b>{"Use CSS to style the <iframe> (see example below)."} </>)},
                                {text: (<><b>Tip: </b>{"It is a good practice to always include a title attribute for the <iframe>. This is used by screen readers to read out what the content of the <iframe> is."}</>)},
                                {code: `frame src="https://www.w3schools.com" title="W3Schools Free Online Web Tutorials"></iframe>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `allow`, 
                                                (<>
                                                
                                                </>),  
                                                `Specifies a feature policy for the <iframe>`
                                            ],
                                            [
                                                `allowfullscreen`, 
                                                (<>
                                                true<br/>
                                                false
                                                </>),  
                                                `Set to true if the <iframe> can activate fullscreen mode by calling the requestFullscreen() method`
                                            ],
                                            [
                                                `allowpaymentrequest`, 
                                                (<>
                                                true<br/>
                                                false
                                                </>),  
                                                `Set to true if a cross-origin <iframe> should be allowed to invoke the Payment Request API`
                                            ],
                                            [
                                                `height`, 
                                                (<>
                                                pixels
                                                </>),  
                                                `Specifies the height of an <iframe>. Default height is 150 pixels`
                                            ],
                                            [
                                                `loading`, 
                                                (<>
                                                eager<br/>
                                                lazy
                                                </>),  
                                                `Specifies whether a browser should load an iframe immediately or to defer loading of iframes until some conditions are met`
                                            ],
                                            [
                                                `name`, 
                                                (<>
                                                text
                                                </>),  
                                                `Specifies the name of an <iframe>`
                                            ],
                                            [
                                                `referrerpolicy`, 
                                                (<>
                                                no-referrer<br/>
                                                no-referrer-when-downgrade<br/>
                                                origin<br/>
                                                origin-when-cross-origin<br/>
                                                same-origin<br/>
                                                strict-origin-when-cross-origin<br/>
                                                unsafe-url
                                                </>),  
                                                `Specifies which referrer information to send when fetching the iframe`
                                            ],
                                            [
                                                `sandbox`, 
                                                (<>
                                                Default -nothing allowed<br/>
                                                allow-forms<br/>
                                                allow-pointer-lock<br/>
                                                allow-popups<br/>
                                                allow-same-origin<br/>
                                                allow-scripts<br/>
                                                allow-top-navigation
                                                </>),  
                                                `Enables an extra set of restrictions for the content in an <iframe>`
                                            ],
                                            [
                                                `src`, 
                                                (<>
                                                URL
                                                </>),  
                                                `Specifies the address of the document to embed in the <iframe>`
                                            ],
                                            [
                                                `srcdoc`, 
                                                (<>
                                                HTML_code
                                                </>),  
                                                `Specifies the HTML content of the page to show in the <iframe>`
                                            ],
                                            [
                                                `width`, 
                                                (<>
                                                pixels
                                                </>),  
                                                `Specifies the width of an <iframe>. Default width is 300 pixels`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'images',
                    title: 'Images',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'img', 
                            title: '<img>', 
                            cellDir: [
                                {text: `The <img> tag is used to embed an image in an HTML page.`},
                                {text: `Images are not technically inserted into a web page; images are linked to web pages. The <img> tag creates a holding space for the referenced image.`},
                                {text: `The <img> tag has two required attributes:`},
                                {list: [
                                    'src - Specifies the path to the image', 
                                    'alt - Specifies an alternate text for the image, if the image for some reason cannot be displayed'
                                ]},
                                {text: (<><b>Note: </b>Also, always specify the width and height of an image. If width and height are not specified, the page might flicker while the image loads.</>)},
                                {text: (<><b>Tip: </b>{'To link an image to another document, simply nest the <img> tag inside an <a> tag (see example below).'}</>)},
                                {code: `<img src="img_girl.jpg" alt="Girl in a jacket" width="500" height="600">`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `alt`, 
                                                (<>
                                                text
                                                </>),  
                                                `Specifies an alternate text for an image`
                                            ],
                                            [
                                                `crossorigin`, 
                                                (<>
                                                anonymous
                                                use-credentials
                                                </>),  
                                                `Allow images from third-party sites that allow cross-origin access to be used with canvas`
                                            ],
                                            [
                                                `height`, 
                                                (<>
                                                pixels
                                                </>),  
                                                `Specifies the height of an image`
                                            ],
                                            [
                                                `ismap`, 
                                                (<>
                                                ismap
                                                </>),  
                                                `Specifies an image as a server-side image map`
                                            ],
                                            [
                                                `loading`, 
                                                (<>
                                                eager
                                                lazy
                                                </>),  
                                                `Specifies whether a browser should load an image immediately or to defer loading of images until some conditions are met`
                                            ],
                                            [
                                                `longdesc`, 
                                                (<>
                                                URL
                                                </>),  
                                                `Specifies a URL to a detailed description of an image`
                                            ],
                                            [
                                                `referrerpolicy`, 
                                                (<>
                                                no-referrer
                                                no-referrer-when-downgrade
                                                origin
                                                origin-when-cross-origin
                                                unsafe-url
                                                </>),  
                                                `Specifies which referrer information to use when fetching an image`
                                            ],
                                            [
                                                `sizes`, 
                                                (<>
                                                sizes
                                                </>),  
                                                `Specifies image sizes for different page layouts`
                                            ],
                                            [
                                                `src`, 
                                                (<>
                                                URL
                                                </>),  
                                                `Specifies the path to the image`
                                            ],
                                            [
                                                `srcset`, 
                                                (<>
                                                URL-list
                                                </>),  
                                                `Specifies a list of image files to use in different situations`
                                            ],
                                            [
                                                `usemap`, 
                                                (<>
                                                #mapname
                                                </>),  
                                                `Specifies an image as a client-side image map`
                                            ],
                                            [
                                                `width`, 
                                                (<>
                                                pixels
                                                </>),  
                                                `Specifies the width of an image`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'map', 
                            title: '<map>', 
                            cellDir: [
                                {text: `The <map> tag is used to define an image map (Client Side). An image map is an image with clickable areas.`},
                                {text: `The required name attribute of the <map> element is associated with the <img>'s usemap attribute and creates a relationship between the image and the map.`},
                                {text: `The <map> element contains a number of <area> elements, that defines the clickable areas in the image map.`},
                                {code: `<img src="workplace.jpg" alt="Workplace" usemap="#workmap" width="400" height="379">`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `<map name="workmap">`, indent: 0},
                                {code: `<area shape="rect" coords="34,44,270,350" alt="Computer" href="computer.htm">`, indent: 1},
                                {code: `<area shape="rect" coords="290,172,333,250" alt="Phone" href="phone.htm">`, indent: 1},
                                {code: `<area shape="circle" coords="337,300,44" alt="Cup of coffee" href="coffee.htm">`, indent: 1},
                                {code: `</map>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `name`, 
                                                (<>
                                                mapname
                                                </>),  
                                                `Required. Specifies the name of the image map`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'area', 
                            title: '<area>', 
                            cellDir: [
                                {text: `The <area> tag defines an area inside an image map (an image map is an image with clickable areas).`},
                                {text: `<area> elements are always nested inside a <map> tag.`},
                                {text: (<><b>Note:</b>{"The usemap attribute in <img> is associated with the <map> element's name attribute, and creates a relationship between the image and the map."}</>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `alt`, 
                                                (<>
                                                text
                                                </>),  
                                                `Specifies an alternate text for the area. Required if the href attribute is present`
                                            ],
                                            [
                                                `coords`, 
                                                (<>
                                                coordinates
                                                </>),  
                                                `Specifies the coordinates of the area`
                                            ],
                                            [
                                                `download`, 
                                                (<>
                                                filename
                                                </>),  
                                                `Specifies that the target will be downloaded when a user clicks on the hyperlink`
                                            ],
                                            [
                                                `href`, 
                                                (<>
                                                URL
                                                </>),  
                                                `Specifies the hyperlink target for the area`
                                            ],
                                            [
                                                `hreflang`, 
                                                (<>
                                                language_code
                                                </>),  
                                                `Specifies the language of the target URL`
                                            ],
                                            [
                                                `media`, 
                                                (<>
                                                media query
                                                </>),  
                                                `Specifies what media/device the target URL is optimized for`
                                            ],
                                            [
                                                `referrerpolicy`, 
                                                (<>
                                                no-referrer<br/>
                                                no-referrer-when-downgrade<br/>
                                                origin<br/>
                                                origin-when-cross-origin<br/>
                                                same-origin<br/>
                                                strict-origin-when-cross-origin<br/>
                                                unsafe-url
                                                </>),  
                                                `Specifies which referrer information to send with the link`
                                            ],
                                            [
                                                `rel`, 
                                                (<>
                                                alternate<br/>
                                                author<br/>
                                                bookmark<br/>
                                                help<br/>
                                                license<br/>
                                                next<br/>
                                                nofollow<br/>
                                                noreferrer<br/>
                                                prefetch<br/>
                                                prev<br/>
                                                search<br/>
                                                tag
                                                </>),  
                                                `Specifies the relationship between the current document and the target URL`
                                            ],
                                            [
                                                `shape`, 
                                                (<>
                                                default<br/>
                                                rect<br/>
                                                circle<br/>
                                                poly
                                                </>),  
                                                `Specifies the shape of the area`
                                            ],
                                            [
                                                `target`, 
                                                (<>
                                                _blank<br/>
                                                _parent<br/>
                                                _self<br/>
                                                _top<br/>
                                                framename
                                                </>),  
                                                `Specifies where to open the target URL`
                                            ],
                                            [
                                                `type`, 
                                                (<>
                                                media_type
                                                </>),  
                                                `Specifies the media type of the target URL`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'canvas', 
                            title: '<canvas>', 
                            cellDir: [
                                {text: `The <canvas> tag is used to draw graphics, on the fly, via scripting (usually JavaScript).`},
                                {text: `The <canvas> tag is transparent, and is only a container for graphics, you must use a script to actually draw the graphics.`},
                                {text: `Any text inside the <canvas> element will be displayed in browsers with JavaScript disabled and in browsers that do not support <canvas>.`},
                            ]
                        },
                        {
                            id: 'figcaption', 
                            title: '<figcaption>', 
                            cellDir: [
                                {text: `The <figcaption> tag defines a caption for a <figure> element.`},
                                {text: `The <figcaption> element can be placed as the first or last child of the <figure> element.`},
                            ]
                        },
                        {
                            id: 'figure', 
                            title: '<figure>', 
                            cellDir: [
                                {text: `The <figure> tag specifies self-contained content, like illustrations, diagrams, photos, code listings, etc.`},
                                {text: `While the content of the <figure> element is related to the main flow, its position is independent of the main flow, and if removed it should not affect the flow of the document.`},
                                {code: `<figure>`, indent: 0},
                                {code: `<img src="pic_trulli.jpg" alt="Trulli" style="width:100%">`, indent: 1},
                                {code: `<figcaption>Fig.1 - Trulli, Puglia, Italy.</figcaption>`, indent: 1},
                                {code: `</figure>`, indent: 0},
                            ]
                        },
                        {
                            id: 'picture', 
                            title: '<picture>', 
                            cellDir: [
                                {text: `The <picture> tag gives web developers more flexibility in specifying image resources.`},
                                {text: `The most common use of the <picture> element will be for art direction in responsive designs. Instead of having one image that is scaled up or down based on the viewport width, multiple images can be designed to more nicely fill the browser viewport.`},
                                {text: `The <picture> element contains two tags: one or more <source> tags and one <img> tag.`},
                                {text: `The browser will look for the first <source> element where the media query matches the current viewport width, and then it will display the proper image (specified in the srcset attribute). The <img> element is required as the last child of the <picture> element, as a fallback option if none of the source tags matches.`},
                                {text: (<><b>Tip: </b>{'The <picture> element works "similar" to <video> and <audio>. You set up different sources, and the first source that fits the preferences is the one being used.'}</>)},
                                {code: `<picture>`, indent: 0},
                                {code: `<source media="(min-width:650px)" srcset="img_pink_flowers.jpg">`, indent: 1},
                                {code: `<source media="(min-width:465px)" srcset="img_white_flower.jpg">`, indent: 1},
                                {code: `<img src="img_orange_flowers.jpg" alt="Flowers" style="width:auto;">`, indent: 1},
                                {code: `</picture>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                            ]
                        },
                        {
                            id: 'svg', 
                            title: '<svg>', 
                            cellDir: [
                                {text: `The <svg> tag defines a container for SVG graphics.`},
                                {text: `SVG has several methods for drawing paths, boxes, circles, text, and graphic images.`},
                            ]
                        },
                    ] 
                },
                {
                    id: 'audioVideo',
                    title: 'Audio / Video',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'audio', 
                            title: '<audio>', 
                            cellDir: [
                                {text: `The <audio> tag is used to embed sound content in a document, such as music or other audio streams.`},
                                {text: `The <audio> tag contains one or more <source> tags with different audio sources. The browser will choose the first source it supports.`},
                                {text: `The text between the <audio> and </audio> tags will only be displayed in browsers that do not support the <audio>element.`},
                                {text: `There are three supported audio formats in HTML: MP3, WAV, and OGG.`},
                                {code: `<audio controls>`, indent: 0},
                                {code: `<source src="horse.ogg" type="audio/ogg">`, indent: 1},
                                {code: `<source src="horse.mp3" type="audio/mpeg">`, indent: 1},
                                {code: `Your browser does not support the audio tag.`, indent: 1},
                                {code: `</audio>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `autoplay`, 
                                                (<>
                                                autoplay
                                                </>),  
                                                `Specifies that the audio will start playing as soon as it is ready`
                                            ],
                                            [
                                                `controls`, 
                                                (<>
                                                controls
                                                </>),  
                                                `Specifies that audio controls should be displayed (such as a play/pause button etc)`
                                            ],
                                            [
                                                `loop`, 
                                                (<>
                                                loop
                                                </>),  
                                                `Specifies that the audio will start over again, every time it is finished`
                                            ],
                                            [
                                                `muted`, 
                                                (<>
                                                muted
                                                </>),  
                                                `Specifies that the audio output should be muted`
                                            ],
                                            [
                                                `preload`, 
                                                (<>
                                                auto<br/>
                                                metadata<br/>
                                                none
                                                </>),  
                                                `Specifies if and how the author thinks the audio should be loaded when the page loads`
                                            ],
                                            [
                                                `src`, 
                                                (<>
                                                URL
                                                </>),  
                                                `Specifies the URL of the audio file`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'source', 
                            title: '<source>', 
                            cellDir: [
                                {text: `The <source> tag is used to specify multiple media resources for media elements, such as <video>, <audio>, and <picture>.`},
                                {text: `The <source> tag allows you to specify alternative video/audio/image files which the browser may choose from, based on browser support or viewport width. The browser will choose the first <source> it supports.`},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `media`, 
                                                (<>
                                                media_query
                                                </>),  
                                                `Accepts any valid media query that would normally be defined in a CSS`
                                            ],
                                            [
                                                `sizes`, 
                                                (<>
                                                
                                                </>),  
                                                `Specifies image sizes for different page layouts`
                                            ],
                                            [
                                                `src`, 
                                                (<>
                                                URL
                                                </>),  
                                                `Required when <source> is used in <audio> and <video>. Specifies the URL of the media file`
                                            ],
                                            [
                                                `srcset`, 
                                                (<>
                                                URL
                                                </>),  
                                                `Required when <source> is used in <picture>. Specifies the URL of the image to use in different situations`
                                            ],
                                            [
                                                `type`, 
                                                (<>
                                                MIME-type
                                                </>),  
                                                `Specifies the MIME-type of the resource`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'track', 
                            title: '<track>', 
                            cellDir: [
                                {text: `The <track> tag specifies text tracks for <audio> or <video> elements.`},
                                {text: `This element is used to specify subtitles, caption files or other files containing text, that should be visible when the media is playing.`},
                                {text: `Tracks are formatted in WebVTT format (.vtt files).`},
                                {code: `<video width="320" height="240" controls>`, indent: 0},
                                {code: `<source src="forrest_gump.mp4" type="video/mp4">`, indent: 1},
                                {code: `<source src="forrest_gump.ogg" type="video/ogg">`, indent: 1},
                                {code: `<track src="fgsubtitles_en.vtt" kind="subtitles" srclang="en" label="English">`, indent: 1},
                                {code: `<track src="fgsubtitles_no.vtt" kind="subtitles" srclang="no" label="Norwegian">`, indent: 1},
                                {code: `</video>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `default`, 
                                                (<>
                                                default
                                                </>),  
                                                `Specifies that the track is to be enabled if the user's preferences do not indicate that another track would be more appropriate`
                                            ],
                                            [
                                                `kind`, 
                                                (<>
                                                captions<br/>
                                                chapters<br/>
                                                descriptions<br/>
                                                metadata<br/>
                                                subtitles
                                                </>),  
                                                `Specifies the kind of text track`
                                            ],
                                            [
                                                `label`, 
                                                (<>
                                                text
                                                </>),  
                                                `Specifies the title of the text track`
                                            ],
                                            [
                                                `src`, 
                                                (<>
                                                URL
                                                </>),  
                                                `Required. Specifies the URL of the track file`
                                            ],
                                            [
                                                `srclang`, 
                                                (<>
                                                language_code
                                                </>),  
                                                `Specifies the language of the track text data (required if kind="subtitles")`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'video', 
                            title: '<video>', 
                            cellDir: [
                                {text: `The <video> tag is used to embed video content in a document, such as a movie clip or other video streams.`},
                                {text: `The <video> tag contains one or more <source> tags with different video sources. The browser will choose the first source it supports.`},
                                {text: `The text between the <video> and </video> tags will only be displayed in browsers that do not support the <video> element.`},
                                {text: `There are three supported video formats in HTML: MP4, WebM, and OGG.`},
                                {code: `<video width="320" height="240" controls>`, indent: 0},
                                {code: `<source src="movie.mp4" type="video/mp4">`, indent: 1},
                                {code: `<source src="movie.ogg" type="video/ogg">`, indent: 1},
                                {code: `Your browser does not support the video tag.`, indent: 1},
                                {code: `</video>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `autoplay`, 
                                                (<>
                                                autoplay
                                                </>),  
                                                `Specifies that the video will start playing as soon as it is ready`
                                            ],
                                            [
                                                `controls`, 
                                                (<>
                                                controls
                                                </>),  
                                                `Specifies that video controls should be displayed (such as a play/pause button etc).`
                                            ],
                                            [
                                                `height`, 
                                                (<>
                                                pixels
                                                </>),  
                                                `Sets the height of the video player`
                                            ],
                                            [
                                                `loop`, 
                                                (<>
                                                loop
                                                </>),  
                                                `Specifies that the video will start over again, every time it is finished`
                                            ],
                                            [
                                                `muted`, 
                                                (<>
                                                muted
                                                </>),  
                                                `Specifies that the audio output of the video should be muted`
                                            ],
                                            [
                                                `poster`, 
                                                (<>
                                                URL
                                                </>),  
                                                `Specifies an image to be shown while the video is downloading, or until the user hits the play button`
                                            ],
                                            [
                                                `preload`, 
                                                (<>
                                                auto<br/>
                                                metadata<br/>
                                                none
                                                </>),  
                                                `Specifies if and how the author thinks the video should be loaded when the page loads`
                                            ],
                                            [
                                                `src`, 
                                                (<>
                                                URL
                                                </>),  
                                                `Specifies the URL of the video file`
                                            ],
                                            [
                                                `width`, 
                                                (<>
                                                pixels
                                                </>),  
                                                `Sets the width of the video player`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'links',
                    title: 'Links',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'a', 
                            title: '<a>', 
                            cellDir: [
                                {text: `The <a> tag defines a hyperlink, which is used to link from one page to another.`},
                                {text: `The most important attribute of the <a> element is the href attribute, which indicates the link's destination.`},
                                {text: `By default, links will appear as follows in all browsers:`},
                                {list: [
                                    'An unvisited link is underlined and blue', 
                                    'A visited link is underlined and purple', 
                                    'An active link is underlined and red', 
                                ]},
                                {code: `<a href="https://www.w3schools.com">Visit W3Schools.com!</a>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `download`, 
                                                (<>
                                                filename
                                                </>),  
                                                `Specifies that the target will be downloaded when a user clicks on the hyperlink`
                                            ],
                                            [
                                                `href`, 
                                                (<>
                                                URL
                                                </>),  
                                                `Specifies the URL of the page the link goes to`
                                            ],
                                            [
                                                `hreflang`, 
                                                (<>
                                                language_code
                                                </>),  
                                                `Specifies the language of the linked document`
                                            ],
                                            [
                                                `media`, 
                                                (<>
                                                media_query
                                                </>),  
                                                `Specifies what media/device the linked document is optimized for`
                                            ],
                                            [
                                                `ping`, 
                                                (<>
                                                list_of_URLs
                                                </>),  
                                                `Specifies a space-separated list of URLs to which, when the link is followed, post requests with the body ping will be sent by the browser (in the background). Typically used for tracking.`
                                            ],
                                            [
                                                `referrerpolicy`, 
                                                (<>
                                                no-referrer<br/>
                                                no-referrer-when-downgrade<br/>
                                                origin<br/>
                                                origin-when-cross-origin<br/>
                                                same-origin<br/>
                                                strict-origin-when-cross-origin<br/>
                                                unsafe-url
                                                </>),  
                                                `Specifies which referrer information to send with the link`
                                            ],
                                            [
                                                `rel`, 
                                                (<>
                                                alternate<br/>
                                                author<br/>
                                                bookmark<br/>
                                                external<br/>
                                                help<br/>
                                                license<br/>
                                                next<br/>
                                                nofollow<br/>
                                                noreferrer<br/>
                                                noopener<br/>
                                                prev<br/>
                                                search<br/>
                                                tag
                                                </>),  
                                                `Specifies the relationship between the current document and the linked document`
                                            ],
                                            [
                                                `target`, 
                                                (<>
                                                _blank<br/>
                                                _parent<br/>
                                                _self<br/>
                                                _top
                                                </>),  
                                                `Specifies where to open the linked document`
                                            ],
                                            [
                                                `type`, 
                                                (<>
                                                media_type
                                                </>),  
                                                `Specifies the media type of the linked document`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'link', 
                            title: '<link>', 
                            cellDir: [
                                {text: `The <link> tag defines the relationship between the current document and an external resource.`},
                                {text: `The <link> tag is most often used to link to external style sheets or to add a favicon to your website.`},
                                {text: `The <link> element is an empty element, it contains attributes only.`},
                                {code: `<head>`, indent: 0},
                                {code: `<link rel="stylesheet" href="styles.css">`, indent: 1},
                                {code: `</head>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `crossorigin`, 
                                                (<>
                                                anonymous<br/>
                                                use-credentials
                                                </>),  
                                                `Specifies how the element handles cross-origin requests`
                                            ],
                                            [
                                                `href`, 
                                                (<>
                                                URL
                                                </>),  
                                                `Specifies the location of the linked document`
                                            ],
                                            [
                                                `hreflang`, 
                                                (<>
                                                language_code
                                                </>),  
                                                `Specifies the language of the text in the linked document`
                                            ],
                                            [
                                                `media`, 
                                                (<>
                                                media_query
                                                </>),  
                                                `Specifies on what device the linked document will be displayed`
                                            ],
                                            [
                                                `referrerpolicy`, 
                                                (<>
                                                no-referrer<br/>
                                                no-referrer-when-downgrade<br/>
                                                origin<br/>
                                                origin-when-cross-origin<br/>
                                                unsafe-url
                                                </>),  
                                                `Specifies which referrer to use when fetching the resource`
                                            ],
                                            [
                                                `rel`, 
                                                (<>
                                                alternate<br/>
                                                dns-prefetch<br/>
                                                help<br/>
                                                icon<br/>
                                                license<br/>
                                                next<br/>
                                                pingback<br/>
                                                preconnect<br/>
                                                prefetch<br/>
                                                preload<br/>
                                                prerender<br/>
                                                prev<br/>
                                                search<br/>
                                                stylesheet
                                                </>),  
                                                `Required. Specifies the relationship between the current document and the linked document`
                                            ],
                                            [
                                                `sizes`, 
                                                (<>
                                                HeightxWidth<br/>
                                                any
                                                </>),  
                                                `Specifies the size of the linked resource. Only for rel="icon"`
                                            ],
                                            [
                                                `title`, 
                                                (<>
                                                
                                                </>),  
                                                `Defines a preferred or an alternate stylesheet`
                                            ],
                                            [
                                                `type`, 
                                                (<>
                                                media_type
                                                </>),  
                                                `Specifies the media type of the linked document`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'nav', 
                            title: '<nav>', 
                            cellDir: [
                                {text: `The <nav> tag defines a set of navigation links.`},
                                {text: `Notice that NOT all links of a document should be inside a <nav> element. The <nav> element is intended only for major block of navigation links.`},
                                {text: `Browsers, such as screen readers for disabled users, can use this element to determine whether to omit the initial rendering of this content.`},
                                {code: `<nav>`, indent: 0},
                                {code: `<a href="/html/">HTML</a>`, indent: 1},
                                {code: `<a href="/css/">CSS</a>`, indent: 1},
                                {code: `<a href="/js/">JavaScript</a> `, indent: 1},
                                {code: `<a href="/python/">Python</a>`, indent: 1},
                                {code: `</nav>`, indent: 0},
                            ]
                        },
                    ] 
                },
                {
                    id: 'lists',
                    title: 'Lists',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'ul', 
                            title: '<ul>', 
                            cellDir: [
                                {text: `The <ol> tag defines an ordered list. An ordered list can be numerical or alphabetical.`},
                                {text: `The <li> tag is used to define each list item.`},
                                {code: `<ol start="50">`, indent: 0},
                                {code: `<li>Coffee</li>`, indent: 1},
                                {code: `<li>Tea</li>`, indent: 1},
                                {code: `<li>Milk</li>`, indent: 1},
                                {code: `</ol>`, indent: 0},
                            ]
                        },
                        {
                            id: 'ol', 
                            title: '<ol>', 
                            cellDir: [
                                {text: `The <ol> tag defines an ordered list. An ordered list can be numerical or alphabetical.`},
                                {text: `The <li> tag is used to define each list item.`},
                                {code: `<ol start="50">`, indent: 0},
                                {code: `<li>Coffee</li>`, indent: 1},
                                {code: `<li>Tea</li>`, indent: 1},
                                {code: `<li>Milk</li>`, indent: 1},
                                {code: `</ol>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `reversed`, 
                                                (<>
                                                reversed
                                                </>),  
                                                `Specifies that the list order should be reversed (9,8,7...)`
                                            ],
                                            [
                                                `start`, 
                                                (<>
                                                number
                                                </>),  
                                                `Specifies the start value of an ordered list`
                                            ],
                                            [
                                                `type`, 
                                                (<>
                                                1<br/>
                                                A<br/>
                                                a<br/>
                                                I<br/>
                                                i
                                                </>),  
                                                `Specifies the kind of marker to use in the list`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'li', 
                            title: '<li>', 
                            cellDir: [
                                {text: `The <li> tag defines a list item.`},
                                {text: `The <li> tag is used inside ordered lists(<ol>), unordered lists (<ul>), and in menu lists (<menu>).`},
                                {text: `In <ul> and <menu>, the list items will usually be displayed with bullet points.`},
                                {text: `In <ol>, the list items will usually be displayed with numbers or letters.`},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `value`, 
                                                (<>
                                                number
                                                </>),  
                                                `Only for <ol> lists. Specifies the start value of a list item. The following list items will increment from that number`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'dl', 
                            title: '<dl>', 
                            cellDir: [
                                {text: `The <dl> tag defines a description list.`},
                                {text: `The <dl> tag is used in conjunction with <dt> (defines terms/names) and <dd> (describes each term/name).`},
                                {code: `<dl>`, indent: 0},
                                {code: `<dt>Coffee</dt>`, indent: 1},
                                {code: `<dd>Black hot drink</dd>`, indent: 1},
                                {code: `<dt>Milk</dt>`, indent: 1},
                                {code: `<dd>White cold drink</dd>`, indent: 1},
                                {code: `</dl>`, indent: 0},
                            ]
                        },
                        {
                            id: 'dt', 
                            title: '<dt>', 
                            cellDir: [
                                {text: `Defines a term/name in a description list`},
                            ]
                        },
                        {
                            id: 'dd', 
                            title: '<dd>', 
                            cellDir: [
                                {text: `Defines a description of a term/name in a description list`},
                            ]
                        },
                    ] 
                },
                {
                    id: 'tables',
                    title: 'Tables',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'table', 
                            title: '<table>', 
                            cellDir: [
                                {text: `The <table> tag defines an HTML table.`},
                                {code: `<table>`, indent: 0},
                                {code: `<caption>Monthly savings</caption>`, indent: 1},
                                {code: `<tr>`, indent: 1},
                                {code: `<th>Month</th>`, indent: 2},
                                {code: `<th>Savings</th>`, indent: 2},
                                {code: `</tr>`, indent: 1},
                                {code: `<tr>`, indent: 1},
                                {code: `<td>January</td>`, indent: 2},
                                {code: `<td>$100</td>`, indent: 2},
                                {code: `</tr>`, indent: 1},
                                {code: `</table>`, indent: 0},
                            ]
                        },
                        {
                            id: 'caption', 
                            title: '<caption>', 
                            cellDir: [
                                {text: `The <caption> tag defines a table caption.`},
                                {text: `The <caption> tag must be inserted immediately after the <table> tag.`},
                                {text: (<><b>Tip:</b>{"By default, a table caption will be center-aligned above a table. However, the CSS properties text-align and caption-sidecan be used to align and place the caption."}</>)},
                            ]
                        },
                        {
                            id: 'th', 
                            title: '<th>', 
                            cellDir: [
                                {text: `The <th> tag defines a header cell in an HTML table. The text in <th> elements are bold and centered by default.`},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `abbr`, 
                                                (<>
                                                text
                                                </>),  
                                                `Specifies an abbreviated version of the content in a header cell`
                                            ],
                                            [
                                                `colspan`, 
                                                (<>
                                                number
                                                </>),  
                                                `Specifies the number of columns a header cell should span`
                                            ],
                                            [
                                                `headers`, 
                                                (<>
                                                header_id
                                                </>),  
                                                `Specifies one or more header cells a cell is related to`
                                            ],
                                            [
                                                `rowspan`, 
                                                (<>
                                                number
                                                </>),  
                                                `Specifies the number of rows a header cell should span`
                                            ],
                                            [
                                                `scope`, 
                                                (<>
                                                col<br/>
                                                colgroup<br/>
                                                row<br/>
                                                rowgroup
                                                </>),  
                                                `Specifies whether a header cell is a header for a column, row, or group of columns or rows`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'tr', 
                            title: '<tr>', 
                            cellDir: [
                                {text: `The <tr> tag defines a row in an HTML table.`},
                                {text: `A <tr> element contains one or more <th> or <td> elements.`},
                            ]
                        },
                        {
                            id: 'td', 
                            title: '<td>', 
                            cellDir: [
                                {text: `The <td> tag defines a standard data cell in an HTML table.`},
                                {text: `The text in <td> elements are regular and left-aligned by default.`},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `colspan`, 
                                                (<>
                                                number
                                                </>),  
                                                `Specifies the number of columns a cell should span`
                                            ],
                                            [
                                                `headers`, 
                                                (<>
                                                header_id
                                                </>),  
                                                `Specifies one or more header cells a cell is related to`
                                            ],
                                            [
                                                `rowspan`, 
                                                (<>
                                                number
                                                </>),  
                                                `Sets the number of rows a cell should span`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'thead', 
                            title: '<thead>', 
                            cellDir: [
                                {text: `The <thead> tag is used to group header content in an HTML table.`},
                                {text: (<><b>Note: </b>{"The <thead> element must have one or more <tr> tags inside."}</>)},
                                {text: `The <thead> tag must be used in the following context: As a child of a <table> element, after any <caption> and <colgroup> elements, and before any <tbody>, <tfoot>, and <tr> elements.`},
                                {text: `The <thead> element is used in conjunction with the <tbody> and <tfoot> elements to specify each part of a table (header, body, footer).`},
                                {text: `*Browsers can use these elements to enable scrolling of the table body independently of the header and footer. Also, when printing a large table that spans multiple pages, these elements can enable the table header and footer to be printed at the top and bottom of each page.`},
                                {text: (<><b>Tip: </b>{"The <thead>, <tbody>, and <tfoot> elements will not affect the layout of the table by default. However, you can use CSS to style these elements (see example below)!"}</>)},
                            ]
                        },
                        {
                            id: 'tbody', 
                            title: '<tbody>', 
                            cellDir: [
                                {text: `The <tbody> tag is used to group the body content in an HTML table.`},
                                {text: (<><b>Note: </b>{"The <tbody> element must have one or more <tr> tags inside."}</>)},
                                {text: `The <tbody> tag must be used in the following context: As a child of a <table> element, after any <caption>, <colgroup>, and <thead> elements.`},
                            ]
                        },
                        {
                            id: 'tfoot', 
                            title: '<tfoot>', 
                            cellDir: [
                                {text: `The <tfoot> tag is used to group footer content in an HTML table.`},
                                {text: (<><b>Note: </b>{"The <tfoot> element must have one or more <tr> tags inside."}</>)},
                                {text: `The <tfoot> tag must be used in the following context: As a child of a <table> element, after any <caption>, <colgroup>, <thead>, and <tbody> elements.`},
                            ]
                        },
                        {
                            id: 'col', 
                            title: '<col>', 
                            cellDir: [
                                {text: `The <col> tag specifies column properties for each column within a <colgroup> element.`},
                                {text: `The <col> tag is useful for applying styles to entire columns, instead of repeating the styles for each cell, for each row.`},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `span`, 
                                                (<>
                                                number
                                                </>),  
                                                `Specifies the number of columns a <col> element should span`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'colGroup', 
                            title: '<colgroup>', 
                            cellDir: [
                                {text: `The <colgroup> tag specifies a group of one or more columns in a table for formatting.`},
                                {text: `<colgroup> tag is useful for applying styles to entire columns, instead of repeating the styles for each cell, for each row.`},
                                {text: (<><b>Note: </b>{"The <colgroup> tag must be a child of a <table> element, after any <caption> elements and before any <thead>, <tbody>, <tfoot>, and <tr> elements."} </>)},
                                {text: (<><b>Tip: </b>{"To define different properties to a column within a <colgroup>, use the <col> tag within the <colgroup> tag."} </>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `span`, 
                                                (<>
                                                number
                                                </>),  
                                                `Specifies the number of columns a <col> element should span`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'stylesAndSemantics',
                    title: 'Styles and Semantics',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'style', 
                            title: '<style>', 
                            cellDir: [
                                {text: `The <style> tag is used to define style information (CSS) for a document.`},
                                {text: `Inside the <style> element you specify how HTML elements should render in a browser.`},
                                {text: (<><b>Tip: </b>{"To link to an external style sheet, use the <link> tag. "} </>)},
                            ]
                        },
                        {
                            id: 'div', 
                            title: '<div>', 
                            cellDir: [
                                {text: `The <div> tag defines a division or a section in an HTML document.`},
                                {text: `The <div> tag is used as a container for HTML elements - which is then styled with CSS or manipulated with JavaScript.`},
                                {text: `The <div> tag is easily styled by using the class or id attribute.`},
                                {text: `Any sort of content can be put inside the <div> tag! `},
                                {text: (<><b>Note: </b>{"By default, browsers always place a line break before and after the  <div> element."} </>)},
                            ]
                        },
                        {
                            id: 'span', 
                            title: '<span>', 
                            cellDir: [
                                {text: `The <span> tag is an inline container used to mark up a part of a text, or a part of a document.`},
                                {text: `The <span> tag is easily styled by CSS or manipulated with JavaScript using the class or id attribute.`},
                                {text: (<><b>Tip: </b>{"The <span> tag is much like the <div> element, but <div> is a block-level element and <span> is an inline element."} </>)},
                                {code: `<p>My mother has <span style="color:blue">blue</span> eyes.</p>`, indent: 0},
                            ]
                        },
                        {
                            id: 'header', 
                            title: '<header>', 
                            cellDir: [
                                {text: `The <header> element represents a container for introductory content or a set of navigational links.`},
                                {text: `A <header> element typically contains:`},
                                {list: [
                                    'one or more heading elements (<h1> - <h6>)', 
                                    'logo or icon', 
                                    'authorship information',
                                ]},
                                {text: (<><b>Note: </b>{"You can have several <header> elements in one HTML document. However, <header> cannot be placed within a <footer>, <address> or another <header> element"} </>)},
                            ]
                        },
                        {
                            id: 'footer', 
                            title: '<footer>', 
                            cellDir: [
                                {text: `The <footer> tag defines a footer for a document or section.`},
                                {text: `A <footer> element typically contains:`},
                                {list: [
                                    'authorship information', 
                                    'copyright information', 
                                    'contact information', 
                                    'sitemap', 
                                    'back to top links', 
                                    'related documents'
                                ]},
                                {text: `You can have several <footer> elements in one document.`},
                                {text: (<><b>Tip: </b>{"Contact information inside a <footer> element should go inside an <address> tag."} </>)},
                            ]
                        },
                        {
                            id: 'main', 
                            title: '<main>', 
                            cellDir: [
                                {text: `The <main> tag specifies the main content of a document.`},
                                {text: `The content inside the <main> element should be unique to the document. It should not contain any content that is repeated across documents such as sidebars, navigation links, copyright information, site logos, and search forms.`},
                                {text: (<><b>Note: </b>{"There must not be more than one <main> element in a document. The <main> element must NOT be a descendant of an <article>, <aside>, <footer>, <header>, or <nav> element."} </>)},
                            ]
                        },
                        {
                            id: 'section', 
                            title: '<section> ', 
                            cellDir: [
                                {text: `The <section> tag defines a section in a document.`},
                            ]
                        },
                        {
                            id: 'article', 
                            title: '<article> ', 
                            cellDir: [
                                {text: `The <article> tag specifies independent, self-contained content.`},
                                {text: `An article should make sense on its own and it should be possible to distribute it independently from the rest of the site.`},
                                {text: `Potential sources for the <article> element:`},
                                {list: [
                                    'Forum post', 
                                    'Blog post', 
                                    'News story', 
                                ]},
                            ]
                        },
                        {
                            id: 'aside', 
                            title: '<aside>', 
                            cellDir: [
                                {text: `The <aside> tag defines some content aside from the content it is placed in.`},
                                {text: `The aside content should be indirectly related to the surrounding content.`},
                                {text: (<><b>Tip: </b>{"The <aside> content is often placed as a sidebar in a document."} </>)},
                            ]
                        },
                        {
                            id: 'details', 
                            title: '<details>', 
                            cellDir: [
                                {text: `The <details> tag specifies additional details that the user can open and close on demand.`},
                                {text: `The <details> tag is often used to create an interactive widget that the user can open and close. By default, the widget is closed. When open, it expands, and displays the content within.`},
                                {text: `Any sort of content can be put inside the <details> tag. `},
                                {text: (<><b>Tip:</b>{"The <summary> tag is used in conjuction with <details> to specify a visible heading for the details."} </>)},
                                {code: `<details>`, indent: 0},
                                {code: `<summary>Epcot Center</summary>`, indent: 1},
                                {code: `<p>Epcot is a theme park at Walt Disney World Resort featuring exciting attractions.</p>`, indent: 1},
                                {code: `</details>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `open`, 
                                                (<>
                                                open
                                                </>),  
                                                `Specifies that the details should be visible (open) to the user`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'summary', 
                            title: '<summary>', 
                            cellDir: [
                                {text: `The <summary> tag defines a visible heading for the <details> element. The heading can be clicked to view/hide the details.`},
                                {text: (<><b>Note: </b>{"The <summary> element should be the first child element of the <details> element."} </>)},
                            ]
                        },
                    ] 
                },
                {
                    id: 'mataInfo',
                    title: 'Meta Info',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'meta', 
                            title: '<meta>', 
                            cellDir: [
                                {text: `The <meta> tag defines metadata about an HTML document. Metadata is data (information) about data.`},
                                {text: `<meta> tags always go inside the <head> element, and are typically used to specify character set, page description, keywords, author of the document, and viewport settings.`},
                                {text: `Metadata will not be displayed on the page, but is machine parsable.`},
                                {text: `Metadata is used by browsers (how to display content or reload page), search engines (keywords), and other web services.`},
                                {text: `There is a method to let web designers take control over the viewport (the user's visible area of a web page), through the <meta> tag (See "Setting The Viewport" example below).`},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `charset`, 
                                                (<>
                                                character_set
                                                </>),  
                                                `Specifies the character encoding for the HTML document`
                                            ],
                                            [
                                                `content`, 
                                                (<>
                                                text
                                                </>),  
                                                `Specifies the value associated with the http-equiv or name attribute`
                                            ],
                                            [
                                                `http-equiv`, 
                                                (<>
                                                content-security-policy<br/>
                                                content-type<br/>
                                                default-style<br/>
                                                refresh
                                                </>),  
                                                `Provides an HTTP header for the information/value of the content attribute`
                                            ],
                                            [
                                                `name`, 
                                                (<>
                                                application-name<br/>
                                                author<br/>
                                                description<br/>
                                                generator<br/>
                                                keywords<br/>
                                                viewport
                                                </>),  
                                                `Specifies a name for the metadata`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'base', 
                            title: '<base>', 
                            cellDir: [
                                {text: `The <base> tag specifies the base URL and/or target for all relative URLs in a document.`},
                                {text: `The <base> tag must have either an href or a target attribute present, or both.`},
                                {text: `There can only be one single <base> element in a document, and it must be inside the <head> element.`},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `href`, 
                                                (<>
                                                URL
                                                </>),  
                                                `Specifies the base URL for all relative URLs in the page`
                                            ],
                                            [
                                                `target`, 
                                                (<>
                                                _blank<br/>
                                                _parent<br/>
                                                _self<br/>
                                                _top
                                                </>),  
                                                `Specifies the default target for all hyperlinks and forms in the page`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'programming',
                    title: 'Programming',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'script', 
                            title: '<script>', 
                            cellDir: [
                                {text: `The <script> tag is used to embed a client-side script (JavaScript).`},
                                {text: `The <script> element either contains scripting statements, or it points to an external script file through the src attribute.`},
                                {text: `Common uses for JavaScript are image manipulation, form validation, and dynamic changes of content.`},
                                {
                                    table: {
                                        head: ['Attribute', 'Value', 'Description'],
                                        body: [
                                            [
                                                `async`, 
                                                (<>
                                                async
                                                </>),  
                                                `Specifies that the script is downloaded in parallel to parsing the page, and executed as soon as it is available (before parsing completes) (only for external scripts)`
                                            ],
                                            [
                                                `crossorigin`, 
                                                (<>
                                                anonymous
                                                use-credentials
                                                </>),  
                                                `Sets the mode of the request to an HTTP CORS Request`
                                            ],
                                            [
                                                `defer`, 
                                                (<>
                                                defer
                                                </>),  
                                                `Specifies that the script is downloaded in parallel to parsing the page, and executed after the page has finished parsing (only for external scripts)`
                                            ],
                                            [
                                                `integrity`, 
                                                (<>
                                                filehash
                                                </>),  
                                                `Allows a browser to check the fetched script to ensure that the code is never loaded if the source has been manipulated`
                                            ],
                                            [
                                                `nomodule`, 
                                                (<>
                                                True
                                                False
                                                </>),  
                                                `Specifies that the script should not be executed in browsers supporting ES2015 modules`
                                            ],
                                            [
                                                `referrerpolicy`, 
                                                (<>
                                                no-referrer
                                                no-referrer-when-downgrade
                                                origin
                                                origin-when-cross-origin
                                                same-origin
                                                strict-origin
                                                strict-origin-when-cross-origin
                                                unsafe-url
                                                </>),  
                                                `Specifies which referrer information to send when fetching a script`
                                            ],
                                            [
                                                `src`, 
                                                (<>
                                                URL
                                                </>),  
                                                `Specifies the URL of an external script file`
                                            ],
                                            [
                                                `type`, 
                                                (<>
                                                scripttype
                                                </>),  
                                                `Specifies the media type of the script`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'noscript', 
                            title: '<noscript>', 
                            cellDir: [
                                {text: `The <noscript> tag defines an alternate content to be displayed to users that have disabled scripts in their browser or have a browser that doesn't support script.`},
                                {text: `The <noscript> element can be used in both <head> and <body>. When used inside <head>, the <noscript> element could only contain <link>, <style>, and <meta> elements.`},
                            ]
                        },
                    ] 
                },
                {
                    id: 'globalAttributes',
                    title: 'Global Attributes',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'class', 
                            title: 'class', 
                            cellDir: [
                                {text: `The class attribute specifies one or more class names for an element. `},
                                {text: `The class attribute is mostly used to point to a class in a style sheet. However, it can also be used by a JavaScript (via the HTML DOM) to make changes to HTML elements with a specified class.`},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `classname`, 
                                                `Specifies one or more class names for an element. To specify multiple classes, separate the class names with a space, e.g. <span class="left important">. This allows you to combine several CSS classes for one HTML element.`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'contenteditable', 
                            title: 'contenteditable', 
                            cellDir: [
                                {text: `The contenteditable attribute specifies whether the content of an element is editable or not.`},
                                {text: (<><b>Note: </b>{"When the contenteditable attribute is not set on an element, the element will inherit it from its parent."}</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `true`, 
                                                `Specifies that the element is editable`
                                            ],
                                            [
                                                `false`, 
                                                `Specifies that the element is not editable`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'data', 
                            title: 'data-*', 
                            cellDir: [
                                {text: `The data-* attributes is used to store custom data private to the page or application.`},
                                {text: `The data-* attributes gives us the ability to embed custom data attributes on all HTML elements.`},
                                {text: `The stored (custom) data can then be used in the page's JavaScript to create a more engaging user experience (without any Ajax calls or server-side database queries).`},
                                {text: `The data-* attributes consist of two parts:`},
                                {list: [
                                    'The attribute name should not contain any uppercase letters, and must be at least one character long after the prefix "data-"', 
                                    'The attribute value can be any string', 
                                ]},
                                {text: (<><b>Note: </b>{'Custom attributes prefixed with "data-" will be completely ignored by the user agent.'}</>)},
                                
                                {code: `<li data-animal-type="bird">Owl</li>`, indent: 0},
                                {text: (<>&nbsp;</>)},
                            ]
                        },
                        {
                            id: 'dir', 
                            title: 'dir', 
                            cellDir: [
                                {text: `The dir attribute specifies the text direction of the element's content.`},
                            ]
                        },
                        {
                            id: 'draggable', 
                            title: 'draggable', 
                            cellDir: [
                                {text: `The draggable attribute specifies whether an element is draggable or not.`},
                                {text: (<><b>Tip: </b>{"Links and images are draggable by default."}</>)},
                                {text: (<><b>Tip: </b>{"The draggable attribute is often used in drag and drop operations. Read our HTML Drag and Drop tutorial to learn more."}</>)},
                                {  
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `true`, 
                                                `Specifies that the element is draggable`
                                            ],
                                            [
                                                `false`, 
                                                `Specifies that the element is not draggable`
                                            ],
                                            [
                                                `auto`,  
                                                `Uses the default behavior of the browser`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'hidden', 
                            title: 'hidden', 
                            cellDir: [
                                {text: `The hidden attribute is a boolean attribute.`},
                                {text: `When present, it specifies that an element is not yet, or is no longer, relevant.`},
                                {text: `Browsers should not display elements that have the hidden attribute specified.`},
                                {text: `The hidden attribute can also be used to keep a user from seeing an element until some other condition has been met (like selecting a checkbox, etc.). Then, a JavaScript could remove the hidden attribute, and make the element visible.`},
                            ]
                        },
                        {
                            id: 'id', 
                            title: 'id', 
                            cellDir: [
                                {text: `The id attribute specifies a unique id for an HTML element (the value must be unique within the HTML document). `},
                                {text: `The id attribute is most used to point to a style in a style sheet, and by JavaScript (via the HTML DOM) to manipulate the element with the specific id.`},
                            ]
                        },
                        {
                            id: 'lang', 
                            title: 'lang', 
                            cellDir: [
                                {text: `The lang attribute specifies the language of the element's content.`},
                                {text: `Common examples are "en" for English, "es" for Spanish, "fr" for French, and so on.`},
                            ]
                        },
                        {
                            id: 'spellcheck', 
                            title: 'spellcheck', 
                            cellDir: [
                                {text: `The spellcheck attribute specifies whether the element is to have its spelling and grammar checked or not.`},
                                {text: `The following can be spellchecked:`},
                                {list: [
                                    'Text values in input elements (not password)', 
                                    'Text in <textarea> elements', 
                                    'Text in editable elements',
                                ]},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `true`, 
                                                `The element is to have its spelling and grammar checked`
                                            ],
                                            [
                                                `false`, 
                                                `The element is not to be checked`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'style', 
                            title: 'style', 
                            cellDir: [
                                {text: `The style attribute specifies an inline style for an element.`},
                                {text: `The style attribute will override any style set globally, e.g. styles specified in the <style> tag or in an external style sheet.`},
                                {text: `The style attribute can be used on any HTML element (it will validate on any HTML element. However, it is not necessarily useful).`},
                            ]
                        },
                        {
                            id: 'tabindex', 
                            title: 'tabindex', 
                            cellDir: [
                                {text: `The tabindex attribute specifies the tab order of an element (when the "tab" button is used for navigating).`},
                                {text: `The tabindex attribute can be used on any HTML element (it will validate on any HTML element. However, it is not necessarily useful).`},
                            ]
                        },
                        {
                            id: 'title', 
                            title: 'title', 
                            cellDir: [
                                {text: `The title attribute specifies extra information about an element.`},
                                {text: `The information is most often shown as a tooltip text when the mouse moves over the element.`},
                                {text: `The title attribute can be used on any HTML element (it will validate on any HTML element. However, it is not necessarily useful).`},
                            ]
                        },
                        {
                            id: 'translate', 
                            title: 'translate', 
                            cellDir: [
                                {text: `The translate attribute specifies whether the content of an element should be translated or not.`},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `yes`, 
                                                `Specifies that the content of the element should be translated`
                                            ],
                                            [
                                                `no`, 
                                                `Specifies that the content of the element must not be translated`
                                            ]
                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'formatting',
                    title: 'Formatting',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'abbr', 
                            title: '<abbr>', 
                            cellDir: [
                                {text: `Defines an abbreviation or an acronym`},
                            ]
                        },
                        {
                            id: 'address', 
                            title: '<address>', 
                            cellDir: [
                                {text: `Defines contact information for the author/owner of a document/article`},
                            ]
                        },
                        {
                            id: 'b', 
                            title: '<b>', 
                            cellDir: [
                                {text: `Defines bold text`},
                            ]
                        },
                        {
                            id: 'bdi', 
                            title: '<bdi>', 
                            cellDir: [
                                {text: `Isolates a part of text that might be formatted in a different direction from other text outside it`},
                            ]
                        },
                        {
                            id: 'bdo', 
                            title: '<bdo>', 
                            cellDir: [
                                {text: `Overrides the current text direction`},
                            ]
                        },
                        {
                            id: 'blockquote', 
                            title: '<blockquote>', 
                            cellDir: [
                                {text: `Defines a section that is quoted from another source`},
                            ]
                        },
                        {
                            id: 'cite', 
                            title: '<cite>', 
                            cellDir: [
                                {text: `Defines the title of a work`},
                            ]
                        },
                        {
                            id: 'code', 
                            title: '<code>', 
                            cellDir: [
                                {text: `Defines a piece of computer code`},
                            ]
                        },
                        {
                            id: 'del', 
                            title: '<del>', 
                            cellDir: [
                                {text: `Defines text that has been deleted from a document`},
                            ]
                        },
                        {
                            id: 'dfn', 
                            title: '<dfn>', 
                            cellDir: [
                                {text: `Specifies a term that is going to be defined within the content`},
                            ]
                        },
                        {
                            id: 'em', 
                            title: '<em>', 
                            cellDir: [
                                {text: `Defines emphasized text `},
                            ]
                        },
                        {
                            id: 'i', 
                            title: '<i>', 
                            cellDir: [
                                {text: `Defines a part of text in an alternate voice or mood`},
                            ]
                        },
                        {
                            id: 'ins', 
                            title: '<ins>', 
                            cellDir: [
                                {text: `Defines a text that has been inserted into a document`},
                            ]
                        },
                        {
                            id: 'kbd', 
                            title: '<kbd>', 
                            cellDir: [
                                {text: `Defines keyboard input`},
                            ]
                        },
                        {
                            id: 'mark', 
                            title: '<mark>', 
                            cellDir: [
                                {text: `Defines marked/highlighted text`},
                            ]
                        },
                        {
                            id: 'meter', 
                            title: '<meter>', 
                            cellDir: [
                                {text: `Defines a scalar measurement within a known range (a gauge)`},
                            ]
                        },
                        {
                            id: 'pre', 
                            title: '<pre>', 
                            cellDir: [
                                {text: `Defines preformatted text`},
                            ]
                        },
                        {
                            id: 'progress', 
                            title: '<progress>', 
                            cellDir: [
                                {text: `Represents the progress of a task`},
                            ]
                        },
                        {
                            id: 'q', 
                            title: '<q>', 
                            cellDir: [
                                {text: `Defines a short quotation`},
                            ]
                        },
                        {
                            id: 'rp', 
                            title: '<rp>', 
                            cellDir: [
                                {text: `Defines what to show in browsers that do not support ruby annotations`},
                            ]
                        },
                        {
                            id: 'rt', 
                            title: '<rt>', 
                            cellDir: [
                                {text: `Defines an explanation/pronunciation of characters (for East Asian typography)`},
                            ]
                        },
                        {
                            id: 'ruby', 
                            title: '<ruby>', 
                            cellDir: [
                                {text: `Defines a ruby annotation (for East Asian typography)`},
                            ]
                        },
                        {
                            id: 's',
                             title: '<s>', 
                             cellDir: [
                                {text: `Defines text that is no longer correct`},
                            ]
                        },
                        {
                            id: 'samp', 
                            title: '<samp>', 
                            cellDir: [
                                {text: `Defines sample output from a computer program`},
                            ]
                        },
                        {
                            id: 'small', 
                            title: '<small>', 
                            cellDir: [
                                {text: `Defines smaller text`},
                            ]
                        },
                        {
                            id: 'strong', 
                            title: '<strong>', 
                            cellDir: [
                                {text: `Defines important text`},
                            ]
                        },
                        {
                            id: 'sub', 
                            title: '<sub>', 
                            cellDir: [
                                {text: `Defines subscripted text`},
                            ]
                        },
                        {
                            id: 'sup', 
                            title: '<sup>', 
                            cellDir: [
                                {text: `Defines superscripted text`},
                            ]
                        },
                        {
                            id: 'template', 
                            title: '<template>', 
                            cellDir: [
                                {text: `Defines a container for content that should be hidden when the page loads`},
                            ]
                        },
                        {
                            id: 'time', 
                            title: '<time>', 
                            cellDir: [
                                {text: `Defines a specific time (or datetime)`},
                            ]
                        },
                        {
                            id: 'u', 
                            title: '<u>', 
                            cellDir: [
                                {text: `Defines some text that is unarticulated and styled differently from normal text`},
                            ]
                        },
                        {
                            id: 'var', 
                            title: '<var>', 
                            cellDir: [
                                {text: `Defines a variable`},
                            ]
                        },
                        {
                            id: 'wbr', 
                            title: '<wbr>', 
                            cellDir: [
                                {text: `Defines a possible line-break`},
                            ]
                        },
                    ] 
                }
            ]
        },
        {
            id: 'css', 
            title: 'CSS', 
            dis: 'Styling for Web Sites', 
            TableDir: [
                {
                    id: 'positioning',
                    title: 'Positioning',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'display', 
                            title: 'display', 
                            cellDir: [
                                {text: `The display property specifies the display behavior (the type of rendering box) of an element.`},
                                {text: `In HTML, the default display property value is taken from the HTML specifications or from the browser/user default style sheet. The default value in XML is inline, including SVG elements.`},
                                {text: (<><b>Note: </b>{'The values "flex" and "inline-flex" requires the -webkit- prefix to work in Safari.'}</>)},
                                {text: (<><b>Note: </b>{'"display: contents" does not work in Edge prior version 79.'}</>)},
                                {code: `display: inline`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `inline`, 
                                                `Displays an element as an inline element (like <span>). Any height and width properties will have no effect`
                                            ],
                                            [
                                                `block`, 
                                                `Displays an element as a block element (like <p>). It starts on a new line, and takes up the whole width`
                                            ],
                                            [
                                                `contents`, 
                                                `Makes the container disappear, making the child elements children of the element the next level up in the DOM`
                                            ],
                                            [
                                                `flex`, 
                                                `Displays an element as a block-level flex container`
                                            ],
                                            [
                                                `grid`, 
                                                `Displays an element as a block-level grid container`
                                            ],
                                            [
                                                `inline-block`, 
                                                `Displays an element as an inline-level block container. The element itself is formatted as an inline element, but you can apply height and width values`
                                            ],
                                            [
                                                `inline-flex`, 
                                                `Displays an element as an inline-level flex container`
                                            ],
                                            [
                                                `inline-grid`, 
                                                `Displays an element as an inline-level grid container`
                                            ],
                                            [
                                                `inline-table`, 
                                                `The element is displayed as an inline-level table`
                                            ],
                                            [
                                                `list-item`, 
                                                `Let the element behave like a <li> element`
                                            ],
                                            [
                                                `run-in`, 
                                                `Displays an element as either block or inline, depending on context`
                                            ],
                                            [
                                                `table`, 
                                                `Let the element behave like a <table> element`
                                            ],
                                            [
                                                `table-caption`, 
                                                `Let the element behave like a <caption> element`
                                            ],
                                            [
                                                `table-column-group`, 
                                                `Let the element behave like a <colgroup> element`
                                            ],
                                            [
                                                `table-header-group`, 
                                                `Let the element behave like a <thead> element`
                                            ],
                                            [
                                                `table-footer-group`, 
                                                `Let the element behave like a <tfoot> element`
                                            ],
                                            [
                                                `table-row-group`, 
                                                `Let the element behave like a <tbody> element`
                                            ],
                                            [
                                                `table-cell`, 
                                                `Let the element behave like a <td> element`
                                            ],
                                            [
                                                `table-column`, 
                                                `Let the element behave like a <col> element`
                                            ],
                                            [
                                                `table-row`, 
                                                `Let the element behave like a <tr> element`
                                            ],
                                            [
                                                `none`, 
                                                `The element is completely removed`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'alignContent', 
                            title: 'align-content', 
                            cellDir: [
                                {text: `The align-content property modifies the behavior of the flex-wrap property. It is similar to align-items, but instead of aligning flex items, it aligns flex lines.`},
                                {text: (<><b>Note: </b>{"There must be multiple lines of items for this property to have any effect!"}</>)},
                                {text: (<><b>Tip: </b>{"Use the justify-content property to align the items on the main-axis (horizontally)."}</>)},
                                {code: `align-content: center`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `stretch`, 
                                                `Default value. Lines stretch to take up the remaining space`
                                            ],
                                            [
                                                `center`, 
                                                `Lines are packed toward the center of the flex container`
                                            ],
                                            [
                                                `flex-start`, 
                                                `Lines are packed toward the start of the flex container`
                                            ],
                                            [
                                                `flex-end`, 
                                                `Lines are packed toward the end of the flex container`
                                            ],
                                            [
                                                `space-between`, 
                                                `Lines are evenly distributed in the flex container`
                                            ],
                                            [
                                                `space-around`, 
                                                `Lines are evenly distributed in the flex container, with half-size spaces on either end`
                                            ],
                                            [
                                                `space-evenly`, 
                                                `Lines are evenly distributed in the flex container, with equal space around them`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'alignItems', 
                            title: 'align-items', 
                            cellDir: [
                                {text: `The align-items property specifies the default alignment for items inside the flexible container.`},
                                {text: (<><b>Tip: </b>{"Use the align-self property of each item to override the align-items property."}</>)},
                                {code: `align-items: center`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `stretch`, 
                                                `Default. Items are stretched to fit the container`
                                            ],
                                            [
                                                `center`, 
                                                `Items are positioned at the center of the container`
                                            ],
                                            [
                                                `flex-start`, 
                                                `Items are positioned at the beginning of the container`
                                            ],
                                            [
                                                `flex-end`, 
                                                `Items are positioned at the end of the container`
                                            ],
                                            [
                                                `baseline`, 
                                                `Items are positioned at the baseline of the container`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'alignSelf', 
                            title: 'align-self', 
                            cellDir: [
                                {text: `The align-self property specifies the alignment for the selected item inside the flexible container.`},
                                {text: (<><b>Note: </b>{"The align-self property overrides the flexible container's align-items property."}</>)},
                                {code: `align-self: center`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default. The element inherits its parent container's align-items property, or "stretch" if it has no parent container`
                                            ],
                                            [
                                                `stretch`, 
                                                `The element is positioned to fit the container`
                                            ],
                                            [
                                                `center`, 
                                                `The element is positioned at the center of the container`
                                            ],
                                            [
                                                `flex-start`, 
                                                `The element is positioned at the beginning of the container`
                                            ],
                                            [
                                                `flex-end`, 
                                                `The element is positioned at the end of the container`
                                            ],
                                            [
                                                `baseline`, 
                                                `The element is positioned at the baseline of the container`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'justifyContent', 
                            title: 'justify-content', 
                            cellDir: [
                                {text: `The justify-content property aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally).`},
                                {text: (<><b>Tip: </b>{"Use the align-items property to align the items vertically."}</>)},
                                {code: `justify-content: center`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `flex-start`, 
                                                `Default value. Items are positioned at the beginning of the container`
                                            ],
                                            [
                                                `flex-end`, 
                                                `Items are positioned at the end of the container`
                                            ],
                                            [
                                                `center`, 
                                                `Items are positioned in the center of the container`
                                            ],
                                            [
                                                `space-between`, 
                                                `Items will have space between them`
                                            ],
                                            [
                                                `space-around`, 
                                                `Items will have space before, between, and after them`
                                            ],
                                            [
                                                `space-evenly`, 
                                                `Items will have equal space around them`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'position', 
                            title: 'position', 
                            cellDir: [
                                {text: `The position property specifies the type of positioning method used for an element (static, relative, absolute, fixed, or sticky).`},
                                {text: (<><b>Note: </b>{"The sticky value is not supported in Internet Explorer or Edge 15 and earlier versions."}</>)},
                                {code: `position: absolute`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `static`, 
                                                `Default value. Elements render in order, as they appear in the document flow`
                                            ],
                                            [
                                                `absolute`, 
                                                `The element is positioned relative to its first positioned (not static) ancestor element`
                                            ],
                                            [
                                                `fixed`, 
                                                `The element is positioned relative to the browser window`
                                            ],
                                            [
                                                `relative`, 
                                                `The element is positioned relative to its normal position, so "left:20px" adds 20 pixels to the element's LEFT position`
                                            ],
                                            [
                                                `sticky`, 
                                                (<>
                                                {"The element is positioned based on the user's scroll position"}<br/>
                                                {'A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).'}<br/>
                                                <b>Note: </b>Not supported in IE/Edge 15 or earlier. Supported in Safari from version 6.1 with a -webkit- prefix.
                                                </>)
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'clip', 
                            title: 'clip', 
                            cellDir: [
                                {text: `What happens if an image is larger than its containing element?`},
                                {text: `The clip property lets you specify a rectangle to clip an absolutely positioned element. The rectangle is specified as four coordinates, all from the top-left corner of the element to be clipped.`},
                                {text: (<><b>Note: </b>{'The clip property does not work if "overflow:visible".'}</>)},
                                {text: (<><b>Note: </b>{"The clip property is deprecated and will be replaced by the clip-path property in the future."}</>)},
                                {code: `clip: rect(0px,60px,200px,0px)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `No clipping will be applied. This is default`
                                            ],
                                            [
                                                `shape`, 
                                                `Clips an element. The only valid value is: rect (top, right, bottom, left)`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'perspective', 
                            title: 'perspective', 
                            cellDir: [
                                {text: `The perspective property is used to give a 3D-positioned element some perspective.`},
                                {text: `The perspective property defines how far the object is away from the user. So, a lower value will result in a more intensive 3D effect than a higher value.`},
                                {text: `When defining the perspective property for an element, it is the CHILD elements that get the perspective view, NOT the element itself.`},
                                {text: (<><b>Tip: </b>{"Also look at the perspective-origin property, which defines at which position the user is looking at the 3D object."}</>)},
                                {code: `perspective: 100px`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `length`, 
                                                `How far the element is placed from the view`
                                            ],
                                            [
                                                `none`, 
                                                `Default value. Same as 0. The perspective is not set`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'perspectiveOrigin', 
                            title: 'perspective-origin', 
                            cellDir: [
                                {text: `The perspective-origin property defines at from which position the user is looking at the 3D-positioned element.`},
                                {text: `When defining the perspective-origin property for an element, it is the CHILD elements that will get the effect, NOT the element itself.`},
                                {text: (<><b>Note: </b>{"This property must be used in conjunction with the perspective property!"}</>)},
                                {code: `perspective-origin: left`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `x-axis`, 
                                                (<>
                                                Defining where the view is placed at the x-axis<br/>
                                                Possible values: left, center, right, length, %<br/>
                                                Default value: 50%
                                                </>)
                                            ],
                                            [
                                                `y-axis`, 
                                                (<>
                                                Defining where the view is placed at the y-axis<br/>
                                                Possible values: top, center, bottom, length, %<br/>
                                                Default value: 50%
                                                </>)
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'order', 
                            title: 'order', 
                            cellDir: [
                                {text: `The order property specifies the order of a flexible item relative to the rest of the flexible items inside the same container.`},
                                {text: (<><b>Note: </b>{"If the element is not a flexible item, the order property has no effect."}</>)},
                                {code: `div#myRedDIV {order: 2;}`, indent: 0},
                                {code: `div#myBlueDIV {order: 4;}`, indent: 0},
                                {code: `div#myGreenDIV {order: 3;}`, indent: 0},
                                {code: `div#myPinkDIV {order: 1;}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `number`, 
                                                `Default value 0. Specifies the order for the flexible item`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'float', 
                            title: 'float', 
                            cellDir: [
                                {text: `The float property specifies whether an element should float to the left, right, or not at all.`},
                                {text: (<><b>Note: </b>{"Absolutely positioned elements ignore the float property!"}</>)},
                                {text: (<><b>Note: </b>{"Elements next to a floating element will flow around it. To avoid this, use the clear property or the clearfix hack (see example at the bottom of this page)."}</>)},
                                {code: `float: right`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `The element does not float, (will be displayed just where it occurs in the text). This is default`
                                            ],
                                            [
                                                `left`, 
                                                `The element floats to the left of its container`
                                            ],
                                            [
                                                `right`, 
                                                `The element floats the right of its container`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'clear', 
                            title: 'clear', 
                            cellDir: [
                                {text: `The clear property controls the flow next to floated elements.`},
                                {text: `The clear property specifies what should happen with the element that is next to a floating element.`},
                                {code: `clear: left`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Default. The element is not pushed below left or right floated elements`
                                            ],
                                            [
                                                `left`, 
                                                `The element is pushed below left floated elements`
                                            ],
                                            [
                                                `right`, 
                                                `The element is pushed below right floated elements`
                                            ],
                                            [
                                                `both`, 
                                                `The element is pushed below both left and right floated elements`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'objectPosition', 
                            title: 'object-position', 
                            cellDir: [
                                {text: `The object-position property is used together with object-fit to specify how an <img> or <video> should be positioned with x/y coordinates inside its "own content box".`},
                                {code: `object-fit: none;`, indent: 0},
                                {code: `object-position: 5px 10%;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `position`, 
                                                `Specifies the position of the image or video inside its content box. First value controls the x-axis and the second value controls the y-axis. Can be a string (left, center or right), or a number (in px or %). Negative values are allowed`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'verticalAlign', 
                            title: 'vertical-align', 
                            cellDir: [
                                {text: `The vertical-align property sets the vertical alignment of an element.`},
                                {code: `vertical-align: sub`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `baseline`, 
                                                `The element is aligned with the baseline of the parent. This is default`
                                            ],
                                            [
                                                `length`, 
                                                `Raises or lower an element by the specified length. Negative values are allowed. Read about length units`
                                            ],
                                            [
                                                `%`, 
                                                `Raises or lower an element by a percent of the "line-height" property. Negative values are allowed`
                                            ],
                                            [
                                                `sub`, 
                                                `The element is aligned with the subscript baseline of the parent`
                                            ],
                                            [
                                                `super`, 
                                                `The element is aligned with the superscript baseline of the parent`
                                            ],
                                            [
                                                `top`, 
                                                `The element is aligned with the top of the tallest element on the line`
                                            ],
                                            [
                                                `text-top`, 
                                                `The element is aligned with the top of the parent element's font`
                                            ],
                                            [
                                                `middle`, 
                                                `The element is placed in the middle of the parent element`
                                            ],
                                            [
                                                `bottom`, 
                                                `The element is aligned with the lowest element on the line`
                                            ],
                                            [
                                                `text-bottom`, 
                                                `The element is aligned with the bottom of the parent element's font`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'zIndex', 
                            title: 'z-index', 
                            cellDir: [
                                {text: `The z-index property specifies the stack order of an element.`},
                                {text: `An element with greater stack order is always in front of an element with a lower stack order.`},
                                {text: (<><b>Note: </b>{"z-index only works on positioned elements (position: absolute, position: relative, position: fixed, or position: sticky) and flex items (elements that are direct children of display:flex elements)."}</>)},
                                {text: (<><b>Note: </b>{"If two positioned elements overlap without a z-index specified, the element positioned last in the HTML code will be shown on top. "}</>)},
                                {code: `z-index: -1;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Sets the stack order equal to its parents. This is default`
                                            ],
                                            [
                                                `number`, 
                                                `Sets the stack order of the element. Negative numbers are allowed`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'top', 
                            title: 'top', 
                            cellDir: [
                                {text: `The top property affects the vertical position of a positioned element. This property has no effect on non-positioned elements.`},
                                {list: [
                                    'If position: absolute; or position: fixed; - the top property sets the top edge of an element to a unit above/below the top edge of its nearest positioned ancestor.', 
                                    "If position: relative; - the top property makes the element's top edge to move above/below its normal position.", 
                                    'If position: sticky; - the top property behaves like its position is relative when the element is inside the viewport, and like its position is fixed when it is outside.', 
                                    'If position: static; - the top property has no effect.', 
                                ]},
                                {code: `top: 50px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Lets the browser calculate the top edge position. This is default`
                                            ],
                                            [
                                                `length`, 
                                                `Sets the top edge position in px, cm, etc. Negative values are allowed.`
                                            ],
                                            [
                                                `%`, 
                                                `Sets the top edge position in % of containing element. Negative values are allowed`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'right', 
                            title: 'right', 
                            cellDir: [
                                {text: `The right property affects the horizontal position of a positioned element. This property has no effect on non-positioned elements.`},
                                {list: [
                                    'If position: absolute; or position: fixed; - the right property sets the right edge of an element to a unit to the right of the right edge of its nearest positioned ancestor.', 
                                    'If position: relative; - the right property sets the right edge of an element to a unit to the left/right of its normal position.', 
                                    'If position: sticky; - the right property behaves like its position is relative when the element is inside the viewport, and like its position is fixed when it is outside.', 
                                    'If position: static; - the right property has no effect.', 
                                ]},
                                {code: `right: 150px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Lets the browser calculate the top edge position. This is default`
                                            ],
                                            [
                                                `length`, 
                                                `Sets the top edge position in px, cm, etc. Negative values are allowed.`
                                            ],
                                            [
                                                `%`, 
                                                `Sets the top edge position in % of containing element. Negative values are allowed`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'bottom', 
                            title: 'bottom', 
                            cellDir: [
                                {text: `The bottom property affects the vertical position of a positioned element. This property has no effect on non-positioned elements.`},
                                {list: [
                                    'If position: absolute; or position: fixed; - the bottom property sets the bottom edge of an element to a unit above/below the bottom edge of its nearest positioned ancestor.', 
                                    "If position: relative; - the bottom property makes the element's bottom edge to move above/below its normal position.", 
                                    'If position: sticky; - the bottom property behaves like its position is relative when the element is inside the viewport, and like its position is fixed when it is outside.', 
                                    'If position: static; - the bottom property has no effect.', 
                                ]},
                                {code: `bottom: 10px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Lets the browser calculate the top edge position. This is default`
                                            ],
                                            [
                                                `length`, 
                                                `Sets the top edge position in px, cm, etc. Negative values are allowed. `
                                            ],
                                            [
                                                `%`, 
                                                `Sets the top edge position in % of containing element. Negative values are allowed`
                                            ],  
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'left', 
                            title: 'left', 
                            cellDir: [
                                {text: `The left property affects the horizontal position of a positioned element. This property has no effect on non-positioned elements.`},
                                {list: [
                                    'If position: absolute; or position: fixed; - the left property sets the left edge of an element to a unit to the left of the left edge of its nearest positioned ancestor.', 
                                    'If position: relative; - the left property sets the left edge of an element to a unit to the left/right of its normal position.', 
                                    'If position: sticky; - the left property behaves like its position is relative when the element is inside the viewport, and like its position is fixed when it is outside.', 
                                    'If position: static; - the left property has no effect.', 
                                ]},
                                {code: `left: 150px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Lets the browser calculate the top edge position. This is default`
                                            ],
                                            [
                                                `length`, 
                                                `Sets the top edge position in px, cm, etc. Negative values are allowed.`
                                            ],
                                            [
                                                `%`, 
                                                `Sets the top edge position in % of containing element. Negative values are allowed`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        
                    ] 
                },{
                    id: 'spacing',
                    title: 'Spacing',
                    titleDir: [],
                    RowDir: [              
                        {
                            id: 'margin', 
                            title: 'margin', 
                            cellDir: [
                                {text: `The margin property sets the margins for an element, and is a shorthand property for the following properties:`},
                                {list: [
                                    '•	margin-top', 
                                    '•	margin-right', 
                                    '•	margin-bottom', 
                                    '•	margin-left', 
                                ]},
                                {text: (<><b>{"If the margin property has four values:"}</b></>)},
                                {code: `margin: 10px 5px 15px 20px;`, indent: 0},
                                {list: [
                                    'top margin is 10px', 
                                    'right margin is 5px', 
                                    'bottom margin is 15px', 
                                    'left margin is 20px',
                                ]},
                                {text: (<><b>{"If the margin property has three values:"}</b></>)},
                                {code: `margin: 10px 5px 15px;`, indent: 0},
                                {list: [
                                    'top margin is 10px', 
                                    'right and left margins are 5px', 
                                    'bottom margin is 15px', 
                                ]},
                                {text: (<><b>{"If the margin property has two values:"}</b></>)},
                                {code: `margin: 10px 5px;`, indent: 0},
                                {list: [
                                    'top and bottom margins are 10px', 
                                    'right and left margins are 5px', 
                                ]},
                                {text: (<><b>{"If the margin property has one value:"}</b></>)},
                                {code: `margin: 10px;`, indent: 0},
                                {list: [
                                    'all four margins are 10px', 
                                ]},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `length`, 
                                                `Specifies a margin in px, pt, cm, etc. Default value is 0. Negative values are allowed. Read about length units`
                                            ],
                                            [
                                                `%`, 
                                                `Specifies a margin in percent of the width of the containing element`
                                            ],
                                            [
                                                `auto`, 
                                                `The browser calculates a margin`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'padding', 
                            title: 'padding', 
                            cellDir: [
                                {text: `An element's padding is the space between its content and its border.`},
                                {text: `The padding property is a shorthand property for:`},
                                {list: [
                                    'padding-top', 
                                    'padding-right', 
                                    'padding-bottom', 
                                    'padding-left', 
                                ]},
                                {text: (<><b>Note: </b>{"Padding creates extra space within an element, while margin creates extra space around an element."}</>)},
                                {text: (<><b>{"If the padding property has four values:"}</b></>)},
                                {code: `padding:10px 5px 15px 20px;`, indent: 0},
                                {list: [
                                    'top padding is 10px', 
                                    'right padding is 5px', 
                                    'bottom padding is 15px', 
                                    'left padding is 20px', 
                                ]},
                                {text: (<><b>{"If the padding property has three values:"}</b></>)},
                                {code: `padding:10px 5px 15px;`, indent: 0},
                                {list: [
                                    'top padding is 10px', 
                                    'right and left padding are 5px', 
                                    'bottom padding is 15px', 
                                ]},
                                {text: (<><b>{"If the padding property has two values:"}</b></>)},
                                {code: `padding:10px 5px;`, indent: 0},
                                {list: [
                                    'top and bottom padding are 10px', 
                                    'right and left padding are 5px', 
                                ]},
                                {text: (<><b>{"If the padding property has one value:"}</b></>)},
                                {code: `padding:10px;`, indent: 0},
                                {list: [
                                    'all four paddings are 10px', 
                                ]},
                                
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `length`, 
                                                `Specifies the padding in px, pt, cm, etc. Default value is 0. Read about length units`
                                            ],
                                            [
                                                `%`, 
                                                `Specifies the padding in percent of the width of the containing element`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'breakAfter', 
                            title: 'break-after', 
                            cellDir: [
                                {text: `The break-after property specifies whether or not a page break, column break, or region break should occur after the specified element.`},
                                {text: `The break-after property extends the CSS2 page-break-after property.`},
                                {text: `Using break-after, you can tell the browser to break the page, column, or region after the element the break-afterproperty is applied to, or avoid the element to be split and span across two pages.`},
                                {code: `break-after: always;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default. Automatic page/column/region break after the element`
                                            ],
                                            [
                                                `all`, 
                                                `Always insert a page-break right after the principal box`
                                            ],
                                            [
                                                `always`, 
                                                `Always insert a page-break after the element`
                                            ],
                                            [
                                                `avoid`, 
                                                `Avoid a page/column/region break after the element`
                                            ],
                                            [
                                                `avoid-column`, 
                                                `Avoid a column-break after the element`
                                            ],
                                            [
                                                `avoid-page`, 
                                                `Avoid a page-break after the element`
                                            ],
                                            [
                                                `avoid-region`, 
                                                `Avoid a region-break after the element`
                                            ],
                                            [
                                                `column`, 
                                                `Always insert a column-break after the element`
                                            ],
                                            [
                                                `left`, 
                                                `Insert one or two page-breaks after the element so that the next page is formatted as a left page`
                                            ],
                                            [
                                                `page`, 
                                                `Always insert a page-break after the element`
                                            ],
                                            [
                                                `recto`, 
                                                `Insert one or two page-breaks after the principal box so that the next page is formatted as a recto page`
                                            ],
                                            [
                                                `region`, 
                                                `Always insert a region-break after the element`
                                            ],
                                            [
                                                `right`, 
                                                `Insert one or two page-breaks after the element so that the next page is formatted as a right page`
                                            ],
                                            [
                                                `verso`, 
                                                `Insert one or two page-breaks after the principal box so that the next page is formatted as a verso page`
                                            ],
                                            

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'breakBefore', 
                            title: 'break-before', 
                            cellDir: [
                                {text: `The break-before property specifies whether or not a page break, column break, or region break should occur before the specified element.`},
                                {text: `The break-before property extends the CSS2 page-break-before property.`},
                                {text: `Using break-before, you can tell the browser to break the page, column, or region before the element the break-before property is applied to, or avoid the element to be split and span across two pages.`},
                                {code: `break-before: always;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default. Automatic page/column/region break before the element`
                                            ],
                                            [
                                                `all`, 
                                                `Always insert a page-break right before the principal box`
                                            ],
                                            [
                                                `always`, 
                                                `Always insert a page-break before the element`
                                            ],
                                            [
                                                `avoid`, 
                                                `Avoid a page/column/region break before the element`
                                            ],
                                            [
                                                `avoid-column`, 
                                                `Avoid a column-break before the element`
                                            ],
                                            [
                                                `avoid-page`, 
                                                `Avoid a page-break before the element`
                                            ],
                                            [
                                                `avoid-region`, 
                                                `Avoid a region-break before the element`
                                            ],
                                            [
                                                `column`, 
                                                `Always insert a column-break before the element`
                                            ],
                                            [
                                                `left`, 
                                                `Insert one or two page-breaks before the element so that the next page is formatted as a left page`
                                            ],
                                            [
                                                `page`, 
                                                `Always insert a page-break before the element`
                                            ],
                                            [
                                                `recto`, 
                                                `Insert one or two page-breaks before the principal box so that the next page is formatted as a recto page`
                                            ],
                                            [
                                                `region`, 
                                                `Always insert a region-break before the element`
                                            ],
                                            [
                                                `right`, 
                                                `Insert one or two page-breaks before the element so that the next page is formatted as a right page`
                                            ],
                                            [
                                                `verso`, 
                                                `Insert one or two page-breaks before the principal box so that the next page is formatted as a verso page`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'breakInside', 
                            title: 'break-inside', 
                            cellDir: [
                                {text: `The break-inside property specifies whether or not a page break, column break, or region break should occur inside the specified element.`},
                                {text: `The break-inside property extends then CSS2 page-break-inside property.`},
                                {text: `With break-inside, you can tell the browser to avoid breaks inside images, code snippets, tables, and listst.`},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default. Automatic page/column/region break inside the element`
                                            ],
                                            [
                                                `avoid`, 
                                                `Avoid a page/column/region break inside the element`
                                            ],
                                            [
                                                `avoid-column`, 
                                                `Avoid a column-break inside the element`
                                            ],
                                            [
                                                `avoid-page`, 
                                                `Avoid a page-break inside the element`
                                            ],
                                            [
                                                `avoid-region`, 
                                                `Avoid a region-break inside the element`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'pageBreakAfter', 
                            title: 'page-break-after', 
                            cellDir: [
                                {text: `The page-break-after property adds a page-break after a specified element.`},
                                {text: (<><b>Tip:</b>{"The properties: page-break-before, page-break-after and page-break-inside help to define how a document should behave when printed."}</>)},
                                {text: (<><b>Note:</b>{"You cannot use this property on an empty <div> or on absolutely positioned elements."}</>)},
                                {code: `page-break-after: always;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default. Automatic page-break`
                                            ],
                                            [
                                                `always`, 
                                                `Always insert a page-break after the element`
                                            ],
                                            [
                                                `avoid`, 
                                                `Avoid a page-break after the element (if possible)`
                                            ],
                                            [
                                                `left`, 
                                                `Insert page-break after the element so that the next page is formatted as a left page`
                                            ],
                                            [
                                                `right`, 
                                                `Insert page-break after the element so that the next page is formatted as a right page`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'pageBreakBefore', 
                            title: 'page-break-before', 
                            cellDir: [
                                {text: `The page-break-before property adds a page-break before a specified element..`},
                                {text: (<><b>Tip: </b>{"The properties: page-break-before, page-break-after and page-break-inside help to define how a document should behave when printed."}</>)},
                                {text: (<><b>Note: </b>{"You cannot use this property on an empty <div> or on absolutely positioned elements."}</>)},
                                {text: (<><b>Note: </b>{'None of the browsers support "avoid".'}</>)},
                                {text: (<><b>Note: </b>{'Browsers may interpret "left" and "right" as "always". '}</>)},
                                {code: `page-break-before: always;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default. Automatic page-breaks`
                                            ],
                                            [
                                                `always`, 
                                                `Always insert a page-break before the element`
                                            ],
                                            [
                                                `avoid`, 
                                                `Avoid page-break before the element (if possible)`
                                            ],
                                            [
                                                `left`, 
                                                `Insert page-break before the element so that the next page is formatted as a left page`
                                            ],
                                            [
                                                `right`, 
                                                `Insert page-break before the element so that the next page is formatted as a right page`
                                            ],


                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'pageBreakInside', 
                            title: 'page-break-inside', 
                            cellDir: [
                                {text: `The page-break-inside property sets whether a page-break should be avoided inside a specified element.`},
                                {text: (<><b>Tip: </b>{"The properties: page-break-before, page-break-after and page-break-inside help to define how a document should behave when printed."}</>)},
                                {text: (<><b>Note: </b>{"You cannot use this property on absolutely positioned elements."}</>)},
                                {code: `page-break-inside: avoid;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default. Automatic page-breaks`
                                            ],
                                            [
                                                `avoid`, 
                                                `Avoid page-break inside the element (if possible)`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'widows', 
                            title: 'widows', 
                            cellDir: [
                                {text: `The widows property specifies the minimum number of lines that must be left at the top of a page or column.`},
                                {code: `widows: 2;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `integer`, 
                                                `Specifies the minimum number of lines that must be left at the top of a page or column. Negative values are not allowed`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'orphans', 
                            title: 'orphans', 
                            cellDir: [
                                {text: `The orphans property specifies the minimum number of lines that must be left at the bottom of a page or column.`},
                                {code: `orphans: 4;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `integer`, 
                                                `Specifies the minimum number of lines that must be left at the bottom of a page or column. Negative values are not allowed`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'sizing',
                    title: 'Sizing',                                      
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'flex', 
                            title: 'flex', 
                            cellDir: [
                                {text: `The flex property is a shorthand property for:`},
                                {list: [
                                    '•	flex-grow', 
                                    '•	flex-shrink', 
                                    '•	flex-basis', 
                                ]},
                                {text: `The flex property sets the flexible length on flexible items.`},
                                {text: (<><b>Note: </b>{"If the element is not a flexible item, the flex property has no effect."}</>)},
                                {code: `flex: 1 8 2;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Same as 1 1 auto.`
                                            ],
                                            [
                                                `initial`, 
                                                `Same as 0 1 auto. `
                                            ],
                                            [
                                                `none`, 
                                                `Same as 0 0 auto.`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'flexGrow', 
                            title: 'flex-grow', 
                            cellDir: [
                                {text: `The flex-grow property specifies how much the item will grow relative to the rest of the flexible items inside the same container.`},
                                {text: (<><b>Note: </b>{"If the element is not a flexible item, the flex-grow property has no effect."}</>)},
                                {code: `flex-grow: 1;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `number`, 
                                                `A number specifying how much the item will grow relative to the rest of the flexible items. Default value is 0`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'flexShrink', 
                            title: 'flex-shrink', 
                            cellDir: [
                                {text: `The flex-shrink property specifies how the item will shrink relative to the rest of the flexible items inside the same container.`},
                                {code: `flex-shrink: 3;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `number`, 
                                                `A number specifying how much the item will shrink relative to the rest of the flexible items. Default value is 1`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'flexBasis', 
                            title: 'flex-basis', 
                            cellDir: [
                                {text: `The flex-basis property specifies the initial length of a flexible item.`},
                                {text: (<><b>Note: </b>{"If the element is not a flexible item, the flex-basis property has no effect."}</>)},
                                {code: `flex-basis: 100px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `number`, 
                                                `A length unit, or percentage, specifying the initial length of the flexible item(s)`
                                            ],
                                            [
                                                `auto`, 
                                                `Default value. The length is equal to the length of the flexible item. If the item has no length specified, the length will be according to its content`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'flexFlow', 
                            title: 'flex-flow', 
                            cellDir: [
                                {text: `The flex-flow property is a shorthand property for:`},
                                {list: [
                                    'flex-direction', 
                                    'flex-wrap', 
                                ]},
                                {text: (<><b>Note: </b>{"If the elements are not flexible items, the flex-flow property has no effect."}</>)},
                                {code: `flex-flow: row-reverse wrap;`, indent: 0},
                            ]
                        },
                        {
                            id: 'flexDirection', 
                            title: 'flex-direction', 
                            cellDir: [
                                {text: `The flex-direction property specifies the direction of the flexible items.`},
                                {text: (<><b>Note: </b>{"If the element is not a flexible item, the flex-direction property has no effect."}</>)},
                                {code: `flex-direction: row-reverse;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `row`, 
                                                `Default value. The flexible items are displayed horizontally, as a row`
                                            ],
                                            [
                                                `row-reverse`, 
                                                `Same as row, but in reverse order`
                                            ],
                                            [
                                                `column`, 
                                                `The flexible items are displayed vertically, as a column`
                                            ],
                                            [
                                                `column-reverse`, 
                                                `Same as column, but in reverse order`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'flexWrap', 
                            title: 'flex-wrap', 
                            cellDir: [
                                {text: `The flex-wrap property specifies whether the flexible items should wrap or not.`},
                                {text: (<><b>Note: </b>{"If the elements are not flexible items, the flex-wrap property has no effect."}</>)},
                                {code: `flex-wrap: wrap`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `nowrap`, 
                                                `Default value. Specifies that the flexible items will not wrap`
                                            ],
                                            [
                                                `wrap`, 
                                                `Specifies that the flexible items will wrap if necessary`
                                            ],
                                            [
                                                `wrap-reverse`, 
                                                `Specifies that the flexible items will wrap, if necessary, in reverse order`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'height', 
                            title: 'height', 
                            cellDir: [
                                {text: `The height property sets the height of an element.`},
                                {text: `The height of an element does not include padding, borders, or margins!`},
                                {text: `If height: auto; the element will automatically adjust its height to allow its content to be displayed correctly.`},
                                {text: `If height is set to a numeric value (like pixels, (r)em, percentages) then if the content does not fit within the specified height, it will overflow. How the container will handle the overflowing content is defined by the overflow property.`},
                                {text: (<><b>Note: </b>{"The min-height and max-height properties override the height property."}</>)},
                                {code: `height: 50px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `The browser calculates the height. This is default`
                                            ],
                                            [
                                                `length`, 
                                                `Defines the height in px, cm, etc.`
                                            ],
                                            [
                                                `%`, 
                                                `Defines the height in percent of the containing block`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'width', 
                            title: 'width', 
                            cellDir: [
                                {text: `The width property sets the width of an element.`},
                                {text: `The width of an element does not include padding, borders, or margins!`},
                                {text: (<><b>Note: </b>{"The min-width and max-width properties override the width property."}</>)},
                                {code: `width: 150px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `The browser calculates the height. This is default`
                                            ],
                                            [
                                                `length`, 
                                                `Defines the height in px, cm, etc.`
                                            ],
                                            [
                                                `%`, 
                                                `Defines the height in percent of the containing block`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'maxHeight', 
                            title: 'max-height', 
                            cellDir: [
                                {text: `The max-height property defines the maximum height of an element.`},
                                {text: `If the content is larger than the maximum height, it will overflow. How the container will handle the overflowing content is defined by the overflow property.`},
                                {text: `If the content is smaller than the maximum height, the max-height property has no effect. `},
                                {text: (<><b>Note: </b>{"This prevents the value of the height property from becoming larger than max-height. The value of the max-height property overrides the height property."}</>)},
                                {code: `max-height: 50px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `No maximum height. This is default`
                                            ],
                                            [
                                                `length`, 
                                                `Defines the maximum height in px, cm, etc.`
                                            ],
                                            [
                                                `%`, 
                                                `Defines the maximum height in percent of the containing block`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'maxWidth', 
                            title: 'max-width', 
                            cellDir: [
                                {text: `The max-width property defines the maximum width of an element.`},
                                {text: `If the content is larger than the maximum width, it will automatically change the height of the element.`},
                                {text: `If the content is smaller than the maximum width, the max-width property has no effect.`},
                                {text: (<><b>Note: </b>{"This prevents the value of the width property from becoming larger than max-width. The value of the max-widthproperty overrides the width property."}</>)},
                                {code: `max-width: 150px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `No maximum width. This is default`
                                            ],
                                            [
                                                `length`, 
                                                `Defines the maximum width in px, cm, etc.`
                                            ],
                                            [
                                                `%`, 
                                                `Defines the maximum width in percent of the containing block`
                                            ],
                                            
                                        ]
                                    }
                                }
                            ]
                        },
                        {
                            id: 'minHeight', 
                            title: 'min-height', 
                            cellDir: [
                                {text: `The min-height property defines the minimum height of an element.`},
                                {text: `If the content is smaller than the minimum height, the minimum height will be applied. `},
                                {text: `If the content is larger than the minimum height, the min-height property has no effect.`},
                                {text: (<><b>Note: </b>{"This prevents the value of the height property from becoming smaller than min-height."}</>)},
                                {code: `min-height: 200px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `length`, 
                                                `Default value is 0. Defines the minimum height in px, cm, etc. Read about length units`
                                            ],
                                            [
                                                `%`, 
                                                `Defines the minimum height in percent of the containing block`
                                            ],

                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'minWidth', 
                            title: 'min-width', 
                            cellDir: [
                                {text: `The min-width property defines the minimum width of an element.`},
                                {text: `If the content is smaller than the minimum width, the minimum width will be applied. `},
                                {text: `If the content is larger than the minimum width, the min-width property has no effect.`},
                                {text: (<><b>Note: </b>{"This prevents the value of the width property from becoming smaller than min-width."}</>)},
                                {code: `min-width: 500px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `length`, 
                                                `Default value is 0. Defines the minimum width in px, cm, etc. Read about length units`
                                            ],
                                            [
                                                `%`, 
                                                `Defines the minimum width in percent of the containing block`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'boxSizing', 
                            title: 'box-sizing', 
                            cellDir: [
                                {text: `The box-sizing property defines how the width and height of an element are calculated: should they include padding and borders, or not.`},
                                {code: `box-sizing: border-box;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `content-box`, 
                                                `Default. The width and height properties (and min/max properties) includes only the content. Border and padding are not included`
                                            ],
                                            [
                                                `border-box`, 
                                                `The width and height properties (and min/max properties) includes content, padding and border`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'objectFit', 
                            title: 'object-fit', 
                            cellDir: [
                                {text: `The object-fit property is used to specify how an <img> or <video> should be resized to fit its container.`},
                                {text: `This property tells the content to fill the container in a variety of ways; such as "preserve that aspect ratio" or "stretch up and take up as much space as possible".`},
                                {code: `object-fit: cover;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `fill`, 
                                                `This is default. The replaced content is sized to fill the element's content box. If necessary, the object will be stretched or squished to fit`
                                            ],
                                            [
                                                `contain`, 
                                                `The replaced content is scaled to maintain its aspect ratio while fitting within the element's content box`
                                            ],
                                            [
                                                `cover`, 
                                                `The replaced content is sized to maintain its aspect ratio while filling the element's entire content box. The object will be clipped to fit`
                                            ],
                                            [
                                                `none`, 
                                                `The replaced content is not resized`
                                            ],
                                            [
                                                `scale-down`, 
                                                `The content is sized as if none or contain were specified (would result in a smaller concrete object size)`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'resize', 
                            title: 'resize', 
                            cellDir: [
                                {text: `The resize property defines if (and how) an element is resizable by the user.`},
                                {text: (<><b>Note: </b>{'The resize property does not apply to inline elements or to block elements where overflow="visible". So, make sure that overflow is set to "scroll", "auto", or "hidden".'}</>)},
                                {code: `resize: both;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Default value. The user cannot resize the element`
                                            ],
                                            [
                                                `both`, 
                                                `The user can resize both the height and width of the element`
                                            ],
                                            [
                                                `horizontal`, 
                                                `The user can resize the width of the element`
                                            ],
                                            [
                                                `vertical`, 
                                                `The user can resize the height of the element
                                                `
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'columnsGridsTables',
                    title: 'Columns, Grids & Tables',
                    titleDir: [],
                    RowDir: [                                                 
                        {
                            id: 'columns', 
                            title: 'columns', 
                            cellDir: [
                                {text: `The columns property is a shorthand property for:`},
                                {list: [
                                    'column-width', 
                                    'column-count', 
                                ]},
                                {code: `columns: 100px 3;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `column-width`, 
                                                `Defines the minimum width for each column`
                                            ],
                                            [
                                                `column-count`, 
                                                `Defines the maximum number of columns`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'columnWidth', 
                            title: 'column-width', 
                            cellDir: [
                                {text: `The column-width property specifies the column width.`},
                                {text: `The number of columns will be the minimum number of columns needed to show all the content across the element.`},
                                {text: `column-width is a flexible property. Think of column-width as a minimum width suggestion for the browser. Once the browser cannot fit at least two columns at your specified width then the columns will stop and drop into a single column.`},
                                {code: `column-width: 100px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default value. The column width will be determined by the browser `
                                            ],
                                            [
                                                `length`, 
                                                `A length that specifies the width of the columns. The number of columns will be the minimum number of columns needed to show all the content across the element. Read about length units`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'columnCount', 
                            title: 'column-count', 
                            cellDir: [
                                {text: `The column-count property specifies the number of columns an element should be divided into.`},
                                {code: `column-count: 3;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `number`, 
                                                `The optimal number of columns into which the content of the element will be flowed`
                                            ],
                                            [
                                                `auto`, 
                                                `Default value. The number of columns will be determined by other properties, like e.g. "column-width"`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'columnRule', 
                            title: 'column-rule', 
                            cellDir: [
                                {text: `The column-rule property sets the width, style, and color of the rule between columns.`},
                                {text: `This property is a shorthand property for:`},
                                {list: [
                                    'column-rule-width', 
                                    'column-rule-style (required)', 
                                    'column-rule-color', 
                                ]},
                                {text: `If column-rule-color is omitted, the color applied will be the color of the text.`},
                                {code: `column-rule: 4px double #ff00ff;`, indent: 0},
                            ]
                        },
                        {
                            id: 'columnRuleWidth', 
                            title: 'column-rule-width', 
                            cellDir: [
                                {text: `The column-rule-width property specifies the width of the rule between columns.`},
                                {code: `column-rule-width: 10px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `medium`, 
                                                `Default value. Defines a medium rule`
                                            ],
                                            [
                                                `thin`, 
                                                `Defines a thin rule`
                                            ],
                                            [
                                                `thick`, 
                                                `Defines a thick rule`
                                            ],
                                            [
                                                `length`, 
                                                `Specifies the width of the rule`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'columnRuleStyle', 
                            title: 'column-rule-style', 
                            cellDir: [
                                {text: `The column-rule-style property specifies the style of the rule between columns.`},
                                {code: `column-rule-style: dotted;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Default value. Defines no rule`
                                            ],
                                            [
                                                `hidden`, 
                                                `Defines a hidden rule`
                                            ],
                                            [
                                                `dotted`, 
                                                `Defines a dotted rule`
                                            ],
                                            [
                                                `dashed`, 
                                                `Defines a dashed rule`
                                            ],
                                            [
                                                `solid`, 
                                                `Defines a solid rule`
                                            ],
                                            [
                                                `double`, 
                                                `Defines a double rule`
                                            ],
                                            [
                                                `groove`, 
                                                `Specifies a 3D grooved rule. The effect depends on the width and color values`
                                            ],
                                            [
                                                `ridge`, 
                                                `Specifies a 3D ridged rule. The effect depends on the width and color values`
                                            ],
                                            [
                                                `inset`, 
                                                `Specifies a 3D inset rule. The effect depends on the width and color values`
                                            ],
                                            [
                                                `outset`, 
                                                `Specifies a 3D outset rule. The effect depends on the width and color values`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'columnRuleColor', 
                            title: 'column-rule-color', 
                            cellDir: [
                                {text: `The column-rule-color property specifies the color of the rule between columns.`},
                                {code: `column-rule-color: #ff0000;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `color`, 
                                                `Specifies the color of the rule. Look at CSS Color Values for a complete list of possible color values`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'columnFill', 
                            title: 'column-fill', 
                            cellDir: [
                                {text: `The column-fill property specifies how to fill columns, balanced or not.`},
                                {text: (<><b>Tip: </b>{"If you add a height to a multi-column element, you can control how the content fills the columns. The content can be balanced or filled sequentially."}</>)},
                                {code: `column-fill: balance;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `balance`, 
                                                `Default value. Fills each column with about the same amount of content, but will not allow the columns to be taller than the height (so, columns might be shorter than the height as the browser distributes the content evenly horizontally)`
                                            ],
                                            [
                                                `auto`, 
                                                `Fills each column until it reaches the height, and do this until it runs out of content (so, this value will not necessarily fill all the columns nor fill them evenly)`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'columnGap', 
                            title: 'column-gap', 
                            cellDir: [
                                {text: `The column-gap property specifies the gap between the columns.`},
                                {text: (<><b>Note: </b>{"If there is a column-rule between columns, it will appear in the middle of the gap."}</>)},
                                {code: `column-gap: 40px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `length`, 
                                                `A specified length that will set the gap between the columns`
                                            ],
                                            [
                                                `normal`, 
                                                `Default value. Specifies a normal gap between the columns. W3C suggests a value of 1em`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'columnSpan', 
                            title: 'column-span', 
                            cellDir: [
                                {text: `The column-span property specifies how many columns an element should span across.`},
                                {code: `column-span: all;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Default value. The element should span across one column`
                                            ],
                                            [
                                                `all`, 
                                                `The element should span across all columns`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'tableLayout', 
                            title: 'table-layout', 
                            cellDir: [
                                {text: `The table-layout property defines the algorithm used to lay out table cells, rows, and columns.`},
                                {text: (<><b>Tip: </b>{"The main benefit of table-layout: fixed; is that the table renders much faster. On large tables, users will not see any part of the table until the browser has rendered the whole table. So, if you use table-layout: fixed, users will see the top of the table while the browser loads and renders rest of the table. This gives the impression that the page loads a lot quicker!"}</>)},
                                {code: `table-layout: fixed;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Browsers use an automatic table layout algorithm. The column width is set by the widest unbreakable content in the cells. The content will dictate the layout `
                                            ],
                                            [
                                                `fixed`, 
                                                `Sets a fixed table layout algorithm. The table and column widths are set by the widths of table and col or by the width of the first row of cells. Cells in other rows do not affect column widths. If no widths are present on the first row, the column widths are divided equally across the table, regardless of content inside the cells`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'grid', 
                            title: 'grid', 
                            cellDir: [
                                {text: `The grid property is a shorthand property for:`},
                                {list: [
                                    'grid-template-rows', 
                                    'grid-template-columns', 
                                    'grid-template-areas', 
                                    'grid-auto-rows', 
                                    'grid-auto-columns', 
                                    'grid-auto-flow'
                                ]},
                                {code: `grid: 150px / auto auto auto;`, indent: 0},
                            ]
                        },
                        {
                            id: 'gridTemplate', 
                            title: 'grid-template', 
                            cellDir: [
                                {text: `The grid-template property is a shorthand property for the following properties:`},
                                {list: [
                                    'grid-template-rows', 
                                    'grid-template-columns', 
                                    'grid-template-areas', 
                                ]},
                                {code: `grid-template: 150px / auto auto auto;`, indent: 0},
                            ]
                        },
                        {
                            id: 'gridTemplateRows', 
                            title: 'grid-template-rows', 
                            cellDir: [
                                {text: `The grid-template-rows property specifies the number (and the heights) of the rows in a grid layout.`},
                                {text: `The values are a space-separated list, where each value specifies the height of the respective row.`},
                                {code: `grid-template-rows: 100px 300px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `No size is set. Rows are created if needed`
                                            ],
                                            [
                                                `auto`, 
                                                `The size of the rows is determined by the size of the container, and on the size of the content of the items in the row`
                                            ],
                                            [
                                                `max-content`, 
                                                `Sets the size of each row to depend on the largest item in the row`
                                            ],
                                            [
                                                `min-content`, 
                                                `Sets the size of each row to depend on the smallest item in the row`
                                            ],
                                            [
                                                `length`, 
                                                `Sets the size of the rows, by using a legal length value. Read about length units`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: '', 
                            title: 'grid-template-columns', 
                            cellDir: [
                                {text: `The grid-template-columns property specifies the number (and the widths) of columns in a grid layout.`},
                                {text: `The values are a space separated list, where each value specifies the size of the respective column.`},
                                {code: `grid-template-columns: auto auto auto auto;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Default value. Columns are created if needed`
                                            ],
                                            [
                                                `auto`, 
                                                `The size of the columns is determined by the size of the container and on the size of the content of the items in the column`
                                            ],
                                            [
                                                `max-content`, 
                                                `Sets the size of each column to depend on the largest item in the column`
                                            ],
                                            [
                                                `min-content`, 
                                                `Sets the size of each column to depend on the smallest item in the column`
                                            ],
                                            [
                                                `length`, 
                                                `Sets the size of the columns, by using a legal length value. Read about length units`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'gridTemplateAreas', 
                            title: 'grid-template-areas', 
                            cellDir: [
                                {text: `The grid-template-areas property specifies areas within the grid layout.`},
                                {text: `You can name grid items by using the grid-area property, and then reference to the name in the grid-template-areasproperty.`},
                                {text: `Each area is defined by apostrophes. Use a period sign to refer to a grid item with no name.`},
                                {code: `grid-template-areas: "myArea myArea . . .";`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Default value. No named grid areas`
                                            ],
                                            [
                                                `itemnames`, 
                                                `A sequence that specifies how each columns and row should display`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'gridAutoRows', 
                            title: 'grid-auto-rows', 
                            cellDir: [
                                {text: `The grid-auto-rows property sets a size for the rows in a grid container.`},
                                {text: `This property affects only rows with the size not set.`},
                                {code: `grid-auto-rows: 150px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default value. The size of the rows is determined by the size of the largest item in the row`
                                            ],
                                            [
                                                `max-content`, 
                                                `Sets the size of each row to depend on the largest item in the row`
                                            ],
                                            [
                                                `min-content`, 
                                                `Sets the size of each row to depend on the largest item in the row`
                                            ],
                                            [
                                                `length`, 
                                                `Sets the size of the rows, by using a legal length value. Read about length units`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'gridAutoColumns', 
                            title: 'grid-auto-columns', 
                            cellDir: [
                                {text: `The grid-auto-columns property sets a size for the columns in a grid container.`},
                                {text: `This property affects only columns with the size not set.`},
                                {code: `grid-auto-columns: 50px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default value. The size of the columns is determined by the size of the container`
                                            ],
                                            [
                                                `fit-content()`, 
                                                ``
                                            ],
                                            [
                                                `max-content`, 
                                                `Sets the size of each column depending on the largest item in the column`
                                            ],
                                            [
                                                `min-content`, 
                                                `Sets the size of each column depending on the smallest item in the column`
                                            ],
                                            [
                                                `minmax(min.max)`, 
                                                `Sets a size range greater than or equal to min and less than or equal to max`
                                            ],
                                            [
                                                `length`, 
                                                `Sets the size of the columns, by using a legal length value. Read about length units`
                                            ],
                                            [
                                                `%`, 
                                                `Sets the size of the columns, by using a percent value`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'gridAutoFlow', 
                            title: 'grid-auto-flow', 
                            cellDir: [
                                {text: `The grid-auto-flow property controls how auto-placed items get inserted in the grid.`},
                                {code: `grid-auto-flow: column;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `row`, 
                                                `Default value. Places items by filling each row`
                                            ],
                                            [
                                                `column`, 
                                                `Places items by filling each column`
                                            ],
                                            [
                                                `dense`, 
                                                `Place items to fill any holes in the grid`
                                            ],
                                            [
                                                `row dense`, 
                                                `Places items by filling each row, and fill any holes in the grid`
                                            ],
                                            [
                                                `column dense`, 
                                                `Places items by filling each column, and fill any holes in the grid`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'gridArea', 
                            title: 'grid-area', 
                            cellDir: [
                                {text: `The grid-area property specifies a grid item's size and location in a grid layout, and is a shorthand property for the following properties:`},
                                {list: [
                                    'grid-row-start', 
                                    'grid-column-start', 
                                    'grid-row-end', 
                                    'grid-column-end', 
                                ]},
                                {text: `The grid-area property can also be used to assign a name to a grid item. Named grid items can then be referenced to by the grid-template-areas property of the grid container. See examples below.`},
                                {code: `grid-area: 2 / 1 / span 2 / span 3;`, indent: 0},
                                {code: `grid-area: myArea;`, indent: 0},
                            ]
                        },
                        {
                            id: 'gridRow', 
                            title: 'grid-row', 
                            cellDir: [
                                {text: `The grid-row property specifies a grid item's size and location in a grid layout, and is a shorthand property for the following properties:`},
                                {list: [
                                    'grid-row-start', 
                                    'grid-row-end', 
                                ]},
                                {code: `grid-row: 1 / span 2;`, indent: 0},
                            ]
                        },
                        {
                            id: 'gridRowStart', 
                            title: 'grid-row-start', 
                            cellDir: [
                                {text: `The grid-row-start property defines on which row-line the item will start.`},
                                {code: `grid-row-start: 2;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default value. The item will be placed by following the flow.`
                                            ],
                                            [
                                                `row-line`, 
                                                `Specifies on which row to start the display of the item.`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'gridRowEnd', 
                            title: 'grid-row-end', 
                            cellDir: [
                                {text: `The grid-row-end property defines how many rows an item will span, or on which row-line the item will end (see example at the end of this page).`},
                                {code: `grid-row-end: span 3;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default value. The item will span one row.`
                                            ],
                                            [
                                                `span n`, 
                                                `Specifies the number of rows the item will span.`
                                            ],
                                            [
                                                `row-line`, 
                                                `Specifies on which row to end the display of the item.`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'gridColumn', 
                            title: 'grid-column', 
                            cellDir: [
                                {text: `The grid-column property specifies a grid item's size and location in a grid layout, and is a shorthand property for the following properties:`},
                                {list: [
                                    'grid-column-start', 
                                    'grid-column-end',
                                ]},
                                {code: `grid-column: 1 / span 2;`, indent: 0},
                            ]
                        },
                        {
                            id: 'gridColumnStart', 
                            title: 'grid-column-start', 
                            cellDir: [
                                {text: `The grid-column-start property defines on which column-line the item will start.`},
                                {code: `grid-column-start: 2;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default value. The item will be placed following the flow`
                                            ],
                                            [
                                                `span n`, 
                                                `Specifies the number of columns the item will span`
                                            ],
                                            [
                                                `column-line`, 
                                                `Specifies on which column to start the display of the item`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'gridColumnEnd', 
                            title: 'grid-column-end', 
                            cellDir: [
                                {text: `The grid-column-end property defines how many columns an item will span, or on which column-line the item will end (see example at the end of this page).`},
                                {code: `grid-column-end: span 3;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default value. The item will span one column`
                                            ],
                                            [
                                                `span n`, 
                                                `Specifies the number of columns the item will span`
                                            ],
                                            [
                                                `column-line`, 
                                                `Specifies on which column to end the display of the item`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'gridGap', 
                            title: 'grid-gap', 
                            cellDir: [
                                {text: `The grid-gap property defines the size of the gap between the rows and columns in a grid layout, and is a shorthand property for the following properties:`},
                                {list: [
                                    'grid-row-gap', 
                                    'grid-column-gap', 
                                ]},
                                {text: (<><b>Note: </b>{"This property was renamed to gap in CSS3."}</>)},
                                {code: `grid-gap: 50px;`, indent: 0},
                            ]
                        },
                        {
                            id: 'gridRowGap', 
                            title: 'grid-row-gap', 
                            cellDir: [
                                {text: `The grid-row-gap property defines the size of the gap between the rows in a grid layout.`},
                                {text: (<><b>Note: </b>{"This property was renamed to row-gap in CSS3."}</>)},
                                {code: `grid-row-gap: 50px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `length`, 
                                                `Any legal length value, like px or %. 0 is the default value`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'gridColumnGap', 
                            title: 'grid-column-gap', 
                            cellDir: [
                                {text: `The grid-column-gap property defines the size of the gap between the columns in a grid layout.`},
                                {text: (<><b>Note: </b>{"This property was renamed to column-gap in CSS3. "}</>)},
                                {code: `grid-column-gap: 50px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `length`, 
                                                `Any legal length value, like px or %. 0 is the default value`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'emptyCells', 
                            title: 'empty-cells', 
                            cellDir: [
                                {text: `The empty-cells property sets whether or not to display borders on empty cells in a table.`},
                                {text: (<><b>Note: </b>{'This property has no effect if border-collapse is "collapse".'}</>)},
                                {code: `empty-cells: hide;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `show`, 
                                                `Display borders on empty cells. This is default`
                                            ],
                                            [
                                                `hide`, 
                                                `Hide borders on empty cells`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'borderCollapse', 
                            title: 'border-collapse', 
                            cellDir: [
                                {text: `The border-collapse property sets whether table borders should collapse into a single border or be separated as in standard HTML.`},
                                {code: `border-collapse: collapse;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `separate`, 
                                                `Borders are separated; each cell will display its own borders. This is default.`
                                            ],
                                            [
                                                `collapse`, 
                                                `Borders are collapsed into a single border when possible (border-spacing and empty-cells properties have no effect)`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'borderSpacing', 
                            title: 'border-spacing', 
                            cellDir: [
                                {text: `The border-spacing property sets the distance between the borders of adjacent cells.`},
                                {text: (<><b>Note:</b>{"Note: This property works only when border-collapse is separate."}</>)},
                                {code: `border-spacing: 15px 50px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `length length`, 
                                                (<>
                                                Specifies the distance between the borders of adjacent cells in px, cm, etc. Negative values are not allowed.<br/>
                                                If one value is specified, it defines both the horizontal and vertical spacing between cells<br/>
                                                If two values are specified, the first sets the horizontal spacing and the second sets the vertical spacing
                                                </>)
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'captionSide', 
                            title: 'caption-side', 
                            cellDir: [
                                {text: `The caption-side property specifies the placement of a table caption.`},
                                {code: `caption-side: top;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `top`, 
                                                `Puts the caption above the table. This is default`
                                            ],
                                            [
                                                `bottom`, 
                                                `Puts the caption below the table`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'backgroundBorders',
                    title: 'Background & Borders',
                    titleDir: [],
                    RowDir: [                              
                        {
                            id: 'background', 
                            title: 'background', 
                            cellDir: [
                                {text: `The background property is a shorthand property for:`},
                                {list: [
                                    'background-color', 
                                    'background-image', 
                                    'background-position', 
                                    'background-size', 
                                    'background-repeat',  
                                    'background-origin', 
                                    'background-clip', 
                                    'background-attachment'
                                ]},
                                {text: `It does not matter if one of the values above are missing, e.g. background:#ff0000 url(smiley.gif); is allowed.`},
                                {code: `background: lightblue url("img_tree.gif") no-repeat fixed center;`, indent: 0},
                            ]
                        },
                        {
                            id: 'backgroundColor', 
                            title: 'background-color', 
                            cellDir: [
                                {text: `The background-color property sets the background color of an element.`},
                                {text: `The background of an element is the total size of the element, including padding and border (but not the margin).`},
                                {text: (<><b>Tip: </b>{"Use a background color and a text color that makes the text easy to read."}</>)},
                                {code: `background-color: coral;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `color`, 
                                                `Specifies the background color. Look at CSS Color Values for a complete list of possible color values.`
                                            ],
                                            [
                                                `transparent`, 
                                                `Specifies that the background color should be transparent. This is default`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'backgroundImage', 
                            title: 'background-image', 
                            cellDir: [
                                {text: `The background-image property sets one or more background images for an element.`},
                                {text: `By default, a background-image is placed at the top-left corner of an element, and repeated both vertically and horizontally.`},
                                {text: (<><b>Tip: </b>{"The background of an element is the total size of the element, including padding and border (but not the margin)."}</>)},
                                {text: (<><b>Tip: </b>{"Always set a background-color to be used if the image is unavailable."}</>)},
                                {code: `background-image: url("paper.gif");`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `url('URL')`, 
                                                `The URL to the image. To specify more than one image, separate the URLs with a comma`
                                            ],
                                            [
                                                `none`, 
                                                `No background image will be displayed. This is default`
                                            ],
                                            [
                                                `conic-gradient()`, 
                                                `Sets a conic gradient as the background image. Define at least two colors`
                                            ],
                                            [
                                                `linear-gradient()`, 
                                                `Sets a linear gradient as the background image. Define at least two colors (top to bottom)`
                                            ],
                                            [
                                                `radial-gradient()`, 
                                                `Sets a radial gradient as the background image. Define at least two colors (center to edges)`
                                            ],
                                            [
                                                `repeating-conic-gradient()`, 
                                                `Repeats a conic gradient`
                                            ],
                                            [
                                                `repeating-linear-gradient()`, 
                                                `Repeats a linear gradient`
                                            ],
                                            [
                                                `repeating-radial-gradient()`, 
                                                `Repeats a radial gradient`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'backgroundPosition', 
                            title: 'background-position', 
                            cellDir: [
                                {text: `The background-position property sets the starting position of a background image.`},
                                {text: (<><b>Tip: </b>{"By default, a background-image is placed at the top-left corner of an element, and repeated both vertically and horizontally."}</>)},
                                {code: `background-position: center; `, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                'left top', 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                'left center', 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                'left bottom', 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                'right top',
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                'right center', 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                'right bottom', 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                'center top', 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                'center center', 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                'center bottom', 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                `x% y%`, 
                                                `The first value is the horizontal position and the second value is the vertical. The top left corner is 0% 0%. The right bottom corner is 100% 100%. If you only specify one value, the other value will be 50%. Default value is: 0% 0%`
                                            ],
                                            [
                                                `xpos ypos`, 
                                                `The first value is the horizontal position and the second value is the vertical. The top left corner is 0 0. Units can be pixels (0px 0px) or any other CSS units. If you only specify one value, the other value will be 50%. You can mix % and positions`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'backgroundSize', 
                            title: 'background-size', 
                            cellDir: [
                                {text: `The background-size property specifies the size of the background images.`},
                                {text: `There are four different syntaxes you can use with this property: `},
                                {list: [
                                    'Keyword syntax ("auto", "cover" and "contain"), ', 
                                    'One-value syntax (sets the width of the image (height becomes "auto"), ', 
                                    'The two-value syntax (first value: width of the image, second value: height), ', 
                                    'The multiple background syntax (separated with comma).', 
                                ]},
                                {code: `background-size: 300px 100px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default value. The background image is displayed in its original size`
                                            ],
                                            [
                                                `length`, 
                                                `Sets the width and height of the background image. The first value sets the width, the second value sets the height. If only one value is given, the second is set to "auto". Read about length units`
                                            ],
                                            [
                                                `percentage`, 
                                                `Sets the width and height of the background image in percent of the parent element. The first value sets the width, the second value sets the height. If only one value is given, the second is set to "auto"`
                                            ],
                                            [
                                                `cover`, 
                                                `Resize the background image to cover the entire container, even if it has to stretch the image or cut a little bit off one of the edges`
                                            ],
                                            [
                                                `contain`, 
                                                `Resize the background image to make sure the image is fully visible`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'backgroundRepeat', 
                            title: 'background-repeat', 
                            cellDir: [
                                {text: `The background-repeat property sets if/how a background image will be repeated.`},
                                {text: `By default, a background-image is repeated both vertically and horizontally.`},
                                {code: `background-repeat: repeat-y;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `repeat`, 
                                                `The background image is repeated both vertically and horizontally.  The last image will be clipped if it does not fit. This is default`
                                            ],
                                            [
                                                `repeat-x`, 
                                                `The background image is repeated only horizontally`
                                            ],
                                            [
                                                `repeat-y`, 
                                                `The background image is repeated only vertically`
                                            ],
                                            [
                                                `no-repeat`, 
                                                `The background-image is not repeated. The image will only be shown once`
                                            ],
                                            [
                                                `space`, 
                                                `The background-image is repeated as much as possible without clipping. The first and last image is pinned to either side of the element, and whitespace is distributed evenly between the images`
                                            ],
                                            [
                                                `round`, 
                                                `The background-image is repeated and squished or stretched to fill the space (no gaps)`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'backgroundOrigin', 
                            title: 'background-origin', 
                            cellDir: [
                                {text: `The background-origin property specifies the origin position (the background positioning area) of a background image.`},
                                {text: (<><b>Note: </b>{'This property has no effect if background-attachment is "fixed".'}</>)},
                                {code: `background-origin: content-box;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `padding-box`, 
                                                `Default value. The background image starts from the upper left corner of the padding edge`
                                            ],
                                            [
                                                `border-box`, 
                                                `The background image starts from the upper left corner of the border`
                                            ],
                                            [
                                                `content-box`, 
                                                `The background image starts from the upper left corner of the content`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'backgroundClip', 
                            title: 'background-clip', 
                            cellDir: [
                                {text: `The background-clip property defines how far the background (color or image) should extend within an element.`},
                                {code: `background-clip: padding-box;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `border-box`, 
                                                `Default value. The background extends behind the border`
                                            ],
                                            [
                                                `padding-box`, 
                                                `The background extends to the inside edge of the border`
                                            ],
                                            [
                                                `content-box`, 
                                                `The background extends to the edge of the content box`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'backgroundAttachment', 
                            title: 'background-attachment', 
                            cellDir: [
                                {text: `The background-attachment property sets whether a background image scrolls with the rest of the page, or is fixed.`},
                                {code: `background-attachment: fixed;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `scroll`, 
                                                `The background image will scroll with the page. This is default`
                                            ],
                                            [
                                                `fixed`, 
                                                `The background image will not scroll with the page`
                                            ],
                                            [
                                                `local`, 
                                                `The background image will scroll with the element's contents`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'backgroundBlendMode', 
                            title: 'background-blend-mode', 
                            cellDir: [
                                {text: `The background-blend-mode property defines the blending mode of each background layer (color and/or image).`},
                                {code: `background-blend-mode: lighten;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `This is default. Sets the blending mode to normal`
                                            ],
                                            [
                                                `multiply`, 
                                                `Sets the blending mode to multiply`
                                            ],
                                            [
                                                `screen`, 
                                                `Sets the blending mode to screen`
                                            ],
                                            [
                                                `overlay`, 
                                                `Sets the blending mode to overlay`
                                            ],
                                            [
                                                `darken`, 
                                                `Sets the blending mode to darken`
                                            ],
                                            [
                                                `lighten`, 
                                                `Sets the blending mode to lighten`
                                            ],
                                            [
                                                `color-dodge`, 
                                                `Sets the blending mode to color-dodge`
                                            ],
                                            [
                                                `saturation`, 
                                                `Sets the blending mode to saturation`
                                            ],
                                            [
                                                `color`, 
                                                `Sets the blending mode to color`
                                            ],
                                            [
                                                `luminosity`, 
                                                `Sets the blending mode to luminosity`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'border', 
                            title: 'border', 
                            cellDir: [
                                {text: `The border property is a shorthand property for:`},
                                {list: [
                                    'border-width', 
                                    'border-style (required)', 
                                    'border-color', 
                                ]},
                                {text: `If border-color is omitted, the color applied will be the color of the text.`},
                                {code: `border: 4px dotted blue;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Property', 'Description'],
                                        body: [
                                            [
                                                (<><b>border-top</b></>), 
                                                `A shorthand property for border-top-width, border-top-style and border-top-color`
                                            ],
                                            [
                                                (<><b>border-right</b></>), 
                                                `A shorthand property for all the border-right-* properties`
                                            ],
                                            [
                                                (<><b>border-bottom</b></>), 
                                                `A shorthand property for border-bottom-width, border-bottom-style and border-bottom-color`
                                            ],
                                            [
                                                (<><b>border-left</b></>), 
                                                `A shorthand property for all the border-left-* properties`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'borderWidth', 
                            title: 'border-width', 
                            cellDir: [
                                {text: `The border-width property sets the width of an element's four borders. This property can have from one to four values.`},
                                {code: `border-width: thin medium thick 10px; `, indent: 0},
                                {list: [
                                    'top border is thin', 
                                    'right border is medium', 
                                    'bottom border is thick', 
                                    'left border is 10p',
                                ]},
                                {code: `border-width: thin medium thick;`, indent: 0},
                                {list: [
                                    'top border is thin', 
                                    'right and left borders are medium', 
                                    'bottom border is thick', 
                                ]},
                                {code: `border-width: thin medium;`, indent: 0},
                                {list: [
                                    'top and bottom borders are thin', 
                                    'right and left borders are medium', 
                                ]},
                                {code: `border-width: thin;`, indent: 0},
                                {list: [
                                    'all four borders are thin', 
                                ]},
                                {text: (<><b>Note: </b>{"Always declare the border-style property before the border-width property. An element must have borders before you can set the width."}</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `medium`, 
                                                `Specifies a medium border. This is default`
                                            ],
                                            [
                                                `thin`, 
                                                `Specifies a thin border`
                                            ],
                                            [
                                                `thick`, 
                                                `Specifies a thick border`
                                            ],
                                            [
                                                `length`, 
                                                `Allows you to define the thickness of the border.`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'borderStyle', 
                            title: 'border-style', 
                            cellDir: [
                                {text: `The border-style property sets the style of an element's four borders. This property can have from one to four values.`},
                                {code: `border-style: dotted solid double dashed; `, indent: 0},
                                {list: [
                                    'top border is dotted', 
                                    'right border is solid', 
                                    'bottom border is double', 
                                    'left border is dashed',
                                ]},
                                {code: `border-style: dotted solid double;`, indent: 0},
                                {list: [
                                    'top border is dotted', 
                                    'right and left borders are solid', 
                                    'bottom border is double', 
                                ]},
                                {code: `border-style: dotted solid;`, indent: 0},
                                {list: [
                                    'top and bottom borders are dotted', 
                                    'right and left borders are solid', 
                                ]},
                                {code: `border-style: dotted;`, indent: 0},
                                {list: [
                                    'all four borders are dotted', 
                                ]},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Default value. Specifies no border`
                                            ],
                                            [
                                                `hidden`, 
                                                `The same as "none", except in border conflict resolution for table elements`
                                            ],
                                            [
                                                `dotted`, 
                                                `Specifies a dotted border`
                                            ],
                                            [
                                                `dashed`, 
                                                `Specifies a dashed border`
                                            ],
                                            [
                                                `solid`, 
                                                `Specifies a solid border`
                                            ],
                                            [
                                                `double`, 
                                                `Specifies a double border`
                                            ],
                                            [
                                                `groove`, 
                                                `Specifies a 3D grooved border. The effect depends on the border-color value`
                                            ],
                                            [
                                                `ridge`, 
                                                `Specifies a 3D ridged border. The effect depends on the border-color value`
                                            ],
                                            [
                                                `inset`, 
                                                `Specifies a 3D inset border. The effect depends on the border-color value`
                                            ],
                                            [
                                                `outset`, 
                                                `Specifies a 3D outset border. The effect depends on the border-color value`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'borderColor', 
                            title: 'border-color', 
                            cellDir: [
                                {text: `The border-color property sets the color of an element's four borders. This property can have from one to four values.`},
                                {code: `border-color: red green blue pink; `, indent: 0},
                                {list: [
                                    'top border is red', 
                                    'right border is green', 
                                    'bottom border is blue', 
                                    'left border is pink',
                                ]},
                                {code: `border-color: red green blue;`, indent: 0},
                                {list: [
                                    'top border is red', 
                                    'right and left borders are green', 
                                    'bottom border is blue', 
                                ]},
                                {code: `border-color: red green;`, indent: 0},
                                {list: [
                                    'top and bottom borders are red', 
                                    'right and left borders are green', 
                                ]},
                                {code: `border-color: red;`, indent: 0},
                                {list: [
                                    'all four borders are red', 
                                ]},
                                {text: (<><b>Note: </b>{"Always declare the border-style property before the border-color property. An element must have borders before you can change the color."}</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `color`, 
                                                `Specifies the border color. Look at CSS Color Values for a complete list of possible color values. Default color is the current color of the element`
                                            ],
                                            [
                                                `transparent`, 
                                                `Specifies that the border color should be transparent`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'borderRadius', 
                            title: 'border-radius', 
                            cellDir: [
                                {text: `The border-radius property defines the radius of the element's corners.`},
                                {text: (<><b>Tip: </b>{"This property allows you to add rounded corners to elements! "}</>)},
                                {code: `border-radius: 15px 50px 30px 5px;`, indent: 0},
                                {list: [
                                    'first value applies to top-left corner', 
                                    'second value applies to top-right corner', 
                                    'third value applies to bottom-right corner', 
                                    'fourth value applies to bottom-left corner',
                                ]},
                                {code: `border-radius: 15px 50px 30px;`, indent: 0},
                                {list: [
                                    'first value applies to top-left corner', 
                                    'second value applies to top-right and bottom-left corners', 
                                    'third value applies to bottom-right corner', 
                                ]},
                                {code: `border-radius: 15px 50px; `, indent: 0},
                                {list: [
                                    'first value applies to top-left and bottom-right corners', 
                                    'second value applies to top-right and bottom-left corners', 
                                ]},
                                {code: `border-radius: 15px; `, indent: 0},
                                {list: [
                                    'value applies to all four corners, which are rounded equally', 
                                ]},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `length`, 
                                                `Defines the shape of the corners. Default value is 0. Read about length units
                                                `
                                            ],
                                            [
                                                `%`, 
                                                `Defines the shape of the corners in %
                                                `
                                            ],

                                        ]

                                    }
                                },
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Property', 'Description'],
                                        body: [
                                            [
                                                (<><b>border-top-left-radius</b></>), 
                                                `Defines the radius of the border of the top-left corner`
                                            ],
                                            [
                                                (<><b>border-top-right-radius</b></>), 
                                                `Defines the radius of the border of the top-right corner`
                                            ],
                                            [
                                                (<><b>border-bottom-right-radius</b></>),
                                                `Defines the radius of the border of the bottom-right corner`
                                            ],
                                            [
                                                (<><b>border-bottom-left-radius</b></>),
                                                `Defines the radius of the border of the bottom-left corner`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'borderImage', 
                            title: 'border-image', 
                            cellDir: [
                                {text: `The border-image property allows you to specify an image to be used as the border around an element.`},
                                {text: `The border-image property is a shorthand property for:`},
                                {list: [
                                    'border-image-source', 
                                    'border-image-slice', 
                                    'border-image-width', 
                                    'border-image-outset', 
                                    'border-image-repeat', 
                                ]},
                                {text: `Omitted values are set to their default values.`},
                                {code: `border-image: url(border.png) 30 round;`, indent: 0},
                            ]
                        },
                        {
                            id: 'borderImageSource', 
                            title: 'border-image-source', 
                            cellDir: [
                                {text: `The border-image-source property specifies the path to the image to be used as a border (instead of the normal border around an element).`},
                                {text: (<><b>Tip: </b>{'If the value is "none", or if the image cannot be displayed, the border styles will be used.'}</>)},
                                {code: `border-image-source: url(border.png);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `No image will be used`
                                            ],
                                            [
                                                `image`, 
                                                `The path to the image to be used as a border`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'borderImageSlice', 
                            title: 'border-image-slice', 
                            cellDir: [
                                {text: `The border-image-slice property specifies how to slice the image specified by border-image-source. The image is always sliced into nine sections: four corners, four edges and the middle.`},
                                {text: `The "middle" part is treated as fully transparent, unless the fill keyword is set.`},
                                {code: `border-image-slice: 30%;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `number`, 
                                                `The number(s) represent pixels for raster images or coordinates for vector images`
                                            ],
                                            [
                                                `%`, 
                                                `Percentages are relative to the height or width of the image`
                                            ],
                                            [
                                                `fill`, 
                                                `Causes the middle part of the image to be displayed`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'borderImageWidth', 
                            title: 'border-image-width', 
                            cellDir: [
                                {text: `The border-image-width property specifies the width of the border image.`},
                                {code: `border-image-width: 10px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `length`, 
                                                `A length unit (px) specifying the size of the border-width`
                                            ],
                                            [
                                                `number`, 
                                                `Default value 1. Represents multiples of the corresponding border-width`
                                            ],
                                            [
                                                `%`, 
                                                `Refers to the size of the border image area: the width of the area for horizontal offsets, the height for vertical offsets`
                                            ],
                                            [
                                                `auto`, 
                                                `If specified, the width is the intrinsic width or height of the corresponding image slice`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'borderImageOutset', 
                            title: 'border-image-outset', 
                            cellDir: [
                                {text: `The border-image-outset property specifies the amount by which the border image area extends beyond the border box.`},
                                {code: `border-image-outset: 10px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `length`, 
                                                `A length unit specifying how far from the edges the border-image will appear. Default value is 0`
                                            ],
                                            [
                                                `number`, 
                                                `Represent multiples of the corresponding border-width
                                                `
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'borderImageRepeat', 
                            title: 'border-image-repeat', 
                            cellDir: [
                                {text: `The border-image-repeat property specifies whether the border image should be repeated, rounded, spaced or stretched.`},
                                {code: `border-image-repeat: repeat;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `stretch`, 
                                                `Default value. The image is stretched to fill the area`
                                            ],
                                            [
                                                `repeat`, 
                                                `The image is tiled (repeated) to fill the area`
                                            ],
                                            [
                                                `round`, 
                                                `The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so it fits`
                                            ],
                                            [
                                                `space`, 
                                                `The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'boxDecorationBreak', 
                            title: 'box-decoration-break', 
                            cellDir: [
                                {text: `Sets the behavior of the background and border of an element at page-break, or, for in-line elements, at line-break.`},
                                {code: `-webkit-box-decoration-break: slice;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `slice`, 
                                                `Default. Box decorations are applied to the element as a whole and break at the edges of the element fragments`
                                            ],
                                            [
                                                `clone`, 
                                                `Box decorations apply to each fragment of the element as if the fragments were individual elements. Borders wrap the four edges of each fragment of the element, and backgrounds are redrawn in full for each fragment`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'boxShadow', 
                            title: 'box-shadow', 
                            cellDir: [
                                {text: `The box-shadow property attaches one or more shadows to an element.`},
                                {code: `box-shadow: 5px 10px #888888;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Default value. No shadow is displayed`
                                            ],
                                            [
                                                `h-offset`, 
                                                `Required. The horizontal offset of the shadow. A positive value puts the shadow on the right side of the box, a negative value puts the shadow on the left side of the box`
                                            ],
                                            [
                                                `v-offset`, 
                                                `Required. The vertical offset of the shadow. A positive value puts the shadow below the box, a negative value puts the shadow above the box`
                                            ],
                                            [
                                                `blur`, 
                                                `Optional. The blur radius. The higher the number, the more blurred the shadow will be`
                                            ],
                                            [
                                                `spread`, 
                                                `Optional. The spread radius. A positive value increases the size of the shadow, a negative value decreases the size of the shadow`
                                            ],
                                            [
                                                `color`, 
                                                (<>
                                                Optional. The color of the shadow. The default value is the text color. Look at CSS Color Values for a complete list of possible color values.<br/>
                                                <b>Note: </b>In Safari (on PC) the color parameter is required. If you do not specify the color, the shadow is not displayed at all.
                                                </>)
                                            ],
                                            [
                                                `inset`, 
                                                `Optional. Changes the shadow from an outer shadow (outset) to an inner shadow`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'containerStyle',
                    title: 'Container Style',
                    titleDir: [],
                    RowDir: [  
                        {
                            id: 'visibility', 
                            title: 'visibility', 
                            cellDir: [
                                {text: `The visibility property specifies whether or not an element is visible.`},
                                {code: `visibility: hidden;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `visible`, 
                                                `Default value. The element is visible`
                                            ],
                                            [
                                                `hidden`, 
                                                `The element is hidden (but still takes up space)`
                                            ],
                                            [
                                                `collapse`, 
                                                `Only for table rows (<tr>), row groups (<tbody>), columns (<col>), column groups (<colgroup>). This value removes a row or column, but it does not affect the table layout. The space taken up by the row or column will be available for other content. If collapse is used on other elements, it renders as "hidden"`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'opacity', 
                            title: 'opacity', 
                            cellDir: [
                                {text: `The opacity property sets the opacity level for an element.`},
                                {text: `The opacity-level describes the transparency-level, where 1 is not transparent at all, 0.5 is 50% see-through, and 0 is completely transparent.`},
                                {code: `opacity: 0.5;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `number`, 
                                                `Specifies the opacity. From 0.0 (fully transparent) to 1.0 (fully opaque) `
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'cursor', 
                            title: 'cursor', 
                            cellDir: [
                                {text: `The cursor property specifies the mouse cursor to be displayed when pointing over an element.`},
                                {code: `cursor: zoom-in;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `alias`, 
                                                `The cursor indicates an alias of something is to be created`
                                            ],
                                            [
                                                `all-scroll`, 
                                                `The cursor indicates that something can be scrolled in any direction`
                                            ],
                                            [
                                                `auto`, 
                                                `Default. The browser sets a cursor`
                                            ],
                                            [
                                                `cell`, 
                                                `The cursor indicates that a cell (or set of cells) may be selected`
                                            ],
                                            [
                                                `context-menu`, 
                                                `The cursor indicates that a context-menu is available`
                                            ],
                                            [
                                                `col-resize`, 
                                                `The cursor indicates that the column can be resized horizontally`
                                            ],
                                            [
                                                `copy`, 
                                                `The cursor indicates something is to be copied`
                                            ],
                                            [
                                                `crosshair`, 
                                                `The cursor render as a crosshair`
                                            ],
                                            [
                                                `default`, 
                                                `The default cursor`
                                            ],
                                            [
                                                `e-resize`, 
                                                `The cursor indicates that an edge of a box is to be moved right (east)`
                                            ],
                                            [
                                                `ew-resize`, 
                                                `Indicates a bidirectional resize cursor`
                                            ],
                                            [
                                                `grab`, 
                                                `The cursor indicates that something can be grabbed`
                                            ],
                                            [
                                                `grabbing`, 
                                                `The cursor indicates that something can be grabbed`
                                            ],
                                            [
                                                `help`, 
                                                `The cursor indicates that help is available`
                                            ],
                                            [
                                                `move`, 
                                                `The cursor indicates something is to be moved`
                                            ],
                                            [
                                                `n-resize`, 
                                                `The cursor indicates that an edge of a box is to be moved up (north)`
                                            ],
                                            [
                                                `ne-resize`, 
                                                `The cursor indicates that an edge of a box is to be moved up and right (north/east)`
                                            ],
                                            [
                                                `nesw-resize`, 
                                                `Indicates a bidirectional resize cursor`
                                            ],
                                            [
                                                `ns-resize`, 
                                                `Indicates a bidirectional resize cursor`
                                            ],
                                            [
                                                `nw-resize`, 
                                                `The cursor indicates that an edge of a box is to be moved up and left (north/west)`
                                            ],
                                            [
                                                `nwse-resize`, 
                                                `Indicates a bidirectional resize cursor`
                                            ],
                                            [
                                                `no-drop`, 
                                                `The cursor indicates that the dragged item cannot be dropped here`
                                            ],
                                            [
                                                `none`, 
                                                `No cursor is rendered for the element`
                                            ],
                                            [
                                                `not-allowed`, 
                                                `The cursor indicates that the requested action will not be executed`
                                            ],
                                            [
                                                `pointer`, 
                                                `The cursor is a pointer and indicates a link`
                                            ],
                                            [
                                                `progress`, 
                                                `The cursor indicates that the program is busy (in progress)`
                                            ],
                                            [
                                                `row-resize`, 
                                                `The cursor indicates that the row can be resized vertically`
                                            ],
                                            [
                                                `s-resize`, 
                                                `The cursor indicates that an edge of a box is to be moved down (south)`
                                            ],
                                            [
                                                `se-resize`, 
                                                `The cursor indicates that an edge of a box is to be moved down and right (south/east)`
                                            ],
                                            [
                                                `sw-resize`, 
                                                `The cursor indicates that an edge of a box is to be moved down and left (south/west)`
                                            ],
                                            [
                                                `text`, 
                                                `The cursor indicates text that may be selected`
                                            ],
                                            [
                                                `URL`, 
                                                `A comma separated list of URLs to custom cursors. Note: Always specify a generic cursor at the end of the list, in case none of the URL-defined cursors can be used`
                                            ],
                                            [
                                                `vertical-text`, 
                                                `The cursor indicates vertical-text that may be selected`
                                            ],
                                            [
                                                `w-resize`, 
                                                `The cursor indicates that an edge of a box is to be moved left (west)`
                                            ],
                                            [
                                                `wait`, 
                                                `The cursor indicates that the program is busy`
                                            ],
                                            [
                                                `zoom-in`, 
                                                `The cursor indicates that something can be zoomed in`
                                            ],
                                            [
                                                `zoom-out`, 
                                                `The cursor indicates that something can be zoomed out`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'caret-color', 
                            title: 'caret-color', 
                            cellDir: [
                                {text: `The caret-color property specifies the color of the cursor (caret) in inputs, textareas, or any element that is editable.`},
                                {code: `caret-color: red;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default. Browsers uses the currentColor for the caret`
                                            ],
                                            [
                                                `color`, 
                                                `Specifies a color to use for the caret. All legal color values can be used (rgb, hex, named-color, etc). For more information on legal values`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'pointer-events', 
                            title: 'pointer-events', 
                            cellDir: [
                                {text: `The pointer-events property defines whether or not an element reacts to pointer events.`},
                                {code: `pointer-events: auto;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `The element reacts to pointer events, like :hover and click. This is default`
                                            ],
                                            [
                                                `none`, 
                                                `The element does not react to pointer events`
                                            ],
                                            [
                                                `initial`, 
                                                `Sets this property to its default value.`
                                            ],
                                            [
                                                `inherit`, 
                                                `Inherits this property from its parent element.`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'scroll-behavior', 
                            title: 'scroll-behavior', 
                            cellDir: [
                                {text: `The scroll-behavior property specifies whether to smoothly animate the scroll position, instead of a straight jump, when the user clicks on a link within a scrollable box.`},
                                {code: `scroll-behavior: smooth;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Allows a straight jump "scroll effect" between elements within the scrolling box. This is default`
                                            ],
                                            [
                                                `smooth`, 
                                                `Allows a smooth animated "scroll effect" between elements within the scrolling box.`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'filter', 
                            title: 'filter', 
                            cellDir: [
                                {text: `The filter property defines visual effects (like blur and saturation) to an element (often <img>).`},
                                {code: `scroll-behavior: smooth;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                (<>
                                                Default value. Specifies no effects
                                                </>)
                                            ],
                                            [
                                                `blur(px)`, 
                                                (<>
                                                Applies a blur effect to the image. A larger value will create more blur.<br/><br/>
                                                If no value is specified, 0 is used.
                                                </>)
                                            ],
                                            [
                                                `brightness(%)`, 
                                                (<>
                                                Adjusts the brightness of the image.<br/><br/>
                                                0% will make the image completely black.<br/>
                                                100% (1) is default and represents the original image.<br/><br/>
                                                Values over 100% will provide brighter results.<br/>
                                                </>)
                                            ],
                                            [
                                                `contrast(%)`, 
                                                (<>
                                                Adjusts the contrast of the image.<br/><br/>
                                                0% will make the image completely black.<br/>
                                                100% (1) is default, and represents the original image.<br/><br/>
                                                Values over 100% will provide results with more contrast.
                                                </>)
                                            ],
                                            [
                                                `drop-shadow(h-shadow v-shadow blur spread color)`, 
                                                (<>
                                                Applies a drop shadow effect to the image.<br/><br/>
                                                <b>Possible values:</b><br/>
                                                h-shadow - Required. Specifies a pixel value for the horizontal shadow. Negative values place the shadow to the left of the image.<br/><br/>
                                                v-shadow - Required. Specifies a pixel value for the vertical shadow. Negative values place the shadow above the image.<br/><br/>
                                                {"blur - Optional. This is the third value, and must be in pixels. Adds a blur effect to the shadow. A larger value will create more blur (the shadow becomes bigger and lighter). Negative values are not allowed. If no value is specified, 0 is used (the shadow's edge is sharp)."}<br/><br/>
                                                spread - Optional. This is the fourth value, and must be in pixels. Positive values will cause the shadow to expand and grow bigger, and negative values will cause the shadow to shrink. If not specified, it will be 0 (the shadow will be the same size as the element). <br/>
                                                <b>Note: </b>Chrome, Safari and Opera, and maybe other browsers, do not support this 4th length; it will not render if added.<br/><br/>
                                                color - Optional. Adds a color to the shadow. If not specified, the color depends on the browser (often black). An example of creating a red shadow, which is 8px big both horizontally and vertically, with a blur effect of 10px:<br/><br/>
                                                filter: drop-shadow(8px 8px 10px red); <br/>
                                                <b>Tip: </b>This filter is similar to the box-shadow property.
                                                </>)
                                            ],
                                            [
                                                `grayscale(%)`, 
                                                (<>
                                                Converts the image to grayscale. <br/><br/>
                                                0% (0) is default and represents the original image.<br/>
                                                100% will make the image completely gray (used for black and white images).<br/><br/>
                                                <b>Note: </b>Negative values are not allowed.
                                                </>)
                                            ],
                                            [
                                                `hue-rotate(deg)`, 
                                                (<>
                                                Applies a hue rotation on the image. The value defines the number of degrees around the color circle the image samples will be adjusted. 0deg is default, and represents the original image.<br/><br/>
                                                <b>Note: </b>Maximum value is 360deg.
                                                </>)
                                            ],
                                            [
                                                `invert(%)`, 
                                                (<>
                                                Inverts the samples in the image. <br/><br/>
                                                0% (0) is default and represents the original image.<br/>
                                                100% will make the image completely inverted.<br/><br/>
                                                <b>Note: </b>Negative values are not allowed.
                                                </>)
                                            ],
                                            [
                                                `opacity(%)	`, 
                                                (<>
                                                Sets the opacity level for the image. The opacity-level describes the transparency-level, where:<br/><br/>
                                                0% is completely transparent.<br/>
                                                100% (1) is default and represents the original image (no transparency).<br/><br/>
                                                <b>Note: </b>Negative values are not allowed.<br/>
                                                <b>Tip: </b>This filter is similar to the opacity property.
                                                </>)
                                            ],
                                            [
                                                `saturate(%)`, 
                                                (<>
                                                Saturates the image.<br/><br/>
                                                0% (0) will make the image completely un-saturated.<br/>
                                                100% is default and represents the original image.<br/><br/>
                                                Values over 100% provides super-saturated results. <br/><br/>
                                                <b>Note: </b>Negative values are not allowed.
                                                </>)
                                            ],
                                            [
                                                `sepia(%)`, 
                                                (<>
                                                Converts the image to sepia. <br/><br/>
                                                0% (0) is default and represents the original image. <br/>
                                                100% will make the image completely sepia.<br/><br/>
                                                <b>Note: </b>Negative values are not allowed.
                                                </>)
                                            ],
                                            [
                                                `url()`, 
                                                (<>
                                                The url() function takes the location of an XML file that specifies an SVG filter, and may include an anchor to a specific filter element. Example:<br/><br/>
                                                filter: url(svg-url#element-id)
                                                </>)
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'mix-blend-mode', 
                            title: 'mix-blend-mode', 
                            cellDir: [
                                {text: `The mix-blend-mode property specifies how an element's content should blend with its direct parent background.`},
                                {code: `mix-blend-mode: darken;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `This is default. Sets the blending mode to normal`
                                            ],
                                            [
                                                `multiply`, 
                                                `Sets the blending mode to multiply`
                                            ],
                                            [
                                                `screen`, 
                                                `Sets the blending mode to screen`
                                            ],
                                            [
                                                `overlay`, 
                                                `Sets the blending mode to overlay`
                                            ],
                                            [
                                                `darken`, 
                                                `Sets the blending mode to darken`
                                            ],
                                            [
                                                `lighten`, 
                                                `Sets the blending mode to lighten`
                                            ],
                                            [
                                                `color-dodge`, 
                                                `Sets the blending mode to color-dodge`
                                            ],
                                            [
                                                `color-burn`, 
                                                `Sets the blending mode to color-burn`
                                            ],
                                            [
                                                `difference`, 
                                                `Sets the blending mode to difference`
                                            ],
                                            [
                                                `exclusion`, 
                                                `Sets the blending mode to exclusion`
                                            ],
                                            [
                                                `hue`, 
                                                `Sets the blending mode to hue`
                                            ],
                                            [
                                                `saturation`, 
                                                `Sets the blending mode to saturation`
                                            ],
                                            [
                                                `color`, 
                                                `Sets the blending mode to color`
                                            ],
                                            [
                                                `luminosity`, 
                                                `Sets the blending mode to luminosity`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'white-space', 
                            title: 'white-space', 
                            cellDir: [
                                {text: `The white-space property specifies how white-space inside an element is handled.`},
                                {code: `white-space: pre;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `Sequences of whitespace will collapse into a single whitespace. Text will wrap when necessary. This is default`
                                            ],
                                            [
                                                `nowrap`, 
                                                `Sequences of whitespace will collapse into a single whitespace. Text will never wrap to the next line. The text continues on the same line until a <br> tag is encountered`
                                            ],
                                            [
                                                `pre`, 
                                                `Whitespace is preserved by the browser. Text will only wrap on line breaks. Acts like the <pre> tag in HTML`
                                            ],
                                            [
                                                `pre-line`, 
                                                `Sequences of whitespace will collapse into a single whitespace. Text will wrap when necessary, and on line breaks`
                                            ],
                                            [
                                                `pre-wrap`, 
                                                `Whitespace is preserved by the browser. Text will wrap when necessary, and on line breaks`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'backface-visibility', 
                            title: 'backface-visibility', 
                            cellDir: [
                                {text: `The backface-visibility property defines whether or not the back face of an element should be visible when facing the user.`},
                                {text: `The back face of an element is a mirror image of the front face being displayed.`},
                                {text: `This property is useful when an element is rotated. It lets you choose if the user should see the back face or not.`},
                                {code: `-webkit-backface-visibility: visible;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `visible`, 
                                                `Default value. The backside is visible`
                                            ],
                                            [
                                                `hidden`, 
                                                `The backside is not visible`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'isolation', 
                            title: 'isolation', 
                            cellDir: [
                                {text: `The isolation property defines whether an element must create a new stacking content.`},
                                {text: (<><b>Note: </b>{"The isolation property is helpful when used with background-blend-mode or mix-blend-mode."}</>)},
                                {code: `isolation: isolate;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default. A new stacking context is created only if one of the properties applied to the element requires it`
                                            ],
                                            [
                                                `isolate`, 
                                                `A new stacking context must be created`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'masks',
                    title: 'Masks',
                    titleDir: [],
                    RowDir: [      
                        {
                            id: 'mask', 
                            title: 'mask', 
                            cellDir: [
                                {text: `Hides parts of an element by masking or clipping an image at specific places`},
                            ]
                        },
                        {
                            id: 'maskClip', 
                            title: 'mask-clip', 
                            cellDir: [
                                {text: `Specifies the mask area`},
                            ]
                        },
                        {
                            id: 'maskComposite', 
                            title: 'mask-composite', 
                            cellDir: [
                                {text: `Represents a compositing operation used on the current mask layer with the mask layers below it`},
                            ]
                        },
                        {
                            id: 'maskImage', 
                            title: 'mask-image', 
                            cellDir: [
                                {text: `The mask-image property specifies an image to be used as a mask layer for an element.`},
                                {text: (<><b>Tip: </b>{"Linear and radial gradients in CSS can also be used as the mask image."}</>)},
                                {code: `mask-image: url(w3logo.png);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `This is default`
                                            ],
                                            [
                                                `image`, 
                                                `An image to use as the mask layer`
                                            ],
                                            [
                                                `url`, 
                                                `An url reference to an image or an SVG <mask> element`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'maskMode', 
                            title: 'mask-mode', 
                            cellDir: [
                                {text: `The mask-mode property specifies whether the mask layer image should be treated as a luminance mask or as an alpha mask.`},
                                {code: `mask-mode: luminance;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `match-source`, 
                                                `If the mask-image property is an image (an image URL or a gradient), set mask-mode to alpha. If the mask-image property is an SVG <mask> element, use the <mask> element's mask-type property. This is default.`
                                            ],
                                            [
                                                `luminance`, 
                                                `Use the luminance values of the mask image as the mask values`
                                            ],
                                            [
                                                `alpha`, 
                                                `Use the alpha values of the mask image as the mask values`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'maskOrigin', 
                            title: 'mask-origin', 
                            cellDir: [
                                {text: `The mask-origin property specifies the origin position (the mask position area) of a mask layer image.`},
                                {code: `mask-origin: content-box; `, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `border-box`, 
                                                `The position is relative to the border box. This is default`
                                            ],
                                            [
                                                `content-box`, 
                                                `The position is relative to the content box`
                                            ],
                                            [
                                                `padding-box`, 
                                                `The position is relative to the padding box`
                                            ],
                                            [
                                                `margin-box`, 
                                                `The position is relative to the margin box`
                                            ],
                                            [
                                                `fill-box`, 
                                                `The position is relative to the object bounding box`
                                            ],
                                            [
                                                `stroke-box`, 
                                                `The position is relative to the stroke bounding box`
                                            ],
                                            [
                                                `view-box`, 
                                                `Use the nearest SVG viewport as reference box`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'maskPosition', 
                            title: 'mask-position', 
                            cellDir: [
                                {text: `The mask-position property sets the starting position of a mask image (relative to the mask position area).`},
                                {text: (<><b>Tip: </b>{"By default, a mask image is placed at the top-left corner of an element, and repeated both vertically and horizontally. "}</>)},
                                {code: `mask-position: center;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `left top`, 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                `left center`, 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                `left bottom`, 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                `right top`, 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                `right center`, 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                `right bottom`, 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                `center top`, 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                `center center`, 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                `center bottom`, 
                                                `If you only specify one keyword, the other value will be "center"`
                                            ],
                                            [
                                                `x% y%`, 
                                                `The first value is the horizontal position and the second value is the vertical. The top left corner is 0% 0%. The right bottom corner is 100% 100%. If you only specify one value, the other value will be 50%. Default value is: 0% 0%`
                                            ],
                                            [
                                                `xpos ypos`, 
                                                `The first value is the horizontal position and the second value is the vertical. The top left corner is 0 0. Units can be pixels (0px 0px) or any other CSS units. If you only specify one value, the other value will be 50%. You can mix % and positions`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'maskRepeat', 
                            title: 'mask-repeat', 
                            cellDir: [
                                {text: `The mask-repeat property sets if/how a mask image will be repeated.`},
                                {text: `By default, a mask image is repeated both vertically and horizontally.`},
                                {code: `mask-repeat: repeat;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `repeat`, 
                                                `The mask image is repeated both vertically and horizontally. The last image will be clipped if it does not fit. This is default`
                                            ],
                                            [
                                                `repeat-x`, 
                                                `The mask image is repeated only horizontally`
                                            ],
                                            [
                                                `repeat-y`, 
                                                `The mask image is repeated only vertically`
                                            ],
                                            [
                                                `space`, 
                                                `The mask image is repeated as much as possible without clipping. The first and last image is pinned to either side of the element, and whitespace is distributed evenly between the images`
                                            ],
                                            [
                                                `round`, 
                                                `The mask image is repeated and squished or stretched to fill the space (no gaps)`
                                            ],
                                            [
                                                `no-repeat`, 
                                                `The mask image is not repeated. The image will only be shown once`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'maskSize', 
                            title: 'mask-size', 
                            cellDir: [
                                {text: `The mask-size property specifies the size of the mask layer image.`},
                                {code: `mask-size: 70%;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `This is default`
                                            ],
                                            [
                                                `size`, 
                                                `Specifies the size of the mask image in px, em, etc, or in %`
                                            ],
                                            [
                                                `contain`, 
                                                `Scales the mask image in a way that both its width and its height fit inside the container`
                                            ],
                                            [
                                                `cover`, 
                                                `Scales the mask image in a way that both its width and its height cover the container`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'maskType', 
                            title: 'mask-type', 
                            cellDir: [
                                {text: `Specifies whether an SVG <mask> element is treated as a luminance mask or as an alpha mask`},
                            ]
                        },
                    ] 
                },
                {
                    id: 'font',
                    title: 'Font',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'color', 
                            title: 'color', 
                            cellDir: [
                                {text: `The color property specifies the color of text.`},
                                {text: (<><b>Tip:</b>{"Use a background color combined with a text color that makes the text easy to read."}</>)},
                                {code: `color: red; `, indent: 0},
                                {code: `color: #00ff00;`, indent: 0},
                                {code: `color: rgb(0,0,255);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `color`, 
                                                `Specifies the text color`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'font', 
                            title: 'font', 
                            cellDir: [
                                {text: `The font property is a shorthand property for:`},
                                {list: [
                                    'font-style', 
                                    'font-variant', 
                                    'font-weight', 
                                    'font-size/line-height', 
                                    'font-family', 
                                ]},
                                {text: `The font-size and font-family values are required. If one of the other values is missing, their default value are used.`},
                                {text: (<><b>Note: </b>{"The line-height property sets the space between lines."}</>)},
                                {code: `font: italic small-caps bold 12px/30px Georgia, serif;`, indent: 0},
                            ]
                        },
                        {
                            id: 'fontStyle', 
                            title: 'font-style', 
                            cellDir: [
                                {text: `The font-style property specifies the font style for a text.`},
                                {code: `font-style: italic;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `The browser displays a normal font style. This is default`
                                            ],
                                            [
                                                `italic`, 
                                                `The browser displays an italic font style`
                                            ],
                                            [
                                                `oblique`, 
                                                `The browser displays an oblique font style`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'fontVariant', 
                            title: 'font-variant', 
                            cellDir: [
                                {text: `In a small-caps font, all lowercase letters are converted to uppercase letters. However, the converted uppercase letters appears in a smaller font size than the original uppercase letters in the text.`},
                                {text: `The font-variant property specifies whether or not a text should be displayed in a small-caps font.`},
                                {code: `font-variant: small-caps;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `The browser displays a normal font. This is default`
                                            ],
                                            [
                                                `small-caps`, 
                                                `The browser displays a small-caps font`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'fontWeight', 
                            title: 'font-weight', 
                            cellDir: [
                                {text: `The font-weight property sets how thick or thin characters in text should be displayed.`},
                                {code: `font-weight: bold;`, indent: 0},
                                {code: `font-weight: 900;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `Defines normal characters. This is default`
                                            ],
                                            [
                                                `bold`, 
                                                `Defines thick characters`
                                            ],
                                            [
                                                `bolder`, 
                                                `Defines thicker characters`
                                            ],
                                            [
                                                `lighter`, 
                                                `Defines lighter characters`
                                            ],
                                            [
                                                (<>
                                                100<br/>
                                                200<br/>
                                                300<br/>
                                                400<br/>
                                                500<br/>
                                                600<br/>
                                                700<br/>
                                                800<br/>
                                                900
                                                </>), 
                                                `Defines from thin to thick characters. 400 is the same as normal, and 700 is the same as bold`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'fontSize', 
                            title: 'font-size', 
                            cellDir: [
                                {text: `The font-size property sets the size of a font.`},
                                {code: `font-size: 15px;`, indent: 0},
                                {code: `font-size: large; `, indent: 0},
                                {code: `font-size: 150%;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `medium`, 
                                                `Sets the font-size to a medium size. This is default`
                                            ],
                                            [
                                                `xx-small`, 
                                                `Sets the font-size to an xx-small size`
                                            ],
                                            [
                                                `x-small`, 
                                                `Sets the font-size to an extra small size`
                                            ],
                                            [
                                                `small`, 
                                                `Sets the font-size to a small size`
                                            ],
                                            [
                                                `large`, 
                                                `Sets the font-size to a large size`
                                            ],
                                            [
                                                `x-large`, 
                                                `Sets the font-size to an extra large size`
                                            ],
                                            [
                                                `xx-large`, 
                                                `Sets the font-size to an xx-large size`
                                            ],
                                            [
                                                `smaller`, 
                                                `Sets the font-size to a smaller size than the parent element`
                                            ],
                                            [
                                                `larger`, 
                                                `Sets the font-size to a larger size than the parent element`
                                            ],
                                            [
                                                `length`, 
                                                `Sets the font-size to a fixed size in px, cm, etc. Read about length units`
                                            ],
                                            [
                                                `%`, 
                                                `Sets the font-size to a percent of  the parent element's font size`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'fontFamily', 
                            title: 'font-family', 
                            cellDir: [
                                {text: `The font-family property specifies the font for an element.`},
                                {text: `The font-family property can hold several font names as a "fallback" system. If the browser does not support the first font, it tries the next font.`},
                                {text: `There are two types of font family names:`},
                                {list: [
                                    (<><b>family-name </b>{'- The name of a font-family, like "times", "courier", "arial", etc.'}</>), 
                                    (<><b>generic-family </b>{'- The name of a generic-family, like "serif", "sans-serif", "cursive", "fantasy", "monospace".'}</>), 
                                ]},
                                {text: `Start with the font you want, and always end with a generic family, to let the browser pick a similar font in the generic family, if no other fonts are available.`},
                                {text: (<><b>Note: </b>{"Separate each value with a comma."}</>)},
                                {text: (<><b>Note: </b>{'If a font name contains white-space, it must be quoted. Single quotes must be used when using the "style" attribute in HTML.'}</>)},
                                {code: `font-family: "Times New Roman", Times, serif;`, indent: 0},
                                {code: `font-family: Arial, Helvetica, sans-serif;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `family-name / generic-family`, 
                                                `A prioritized list of font family names and/or generic family names`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'fontSizeAdjust', 
                            title: 'font-size-adjust', 
                            cellDir: [
                                {text: `The font-size-adjust property gives you better control of the font size when the first selected font is not available.`},
                                {text: `When a font is not available, the browser uses the second specified font. This could result in a big change for the font size. To prevent this, use the font-size-adjust property.`},
                                {text: `All fonts have an "aspect value" which is the size-difference between the lowercase letter "x" and the uppercase letter "X".`},
                                {text: `When the browser knows the "aspect value" for the first selected font, the browser can figure out what font-size to use when displaying text with the second choice font.`},
                                {code: `font-size-adjust: 0.58;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `number`, 
                                                `Defines the aspect value to use`
                                            ],
                                            [
                                                `none`, 
                                                `Default value. No font size adjustment`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'fontStretch', 
                            title: 'font-stretch', 
                            cellDir: [
                                {text: `The font-stretch property allows you to make text narrower (condensed) or wider (expanded).`},
                                {text: (<><b>Note: </b>{"Some fonts provide additional faces; condensed faces and expanded faces. For these fonts, you can use the font-stretch property to select a normal, condensed, or expanded font face."}</>)},
                                {text: (<><b>Note: </b>{"This property has no effect if the selected font does not offer condensed or expanded faces!"}</>)},
                                {code: `font-stretch: expanded;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `ultra-condensed`, 
                                                `Makes the text as narrow as it gets`
                                            ],
                                            [
                                                `extra-condensed`, 
                                                `Makes the text narrower than condensed, but not as narrow as ultra-condensed`
                                            ],
                                            [
                                                `condensed`, 
                                                `Makes the text narrower than semi-condensed, but not as narrow as extra-condensed`
                                            ],
                                            [
                                                `semi-condensed`, 
                                                `Makes the text narrower than normal, but not as narrow as condensed`
                                            ],
                                            [
                                                `normal`, 
                                                `Default value. No font stretching`
                                            ],
                                            [
                                                `semi-expanded`, 
                                                `Makes the text wider than normal, but not as wide as expanded`
                                            ],
                                            [
                                                `expanded`, 
                                                `Makes the text wider than semi-expanded, but not as wide as extra-expanded`
                                            ],
                                            [
                                                `extra-expanded`, 
                                                `Makes the text wider than expanded, but not as wide as ultra-expanded`
                                            ],
                                            [
                                                `ultra-expanded`, 
                                                `Makes the text as wide as it gets`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'fontVariantCaps', 
                            title: 'font-variant-caps', 
                            cellDir: [
                                {text: `The font-variant-caps property controls the usage of alternate glyphs for capital letters.`},
                                {code: `font-variant-caps: unicase;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `Deactivates the use of alternate glyphs`
                                            ],
                                            [
                                                `small-caps`, 
                                                `Displays small capitals`
                                            ],
                                            [
                                                `all-small-caps`, 
                                                `Displays small capitals for both upper and lowercase letters`
                                            ],
                                            [
                                                `petite-caps`, 
                                                `Displays petite capitals`
                                            ],
                                            [
                                                `all-petite-caps`, 
                                                `Displays petite capitals for both upper and lowercase letters`
                                            ],
                                            [
                                                `unicase`, 
                                                `Displays a mix of small capitals for uppercase letters with normal lowercase letters`
                                            ],
                                            [
                                                `titling-caps`, 
                                                `Displays titling capitals`
                                            ],
                                            [
                                                `unset`, 
                                                ``
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'fontFeatureSettings', 
                            title: 'font-feature-settings', 
                            cellDir: [
                                {text: `The font-feature-settings property allows control over advanced typographic features in OpenType fonts.`},
                                {code: `font-feature-settings: "frac";`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `Default. Use the default settings to lay out text`
                                            ],
                                            [
                                                `feature-value`, 
                                                `Format: string [1|0|on|off] Always a string of 4 ASCII characters. `
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'formattingPositioning',
                    title: 'Formatting (Positioning)',
                    titleDir: [],
                    RowDir: [
                                    
                        {
                            id: 'hangingPunctuation', 
                            title: 'hanging-punctuation', 
                            cellDir: [
                                {text: `The hanging-punctuation property specifies whether a punctuation mark may be placed outside the line box at the start or at the end of a full line of text.`},
                                {code: `hanging-punctuation: first;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `No punctuation mark may be placed outside the line box at the start or at the end of a full line of text`
                                            ],
                                            [
                                                `first`, 
                                                `Punctuation may hang outside the start edge of the first line`
                                            ],
                                            [
                                                `last`, 
                                                `Punctuation may hang outside the end edge of the last line`
                                            ],
                                            [
                                                `allow-end`, 
                                                `Punctuation may hang outside the end edge of all lines if the punctuation does not otherwise fit prior to justification`
                                            ],
                                            [
                                                `force-end`, 
                                                `Punctuation may hang outside the end edge of all lines. If justification is enabled on this line, then it will force the punctuation to hang`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'lineHeight', 
                            title: 'line-height', 
                            cellDir: [
                                {text: `The line-height property specifies the height of a line.`},
                                {text: (<><b>Note: </b>{"Negative values are not allowed."}</>)},
                                {code: `line-height: normal;`, indent: 0},
                                {code: `line-height: 1.6; //Recommended`, indent: 0},
                                {code: `line-height: 80%;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `A normal line height. This is default`
                                            ],
                                            [
                                                `number`, 
                                                `A number that will be multiplied with the current font-size to set the line height`
                                            ],
                                            [
                                                `length`, 
                                                `A fixed line height in px, pt, cm, etc.`
                                            ],
                                            [
                                                `%`, 
                                                `A line height in percent of the current font size`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'textAlign', 
                            title: 'text-align', 
                            cellDir: [
                                {text: `The text-align property specifies the horizontal alignment of text in an element.`},
                                {code: `text-align: justify;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `left`, 
                                                `Aligns the text to the left`
                                            ],
                                            [
                                                `right`, 
                                                `Aligns the text to the right`
                                            ],
                                            [
                                                `center`, 
                                                `Centers the text`
                                            ],
                                            [
                                                `justify`, 
                                                `Stretches the lines so that each line has equal width (like in newspapers and magazines)`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'textAlignLast', title: 'text-align-last', 
                            cellDir: [
                                {text: `The text-align-last property specifies how to align the last line of a text.`},
                                {text: `Notice that the text-align-last property sets the alignment for all last lines within the selected element. So, if you have a <div> with three paragraphs in it, text-align-last will apply to the last line of EACH of the paragraphs. To use text-align-last on only the last paragraph in the container, you can use :last child, see example below.`},
                                {text: (<><b>Note: </b>{'In Edge prior 79, the text-align-last property only works on text that has "text-align: justify".'}</>)},
                                {code: `text-align-last: center;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default value. The last line is justified and aligned left`
                                            ],
                                            [
                                                `left`, 
                                                `The last line is aligned to the left`
                                            ],
                                            [
                                                `right`, 
                                                `The last line is aligned to the right`
                                            ],
                                            [
                                                `center`, 
                                                `The last line is center-aligned`
                                            ],
                                            [
                                                `justify`, 
                                                `The last line is justified as the rest of the lines`
                                            ],
                                            [
                                                `start`, 
                                                `The last line is aligned at the beginning of the line (left if the text-direction is left-to-right, and right is the text-direction is right-to-left)`
                                            ],
                                            [
                                                `end`, 
                                                `The last line is aligned at the end of the line (right if the text-direction is left-to-right, and left is the text-direction is right-to-left)`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'textJustify', 
                            title: 'text-justify', 
                            cellDir: [
                                {text: `The text-justify property specifies the justification method of text when text-align is set to "justify".`},
                                {code: `text-justify: inter-word;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `The browser determines the justification algorithm`
                                            ],
                                            [
                                                `inter-word`, 
                                                `Increases/Decreases the space between words`
                                            ],
                                            [
                                                `inter-character`, 
                                                `Increases/Decreases the space between characters`
                                            ],
                                            [
                                                `none`, 
                                                `Disables justification methods`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'formattingSpacing',
                    title: 'Formatting (Spacing)',
                    titleDir: [],
                    RowDir: [
                                    
                        {
                            id: 'fontKerning', 
                            title: 'font-kerning', 
                            cellDir: [
                                {text: `The font-kerning property controls the usage of the kerning information stored in a font.`},
                                {text: (<><b>Tip:</b>{"Kerning defines how letters are spaced."}</>)},
                                {text: (<><b>Note: </b>{"For fonts that do not include kerning data, this property will have no visible effect."}</>)},
                                {code: `font-kerning: normal;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default. The browser determines whether font kerning should be applied or not`
                                            ],
                                            [
                                                `normal`, 
                                                `Specifies that font kerning is applied`
                                            ],
                                            [
                                                `none`, 
                                                `Specifies that font kerning is not applied`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'letterSpacing', 
                            title: 'letter-spacing', 
                            cellDir: [
                                {text: `The letter-spacing property increases or decreases the space between characters in a text.`},
                                {code: `letter-spacing: -1px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `Defines normal space between characters. This is default`
                                            ],
                                            [
                                                `length`, 
                                                `Defines a length that is used as the space between characters (negative values are also allowed). Read about length units`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'tabSize', 
                            title: 'tab-size', 
                            cellDir: [
                                {text: `The tab-size property specifies the width of a tab character.`},
                                {text: `In HTML, the tab character is usually displayed as a single space-character, except for some elements, like <textarea> and <pre>, and the result of the tab-size property will only be visible for those elements.`},
                                {code: `tab-size: 16;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `number`, 
                                                `The number of space-characters to be displayed for each tab-character. Default value is 8`
                                            ],
                                            [
                                                `length`, 
                                                `The length of a tab-character. This property value is not supported in any of the major browsers`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'textIndent', 
                            title: 'text-indent', 
                            cellDir: [
                                {text: `The text-indent property specifies the indentation of the first line in a text-block.`},
                                {text: (<><b>Note: </b>{"Negative values are allowed. The first line will be indented to the left if the value is negative."}</>)},
                                {code: `text-indent: 50px;`, indent: 0},
                                {code: `text-indent: -2em;`, indent: 0},
                                {code: `text-indent: 30%;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `length`, 
                                                `Defines a fixed indentation in px, pt, cm, em, etc. Default value is 0. Read about length units`
                                            ],
                                            [
                                                `%`, 
                                                `Defines the indentation in % of the width of the parent element`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'wordSpacing', 
                            title: 'word-spacing', 
                            cellDir: [
                                {text: `The word-spacing property increases or decreases the white space between words.`},
                                {text: (<><b>Note: </b>{"Negative values are allowed."}</>)},
                                {code: `word-spacing: 30px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `Defines normal space between words (0.25em) . This is default`
                                            ],
                                            [
                                                `length`, 
                                                `Defines an additional space between words (in px, pt, cm, em, etc). Negative values are allowed. Read about length units`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        
                    ] 
                },
                {
                    id: 'listsOutlinesDecorations',
                    title: 'Lists, Outlines & Decorations',
                    titleDir: [],
                    RowDir: [
                                                    
                        {
                            id: 'listStyle', 
                            title: 'list-style', 
                            cellDir: [
                                {text: `The list-style property is a shorthand for the following properties:`},
                                {list: [
                                    'list-style-type', 
                                    'list-style-position', 
                                    'list-style-image', 
                                ]},
                                {text: `If one of the values are missing, the default value for that property will be used.`},
                                {code: `list-style: square inside url("sqpurple.gif");`, indent: 0},
                            ]
                        },
                        {
                            id: 'listStyleType', 
                            title: 'list-style-type', 
                            cellDir: [
                                {text: `The list-style-type specifies the type of list-item marker in a list.`},
                                {code: `list-style-type: square;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `disc`, 
                                                `Default value. The marker is a filled circle`
                                            ],
                                            [
                                                `armenian`, 
                                                `The marker is traditional Armenian numbering`
                                            ],
                                            [
                                                `circle`, 
                                                `The marker is a circle`
                                            ],
                                            [
                                                `cjk-ideographic`, 
                                                `The marker is plain ideographic numbers`
                                            ],
                                            [
                                                `decimal`, 
                                                `The marker is a number`
                                            ],
                                            [
                                                `decimal-leading-zero`, 
                                                `The marker is a number with leading zeros (01, 02, 03, etc.)`
                                            ],
                                            [
                                                `georgian`, 
                                                `The marker is traditional Georgian numbering`
                                            ],
                                            [
                                                `hebrew`, 
                                                `The marker is traditional Hebrew numbering`
                                            ],
                                            [
                                                `hiragana`, 
                                                `The marker is traditional Hiragana numbering`
                                            ],
                                            [
                                                `hiragana-iroha`, 
                                                `The marker is traditional Hiragana iroha numbering`
                                            ],
                                            [
                                                `katakana`, 
                                                `The marker is traditional Katakana numbering`
                                            ],
                                            [
                                                `katakana-iroha`, 
                                                `The marker is traditional Katakana iroha numbering`
                                            ],
                                            [
                                                `lower-alpha`, 
                                                `The marker is lower-alpha (a, b, c, d, e, etc.)`
                                            ],
                                            [
                                                `lower-greek`, 
                                                `The marker is lower-greek`
                                            ],
                                            [
                                                `lower-latin`, 
                                                `The marker is lower-latin (a, b, c, d, e, etc.)`
                                            ],
                                            [
                                                `lower-roman`, 
                                                `The marker is lower-roman (i, ii, iii, iv, v, etc.)`
                                            ],
                                            [
                                                `none`, 
                                                `No marker is shown`
                                            ],
                                            [
                                                `square`, 
                                                `The marker is a square`
                                            ],
                                            [
                                                `upper-alpha`, 
                                                `The marker is upper-alpha (A, B, C, D, E, etc.)`
                                            ],
                                            [
                                                `upper-greek`, 
                                                `The marker is upper-greek`
                                            ],
                                            [
                                                `upper-latin`, 
                                                `The marker is upper-latin (A, B, C, D, E, etc.)`
                                            ],
                                            [
                                                `upper-roman`, 
                                                `The marker is upper-roman (I, II, III, IV, V, etc.)`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'listStylePosition', 
                            title: 'list-style-position', 
                            cellDir: [
                                {text: `The list-style-position property specifies the position of the list-item markers (bullet points).`},
                                {text: `list-style-position: outside; means that the bullet points will be outside the list item. The start of each line of a list item will be aligned vertically:`},
                                {text: `list-style-position: inside; means that the bullet points will be inside the list item. As it is part of the list item, it will be part of the text and push the text at the start:`},
                                {code: `list-style-position: inside;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `inside`, 
                                                `The bullet points will be inside the list item`
                                            ],
                                            [
                                                `outside`, 
                                                `The bullet points will be outside the list item. This is default`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'listStyleImage', 
                            title: 'list-style-image', 
                            cellDir: [
                                {text: `The list-style-image property replaces the list-item marker with an image.`},
                                {text: (<><b>Note: </b>{"Always specify the list-style-type property in addition. This property is used if the image for some reason is unavailable."}</>)},
                                {code: `list-style-image: url('sqpurple.gif');`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `No image will be displayed. Instead, the list-style-type property will define what type of list marker will be rendered. This is default`
                                            ],
                                            [
                                                `url`, 
                                                `The path to the image to be used as a list-item marker`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'outline', 
                            title: 'outline', 
                            cellDir: [
                                {text: `An outline is a line that is drawn around elements, outside the borders, to make the element "stand out".`},
                                {text: `The outline property is a shorthand property for:`},
                                {list: [
                                    'outline-width', 
                                    'outline-style (required)', 
                                    'outline-color', 
                                ]},
                                {text: `If outline-color is omitted, the color applied will be the color of the text.`},
                                {text: (<><b>Note: </b>{"Outlines differ from borders! Unlike border, the outline is drawn outside the element's border, and may overlap other content. Also, the outline is NOT a part of the element's dimensions; the element's total width and height is not affected by the width of the outline."}</>)},
                                {code: `outline: 2px dashed blue;`, indent: 0},
                            ]
                        },
                        {
                            id: 'outlineWidth', 
                            title: 'outline-width', 
                            cellDir: [
                                {text: `The outline-width specifies the width of an outline.`},
                                {text: (<><b>Note: </b>{"Note: Always declare the outline-style property before the outline-width property. An element must have an outline before you change the width of it."}</>)},
                                {code: `outline-width: thick;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `medium`, 
                                                `Specifies a medium outline. This is default`
                                            ],
                                            [
                                                `thin`, 
                                                `Specifies a thin outline`
                                            ],
                                            [
                                                `thick`, 
                                                `Specifies a thick outline`
                                            ],
                                            [
                                                `length`, 
                                                `Allows you to define the thickness of the outline. Read about length units`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'outlineStyle', 
                            title: 'outline-style', 
                            cellDir: [
                                {text: `An outline is a line that is drawn around elements, outside the borders, to make the element "stand out".`},
                                {text: `The outline-style property specifies the style of an outline.`},
                                {code: `outline-style: dotted;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Specifies no outline. This is default`
                                            ],
                                            [
                                                `hidden`, 
                                                `Specifies a hidden outline`
                                            ],
                                            [
                                                `dotted`, 
                                                `Specifies a dotted outline`
                                            ],
                                            [
                                                `dashed`, 
                                                `Specifies a dashed outline`
                                            ],
                                            [
                                                `solid`, 
                                                `Specifies a solid outline`
                                            ],
                                            [
                                                `double`, 
                                                `Specifies a double outliner`
                                            ],
                                            [
                                                `groove`, 
                                                `Specifies a 3D grooved outline. The effect depends on the outline-color value`
                                            ],
                                            [
                                                `ridge`, 
                                                `Specifies a 3D ridged outline. The effect depends on the outline-color value`
                                            ],
                                            [
                                                `inset`, 
                                                `Specifies a 3D inset outline. The effect depends on the outline-color value`
                                            ],
                                            [
                                                `outset`, 
                                                `Specifies a 3D outset outline. The effect depends on the outline-color value`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'outlineColor', 
                            title: 'outline-color', 
                            cellDir: [
                                {text: `The outline-color property specifies the color of an outline.`},
                                {text: (<><b>Note: </b>{"Always declare the outline-style property before the outline-color property. An element must have an outline before you change the color of it."}</>)},
                                {code: `outline-color: coral;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `invert`, 
                                                `Performs a color inversion. This ensures that the outline is visible, regardless of color background. Note: Browsers are not required to support this value.`
                                            ],
                                            [
                                                `color`, 
                                                `Specifies the color of the outline. Look at CSS Color Values for a complete list of possible color values.`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'outlineOffset', 
                            title: 'outline-offset', 
                            cellDir: [
                                {text: `The outline-offset property adds space between the outline and the edge or border of an element.`},
                                {text: `The space between an element and its outline is transparent.`},
                                {text: `Outlines differ from borders in three ways:`},
                                {list: [
                                    'An outline is a line drawn around elements, outside the border edge', 
                                    'An outline does not take up space', 
                                    'An outline may be non-rectangular', 
                                ]},
                                {code: `outline-offset: 15px;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `length`, 
                                                `The distance the outline is outset from the border edge. Default value is 0`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'textDecoration', 
                            title: 'text-decoration', 
                            cellDir: [
                                {text: `The text-decoration property specifies the decoration added to text, and is a shorthand property for:`},
                                {list: [
                                    'text-decoration-line (required)', 
                                    'text-decoration-color', 
                                    'text-decoration-style', 
                                    'text-decoration-thickness', 
                                ]},
                                {code: `text-decoration: underline overline;`, indent: 0},
                            ]
                        },
                        {
                            id: 'textDecorationLine', 
                            title: 'text-decoration-line', 
                            cellDir: [
                                {text: `The text-decoration-line property sets the kind of text decoration to use (like underline, overline, line-through).`},
                                {text: (<><b>Note: </b>{"You can also combine more than one value, like underline and overline to display lines both under and over the text."}</>)},
                                {code: `text-decoration-line: line-through;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Default value. Specifies no line for the text-decoration`
                                            ],
                                            [
                                                `underline`, 
                                                `Specifies that a line will be displayed under the text`
                                            ],
                                            [
                                                `overline`, 
                                                `Specifies that a line will be displayed over the text`
                                            ],
                                            [
                                                `line-through`, 
                                                `Specifies that a line will be displayed through the text`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'textDecorationColor', 
                            title: 'text-decoration-color', 
                            cellDir: [
                                {text: `The text-decoration-color property specifies the color of the text-decoration (underlines, overlines, linethroughs).`},
                                {code: `text-decoration-color: red;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `color`, 
                                                `Specifies the color of the text-decoration`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'textDecorationStyle', 
                            title: 'text-decoration-style', 
                            cellDir: [
                                {text: `The text-decoration-style property sets the style of the text decoration (like solid, wavy, dotted, dashed, double).`},
                                {code: `text-decoration-style: wavy;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `solid`, 
                                                `Default value. The line will display as a single line`
                                            ],
                                            [
                                                `double`, 
                                                `The line will display as a double line`
                                            ],
                                            [
                                                `dotted`, 
                                                `The line will display as a dotted line`
                                            ],
                                            [
                                                `dashed`, 
                                                `The line will display as a dashed line`
                                            ],
                                            [
                                                `wavy`, 
                                                `The line will display as a wavy line`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'textDecoration-thickness', 
                            title: 'text-decoration-thickness', 
                            cellDir: [
                                {text: `The text-decoration-thickness property specifies the thickness of the decoration line.`},
                                {code: `text-decoration-thickness: 50%;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `The browser chooses the thickness of the decoration line`
                                            ],
                                            [
                                                `from-font`, 
                                                `If a font file contains information about a preferred thickness, use that value. If not, behave as auto`
                                            ],
                                            [
                                                `length/percentage`, 
                                                `Specifies the thickness as a length or %`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'breaksOverflow',
                    title: 'Breaks & Overflow',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'overflow', 
                            title: 'overflow', 
                            cellDir: [
                                {text: `The overflow property specifies what should happen if content overflows an element's box.`},
                                {text: `This property specifies whether to clip content or to add scrollbars when an element's content is too big to fit in a specified area.`},
                                {text: (<><b>Note: </b>{"The overflow property only works for block elements with a specified height."}</>)},
                                {code: `overflow: visible;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `visible`, 
                                                `The overflow is not clipped. It renders outside the element's box. This is default`
                                            ],
                                            [
                                                `hidden`, 
                                                `The overflow is clipped, and the rest of the content will be invisible. Content can be scrolled programmatically (e.g. by setting scrollLeft or scrollTo())`
                                            ],
                                            [
                                                `clip`, 
                                                `The overflow is clipped, and the rest of the content will be invisible. Forbids scrolling, including programmatic scrolling.`
                                            ],
                                            [
                                                `scroll`, 
                                                `The overflow is clipped, but a scroll-bar is added to see the rest of the content`
                                            ],
                                            [
                                                `auto`, 
                                                `If overflow is clipped, a scroll-bar should be added to see the rest of the content`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'overflowX', 
                            title: 'overflow-x', 
                            cellDir: [
                                {text: `The overflow-x property specifies whether to clip the content, add a scroll bar, or display overflow content of a block-level element, when it overflows at the left and right edges.`},
                                {text: (<><b>Tip: </b>{"Use the overflow-y property to determine clipping at the top and bottom edges."}</>)},
                                {code: `overflow-x: visible;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `visible`, 
                                                `The content is not clipped, and it may be rendered outside the left and right edges. This is default`
                                            ],
                                            [
                                                `hidden`, 
                                                `The content is clipped - and no scrolling mechanism is provided`
                                            ],
                                            [
                                                `scroll`, 
                                                `The content is clipped and a scrolling mechanism is provided`
                                            ],
                                            [
                                                `auto`, 
                                                `Should cause a scrolling mechanism to be provided for overflowing boxes`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'overflowY', 
                            title: 'overflow-y', 
                            cellDir: [
                                {text: `The overflow-y property specifies whether to clip the content, add a scroll bar, or display overflow content of a block-level element, when it overflows at the top and bottom edges.`},
                                {text: (<><b>Tio: </b>{"Use the overflow-x property to determine clipping at the left and right edges."}</>)},
                                {code: `overflow-y: visible;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `visible`, 
                                                `The content is not clipped, and it may be rendered outside the content box. This is default`
                                            ],
                                            [
                                                `hidden`, 
                                                `The content is clipped - and no scrolling mechanism is provided`
                                            ],
                                            [
                                                `scroll`, 
                                                `The content is clipped and a scrolling mechanism is provided`
                                            ],
                                            [
                                                `auto`, 
                                                `Should cause a scrolling mechanism to be provided for overflowing boxes`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'wordWrap', 
                            title: 'word-wrap', 
                            cellDir: [
                                {text: `The word-wrap property allows long words to be able to be broken and wrap onto the next line.`},
                                {code: `word-wrap: break-word;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `Break words only at allowed break points. This is default`
                                            ],
                                            [
                                                `break-word`, 
                                                `Allows unbreakable words to be broken`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'wordBreak', 
                            title: 'word-break', 
                            cellDir: [
                                {text: `The word-break property specifies how words should break when reaching the end of a line.`},
                                {code: `word-break: break-all;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `Default value. Uses default line break rules`
                                            ],
                                            [
                                                `break-all`, 
                                                `To prevent overflow, word may be broken at any character`
                                            ],
                                            [
                                                `keep-all`, 
                                                `Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as value "normal"`
                                            ],
                                            [
                                                `break-word`, 
                                                `To prevent overflow, word may be broken at arbitrary points`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'textOverflow', 
                            title: 'text-overflow', 
                            cellDir: [
                                {text: `The text-overflow property specifies how overflowed content that is not displayed should be signaled to the user. It can be clipped, display an ellipsis (...), or display a custom string.`},
                                {text: `Both of the following properties are required for text-overflow:`},
                                {list: [
                                    'white-space: nowrap;', 
                                    'overflow: hidden;', 
                                ]},
                                {code: `white-space: nowrap; `, indent: 0},
                                {code: `overflow: hidden;`, indent: 0},
                                {code: `text-overflow: ellipsis;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `clip`, 
                                                `Default value. The text is clipped and not accessible`
                                            ],
                                            [
                                                `ellipsis`, 
                                                `Render an ellipsis ("...") to represent the clipped text`
                                            ],
                                            [
                                                `string`, 
                                                `Render the given string to represent the clipped text`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'overflowWrap', 
                            title: 'overflow-wrap', 
                            cellDir: [
                                {text: `The overflow-wrap property specifies whether or not the browser can break lines with long words, if they overflow the container.`},
                                {code: `overflow-wrap: break-word;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `Long words will not break, even if they overflow the container. This is default`
                                            ],
                                            [
                                                `anywhere`, 
                                                `Long words will break if they overflow the container`
                                            ],
                                            [
                                                `break-word`, 
                                                `Long words will break if they overflow the container`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'hyphens', 
                            title: 'hyphens', 
                            cellDir: [
                                {text: `The hyphens property defines whether hyphenation is allowed to create more soft wrap opportunities within a line of text.`},
                                {code: `hyphens: auto;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Words are not hyphenated`
                                            ],
                                            [
                                                `manual`, 
                                                `Default. Words are only hyphenated at &hyphen; or &shy; (if needed)`
                                            ],
                                            [
                                                `auto`, 
                                                `Words are hyphenated where the algorithm is deciding (if needed)`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'formattingOther',
                    title: 'Formatting (Other)',
                    titleDir: [],
                    RowDir: [
                                        
                        {
                            id: 'textTransform', 
                            title: 'text-transform', 
                            cellDir: [
                                {text: `The text-transform property controls the capitalization of text.`},
                                {code: `text-transform: capitalize;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `No capitalization. The text renders as it is. This is default`
                                            ],
                                            [
                                                `capitalize`, 
                                                `Transforms the first character of each word to uppercase`
                                            ],
                                            [
                                                `uppercase`, 
                                                `Transforms all characters to uppercase`
                                            ],
                                            [
                                                `lowercase`, 
                                                `Transforms all characters to lowercase`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'quotes', 
                            title: 'quotes', 
                            cellDir: [
                                {text: `The quotes property sets the type of quotation marks for quotations.`},
                                {code: `quotes: "'" "'";`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Specifies that the "open-quote" and "close-quote" values of the "content" property will not produce any quotation marks`
                                            ],
                                            [
                                                `string string string string`, 
                                                `Specifies which quotation marks to use. The first two values specifies the first level of quotation embedding, the next two values specifies the next level of quote embedding, etc`
                                            ],
                                                                                        
                                        ]

                                    }
                                },
                                {text: `Quotation Mark Characters`},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `"`, 
                                                `double quote`, 
                                            ],
                                            [
                                                `'`, 
                                                `single quote`, 
                                            ],
                                            [
                                                `‹`, 
                                                `single, left angle quote`, 
                                            ],
                                            [
                                                `›`, 
                                                `single, right angle quote`, 
                                            ],
                                            [
                                                `«`, 
                                                `double, left angle quote`, 
                                            ],
                                            [
                                                `»`, 
                                                `double, right angle quote`, 
                                            ],
                                            [
                                                `‘`, 
                                                `left quote (single high-6)`, 
                                            ],
                                            [
                                                `’`, 
                                                `right quote (single high-9)`, 
                                            ],
                                            [
                                                `“`, 
                                                `left quote (double high-6)`, 
                                            ],
                                            [
                                                `”`, 
                                                `right quote (double high-9)`, 
                                            ],
                                            [
                                                `„`, 
                                                `double quote (double low-9)`, 
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'textShadow', 
                            title: 'text-shadow', 
                            cellDir: [
                                {text: `The text-shadow property adds shadow to text.`},
                                {text: `This property accepts a comma-separated list of shadows to be applied to the text.`},
                                {code: `text-shadow: 2px 2px #ff0000;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `h-shadow`, 
                                                `Required. The position of the horizontal shadow. Negative values are allowed`
                                            ],
                                            [
                                                `v-shadow`, 
                                                `Required. The position of the vertical shadow. Negative values are allowed`
                                            ],
                                            [
                                                `blur-radius`, 
                                                `Optional. The blur radius. Default value is 0`
                                            ],
                                            [
                                                `color`, 
                                                `Optional. The color of the shadow. Look at CSS Color Values for a complete list of possible color values`
                                            ],
                                            [
                                                `none`, 
                                                `Default value. No shadow`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'direction', 
                            title: 'direction', 
                            cellDir: [
                                {text: `The direction property specifies the text direction/writing direction within a block-level element.`},
                                {text: (<><b>Tip: </b>{'Use this property together with the unicode-bidi property to set or return whether the text should be overridden to support multiple languages in the same document.'}</>)},
                                {code: `direction: rtl;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `ltr`, 
                                                `Text direction goes from left-to-right. This is default`
                                            ],
                                            [
                                                `rtl`, 
                                                `Text direction goes from right-to-left`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'writingMode', 
                            title: 'writing-mode', 
                            cellDir: [
                                {text: `The writing-mode property specifies whether lines of text are laid out horizontally or vertically.`},
                                {code: `writing-mode: vertical-rl;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `horizontal-tb`, 
                                                `Let the content flow horizontally from left to right, vertically from top to bottom`
                                            ],
                                            [
                                                `vertical-rl`, 
                                                `Let the content flow vertically from top to bottom, horizontally from right to left`
                                            ],
                                            [
                                                `vertical-lr`, 
                                                `Let the content flow vertically from top to bottom, horizontally from left to right`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'userSelect', 
                            title: 'user-select', 
                            cellDir: [
                                {text: `The user-select property specifies whether the text of an element can be selected.`},
                                {code: `user-select: none;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Default. Text can be selected if the browser allows it`
                                            ],
                                            [
                                                `none`, 
                                                `Prevent text selection`
                                            ],
                                            [
                                                `text`, 
                                                `The text can be selected by the user`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'animation',
                    title: 'Animation',
                    titleDir: [],
                    RowDir: [
                        {
                            id: '@keyframes', 
                            title: '@keyframes', 
                            cellDir: [
                                {text: `The @keyframes rule specifies the animation code.`},
                                {text: `The animation is created by gradually changing from one set of CSS styles to another.`},
                                {text: `During the animation, you can change the set of CSS styles many times.`},
                                {text: `Specify when the style change will happen in percent, or with the keywords "from" and "to", which is the same as 0% and 100%. 0% is the beginning of the animation, 100% is when the animation is complete.`},
                                {text: (<><b>Tip: </b>{'For best browser support, you should always define both the 0% and the 100% selectors.'}</>)},
                                {text: (<><b>Note: </b>{'Use the animation properties to control the appearance of the animation, and also to bind the animation to selectors.'}</>)},
                                {text: (<><b>Note: </b>{'The !important rule is ignored in a keyframe (See last example on this page).'}</>)},
                                {code: `@keyframes mymove {`, indent: 0},
                                {code: `from {top: 0px;}`, indent: 1},
                                {code: `to {top: 200px;}`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `animationname`, 
                                                `Required. Defines the name of the animation.`
                                            ],
                                            [
                                                `keyframes-selector`, 
                                                (<>
                                                Required. Percentage of the animation duration.<br/>
                                                Legal values:<br/>
                                                0-100%<br/>
                                                from (same as 0%)<br/>
                                                to (same as 100%)<br/>
                                                <b>Note: </b>You can have many keyframes-selectors in one animation.
                                                </>)
                                            ],
                                            [
                                                `css-styles`, 
                                                `Required. One or more legal CSS style properties`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'animation', 
                            title: 'animation', 
                            cellDir: [
                                {text: `The animation property is a shorthand property for:`},
                                {list: [
                                    'animation-name', 
                                    'animation-duration', 
                                    'animation-timing-function', 
                                    'animation-delay', 
                                    'animation-iteration-count', 
                                    'animation-direction', 
                                    'animation-fill-mode', 
                                    'animation-play-state', 
                                ]},
                                {text: (<><b>Note: </b>{'Always specify the animation-duration property, otherwise the duration is 0, and will never be played.'}</>)},
                                {code: `animation: mymove 5s infinite;`, indent: 0},
                            ]
                        },
                        {
                            id: 'animationName', 
                            title: 'animation-name', 
                            cellDir: [
                                {text: `The animation-name property specifies a name for the @keyframes animation.`},
                                {code: `animation-name: mymove;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `keyframename`, 
                                                `Specifies the name of the keyframe you want to bind to the selector`
                                            ],
                                            [
                                                `none`, 
                                                `Default value. Specifies that there will be no animation (can be used to override animations coming from the cascade)`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'animationDuration', 
                            title: 'animation-duration', 
                            cellDir: [
                                {text: `The animation-duration property defines how long an animation should take to complete one cycle.`},
                                {code: `animation-duration: 3s;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `time`, 
                                                `Specifies the length of time an animation should take to complete one cycle. This can be specified in seconds or milliseconds. Default value is 0, which means that no animation will occur`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'animationTimingFunction', 
                            title: 'animation-timing-function', 
                            cellDir: [
                                {text: `The animation-timing-function specifies the speed curve of an animation.`},
                                {text: `The speed curve defines the TIME an animation uses to change from one set of CSS styles to another.`},
                                {text: `The speed curve is used to make the changes smoothly.`},
                                {code: `animation-timing-function: linear;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `linear`, 
                                                `The animation has the same speed from start to end`
                                            ],
                                            [
                                                `ease`, 
                                                `Default value. The animation has a slow start, then fast, before it ends slowly`
                                            ],
                                            [
                                                `ease-in`, 
                                                `The animation has a slow start`
                                            ],
                                            [
                                                `ease-out`, 
                                                `The animation has a slow end`
                                            ],
                                            [
                                                `ease-in-out`, 
                                                `The animation has both a slow start and a slow end`
                                            ],
                                            [
                                                `step-start`, 
                                                `Equivalent to steps(1, start)`
                                            ],
                                            [
                                                `step-end`, 
                                                `Equivalent to steps(1, end)`
                                            ],
                                            [
                                                `steps(int,start|end)`, 
                                                `Specifies a stepping function, with two parameters. The first parameter specifies the number of intervals in the function. It must be a positive integer (greater than 0). The second parameter, which is optional, is either the value "start" or "end", and specifies the point at which the change of values occur within the interval. If the second parameter is omitted, it is given the value "end"`
                                            ],
                                            [
                                                `cubic-bezier(n,n,n,n)`, 
                                                (<>
                                                Define your own values in the cubic-bezier function<br/>
                                                Possible values are numeric values from 0 to 1
                                                </>)
                                                
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'animationDelay', 
                            title: 'animation-delay', 
                            cellDir: [
                                {text: `The animation-delay property specifies a delay for the start of an animation.`},
                                {text: `The animation-delay value is defined in seconds (s) or milliseconds (ms).`},
                                {code: `animation-delay: 2s;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `time`, 
                                                `Optional. Defines the number of seconds (s) or milliseconds (ms) to wait before the animation will start. Default value is 0. Negative values are allowed. If you use negative values, the animation will start as if it had already been playing for Nseconds/milliseconds.`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'animationIterationCount', 
                            title: 'animation-iteration-count', 
                            cellDir: [
                                {text: `The animation-iteration-count property specifies the number of times an animation should be played.`},
                                {code: `animation-iteration-count: 2;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `number`, 
                                                `A number that defines how many times an animation should be played. Default value is 1`
                                            ],
                                            [
                                                `infinite`, 
                                                `Specifies that the animation should be played infinite times (for ever)`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'animationDirection', 
                            title: 'animation-direction', 
                            cellDir: [
                                {text: `The animation-direction property defines whether an animation should be played forwards, backwards or in alternate cycles.`},
                                {code: `animation-direction: alternate;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `Default value. The animation is played as normal (forwards)`
                                            ],
                                            [
                                                `reverse`, 
                                                `The animation is played in reverse direction (backwards)`
                                            ],
                                            [
                                                `alternate`, 
                                                `The animation is played forwards first, then backwards`
                                            ],
                                            [
                                                `alternate-reverse`, 
                                                `The animation is played backwards first, then forwards`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'animationFill-mode', 
                            title: 'animation-fill-mode', 
                            cellDir: [
                                {text: `The animation-fill-mode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).`},
                                {text: `CSS animations do not affect the element before the first keyframe is played or after the last keyframe is played. The animation-fill-mode property can override this behavior.`},
                                {code: `animation-fill-mode: forwards;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Default value. Animation will not apply any styles to the element before or after it is executing`
                                            ],
                                            [
                                                `forwards`, 
                                                `The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count)`
                                            ],
                                            [
                                                `backwards`, 
                                                `The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period`
                                            ],
                                            [
                                                `both`, 
                                                `The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'animationPlayState', 
                            title: 'animation-play-state', 
                            cellDir: [
                                {text: `The animation-play-state property specifies whether the animation is running or paused.`},
                                {text: (<><b>Note: </b>{'Use this property in a JavaScript to pause an animation in the middle of a cycle.'}</>)},
                                {code: `animation-play-state: paused;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `paused`, 
                                                `Specifies that the animation is paused`
                                            ],
                                            [
                                                `running`, 
                                                `Default value. Specifies that the animation is running`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'transformation',
                    title: 'Transformation',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'transform', 
                            title: 'transform', 
                            cellDir: [
                                {text: `The transform property applies a 2D or 3D transformation to an element. This property allows you to rotate, scale, move, skew, etc., elements.`},
                                {code: `transform: rotate(20deg);`, indent: 0},
                                {code: `transform: skewY(20deg);`, indent: 0},
                                {code: `transform: scaleY(1.5);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Defines that there should be no transformation`
                                            ],
                                            [
                                                `matrix(n,n,n,n,n,n)`, 
                                                `Defines a 2D transformation, using a matrix of six values`
                                            ],
                                            [
                                                `matrix3d
                                                (n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)`, 
                                                `Defines a 3D transformation, using a 4x4 matrix of 16 values`
                                            ],
                                            [
                                                `translate(x,y)`, 
                                                `Defines a 2D translation`
                                            ],
                                            [
                                                `translate3d(x,y,z)`, 
                                                `Defines a 3D translation`
                                            ],
                                            [
                                                `translateX(x)`, 
                                                `Defines a translation, using only the value for the X-axis`
                                            ],
                                            [
                                                `translateY(y)`, 
                                                `Defines a translation, using only the value for the Y-axis`
                                            ],
                                            [
                                                `translateZ(z)`, 
                                                `Defines a 3D translation, using only the value for the Z-axis`
                                            ],
                                            [
                                                `scale(x,y)`, 
                                                `Defines a 2D scale transformation`
                                            ],
                                            [
                                                `scale3d(x,y,z)`, 
                                                `Defines a 3D scale transformation`
                                            ],
                                            [
                                                `scaleX(x)`, 
                                                `Defines a scale transformation by giving a value for the X-axis`
                                            ],
                                            [
                                                `scaleY(y)`, 
                                                `Defines a scale transformation by giving a value for the Y-axis`
                                            ],
                                            [
                                                `scaleZ(z)`, 
                                                `Defines a 3D scale transformation by giving a value for the Z-axis`
                                            ],
                                            [
                                                `rotate(angle)`, 
                                                `Defines a 2D rotation, the angle is specified in the parameter`
                                            ],
                                            [
                                                `rotate3d(x,y,z,angle)`, 
                                                `Defines a 3D rotation`
                                            ],
                                            [
                                                `rotateX(angle)`, 
                                                `Defines a 3D rotation along the X-axis`
                                            ],
                                            [
                                                `rotateY(angle)`, 
                                                `Defines a 3D rotation along the Y-axis`
                                            ],
                                            [
                                                `rotateZ(angle)`, 
                                                `Defines a 3D rotation along the Z-axis`
                                            ],
                                            [
                                                `skew(x-angle,y-angle)`, 
                                                `Defines a 2D skew transformation along the X- and the Y-axis`
                                            ],
                                            [
                                                `skewX(angle)`, 
                                                `Defines a 2D skew transformation along the X-axis`
                                            ],
                                            [
                                                `skewY(angle)`, 
                                                `Defines a 2D skew transformation along the Y-axis`
                                            ],
                                            [
                                                `perspective(n)`, 
                                                `Defines a perspective view for a 3D transformed element`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'transformOrigin', 
                            title: 'transform-origin', 
                            cellDir: [
                                {text: `The transform-origin property allows you to change the position of transformed elements.`},
                                {text: `2D transformations can change the x- and y-axis of an element. 3D transformations can also change the z-axis of an element.`},
                                {text: (<><b>Note: </b>{'This property must be used together with the transform property.'}</>)},
                                {code: `transform-origin: 20% 40%;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `x-axis`, 
                                                (<>
                                                Defines where the view is placed at the x-axis.<br/>
                                                <b>Possible values: </b>left, center, right, length, %
                                                </>)
                                            ],
                                            [
                                                `y-axis`, 
                                                (<>
                                                Defines where the view is placed at the y-axis.<br/>
                                                <b>Possible values: </b>top, center, bottom, length, %
                                                </>)
                                            ],
                                            [
                                                `z-axis`, 
                                                (<>
                                                Defines where the view is placed at the z-axis (for 3D transformations).<br/>
                                                <b>Possible values: </b>length
                                                </>)
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'transformStyle', 
                            title: 'transform-style', 
                            cellDir: [
                                {text: `The transform-style property specifies how nested elements are rendered in 3D space.`},
                                {text: (<><b>Note: </b>{'This property must be used together with the transform property.'}</>)},
                                {code: `transform-style: preserve-3d;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `flat`, 
                                                `Specifies that child elements will NOT preserve its 3D position. This is default`
                                            ],
                                            [
                                                `preserve-3d`, 
                                                `Specifies that child elements will preserve its 3D position`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'transition',
                    title: 'Transition',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'transition', 
                            title: 'transition', 
                            cellDir: [
                                {text: `The transition property is a shorthand property for:`},
                                {list: [
                                    'transition-property', 
                                    'transition-duration', 
                                    'transition-timing-function', 
                                    'transition-delay', 
                                ]},
                                {text: (<><b>Note: </b>{'Always specify the transition-duration property, otherwise the duration is 0s, and the transition will have no effect.'}</>)},
                                {code: `transition: width 2s;`, indent: 0},
                            ]
                        },
                        {
                            id: 'transitionProperty', 
                            title: 'transition-property', 
                            cellDir: [
                                {text: `The transition-property property specifies the name of the CSS property the transition effect is for (the transition effect will start when the specified CSS property changes).`},
                                {text: (<><b>Tip: </b>{'A transition effect could typically occur when a user hover over an element.'}</>)},
                                {code: `transition-property: width;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `No property will get a transition effect`
                                            ],
                                            [
                                                `all`, 
                                                `Default value. All properties will get a transition effect`
                                            ],
                                            [
                                                `property`, 
                                                `Defines a comma separated list of CSS property names the transition effect is for`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'transitionDuration', 
                            title: 'transition-duration', 
                            cellDir: [
                                {text: `The transition-duration property specifies how many seconds (s) or milliseconds (ms) a transition effect takes to complete.`},
                                {code: `transition-duration: 5s;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `time`, 
                                                `Specifies how many seconds or milliseconds a transition effect takes to complete. Default value is 0s, meaning there will be no effect`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'transitionTimingFunction', 
                            title: 'transition-timing-function', 
                            cellDir: [
                                {text: `The transition-timing-function property specifies the speed curve of the transition effect.`},
                                {text: `This property allows a transition effect to change speed over its duration.`},
                                {code: `transition-timing-function: linear;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `ease`, 
                                                `Default value. Specifies a transition effect with a slow start, then fast, then end slowly (equivalent to cubic-bezier(0.25,0.1,0.25,1))`
                                            ],
                                            [
                                                `linear`, 
                                                `Specifies a transition effect with the same speed from start to end (equivalent to cubic-bezier(0,0,1,1))`
                                            ],
                                            [
                                                `ease-in`, 
                                                `Specifies a transition effect with a slow start (equivalent to cubic-bezier(0.42,0,1,1))`
                                            ],
                                            [
                                                `ease-out`, 
                                                `Specifies a transition effect with a slow end (equivalent to cubic-bezier(0,0,0.58,1))`
                                            ],
                                            [
                                                `ease-in-out`, 
                                                `Specifies a transition effect with a slow start and end (equivalent to cubic-bezier(0.42,0,0.58,1))`
                                            ],
                                            [
                                                `step-start`, 
                                                `Equivalent to steps(1, start)`
                                            ],
                                            [
                                                `step-end`, 
                                                `Equivalent to steps(1, end)`
                                            ],
                                            [
                                                `steps(int,start|end)`, 
                                                `Specifies a stepping function, with two parameters. The first parameter specifies the number of intervals in the function. It must be a positive integer (greater than 0). The second parameter, which is optional, is either the value "start" or "end", and specifies the point at which the change of values occur within the interval. If the second parameter is omitted, it is given the value "end" `
                                            ],
                                            [
                                                `cubic-bezier(n,n,n,n)`, 
                                                `Define your own values in the cubic-bezier function. Possible values are numeric values from 0 to 1`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'transitionDelay', 
                            title: 'transition-delay', 
                            cellDir: [
                                {text: `The transition-delay property specifies when the transition effect will start.`},
                                {text: `The transition-delay value is defined in seconds (s) or milliseconds (ms).`},
                                {code: `transition-delay: 2s;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `time`, 
                                                `Specifies the number of seconds or milliseconds to wait before the transition effect will start`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                
                {
                    id: 'other',
                    title: 'Other',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'charset', 
                            title: '@charset', 
                            cellDir: [
                                {text: `The @charset rule specifies the character encoding used in the style sheet.`},
                                {text: `The @charset rule must be the first element in the style sheet and not be preceded by any character. If several @charsetrules are defined, only the first one is used. The @charset rule cannot be used inside a style attribute (on an HTML element), or inside the <style> element where the character set of the HTML page is relevant.`},
                                {code: `@charset "UTF-8";`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `charset`, 
                                                `Specifies the character encoding to use`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'fontFace', 
                            title: '@font-face', 
                            cellDir: [
                                {text: `With the @font-face rule, web designers do not have to use one of the "web-safe" fonts anymore.`},
                                {text: `In the @font-face rule you must first define a name for the font (e.g. myFirstFont), and then point to the font file.`},
                                {text: `To use the font for an HTML element, refer to the name of the font (myFirstFont) through the font-family property:`},
                                {code: `@font-face {`, indent: 0},
                                {code: `font-family: myFirstFont;`, indent: 1},
                                {code: `src: url(sansation_light.woff);`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Font Descriptor', 'Value', 'Description'],
                                        body: [
                                            [
                                                `font-family`,
                                                (<>
                                                name
                                                </>), 
                                                `Required. Defines the name of the font.`
                                            ],
                                            [
                                                `src`,
                                                (<>
                                                URL
                                                </>), 
                                                `Required. Defines the URL(s) where the font should be downloaded from`
                                            ],
                                            [
                                                `font-stretch`,
                                                (<>
                                                normal<br/>
                                                condensed<br/>
                                                ultra-condensed<br/>
                                                extra-condensed<br/>
                                                semi-condensed<br/>
                                                expanded<br/>
                                                semi-expanded<br/>
                                                extra-expanded<br/>
                                                ultra-expanded
                                                </>), 
                                                `Optional. Defines how the font should be stretched. Default value is "normal"`
                                            ],
                                            [
                                                `font-style`,
                                                (<>
                                                normal<br/>
                                                italic<br/>
                                                oblique
                                                </>), 
                                                `Optional. Defines how the font should be styled. Default value is "normal"`
                                            ],
                                            [
                                                `font-weight`,
                                                (<>
                                                normal<br/>
                                                bold<br/>
                                                100<br/>
                                                200<br/>
                                                300<br/>
                                                400<br/>
                                                500<br/>
                                                600<br/>
                                                700<br/>
                                                800<br/>
                                                900
                                                </>), 
                                                `Optional. Defines the boldness of the font. Default value is "normal"`
                                            ],
                                            [
                                                `unicode-range`,
                                                (<>
                                                unicode-range
                                                </>), 
                                                `Optional. Defines the range of unicode characters the font supports. Default value is "U+0-10FFFF"`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'import', 
                            title: '@import', 
                            cellDir: [
                                {text: `The @import rule allows you to import a style sheet into another style sheet.`},
                                {text: `The @import rule must be at the top of the document (but after any @charset declaration).`},
                                {text: `The @import rule also supports media queries, so you can allow the import to be media-dependent.`},
                                {code: `@import "navigation.css"; /* Using a string */`, indent: 0},
                                {text: `or`},
                                {code: `@import url("navigation.css"); /* Using a url */`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `url|string`, 
                                                `A url or a string representing the location of the resource to import. The url may be absolute or relative`
                                            ],
                                            [
                                                `list-of-mediaqueries`, 
                                                `A comma-separated list of media queries conditioning the application of the CSS rules defined in the linked URL`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'media', 
                            title: '@media', 
                            cellDir: [
                                {text: `The @media rule is used in media queries to apply different styles for different media types/devices.`},
                                {text: `Media queries can be used to check many things, such as:`},
                                {list: [
                                    'width and height of the viewport', 
                                    'width and height of the device', 
                                    'orientation (is the tablet/phone in landscape or portrait mode?)', 
                                    'resolution', 
                                ]},
                                {text: `Using media queries are a popular technique for delivering a tailored style sheet (responsive web design) to desktops, laptops, tablets, and mobile phones.`},
                                {text: `You can also use media queries to specify that certain styles are only for printed documents or for screen readers (mediatype: print, screen, or speech).`},
                                {text: `In addition to media types, there are also media features. Media features provide more specific details to media queries, by allowing to test for a specific feature of the user agent or display device. For example, you can apply styles to only those screens that are greater, or smaller, than a certain width.`},
                                {text: (<><b>Syntax:</b></>)},
                                {code: `@media not|only mediatype and (mediafeature and|or|not mediafeature) {`, indent: 0},
                                {code: `CSS-Code;`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example:</b></>)},
                                {code: `@media only screen and (max-width: 600px) {`, indent: 0},
                                {code: `body {`, indent: 1},
                                {code: `background-color: lightblue;`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Media Types</b></>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `all`, 
                                                `Default. Used for all media type devices`
                                            ],
                                            [
                                                `print`, 
                                                `Used for printers`
                                            ],
                                            [
                                                `screen`, 
                                                `Used for computer screens, tablets, smart-phones etc.`
                                            ],
                                            [
                                                `speech`, 
                                                `Used for screenreaders that "reads" the page out loud`
                                            ],

                                        ]

                                    }
                                },
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Media Features</b></>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `any-hover`, 
                                                `Does any available input mechanism allow the user to hover over elements? (added in Media Queries Level 4)`
                                            ],
                                            [
                                                `any-pointer`, 
                                                `Is any available input mechanism a pointing device, and if so, how accurate is it? (added in Media Queries Level 4)`
                                            ],
                                            [
                                                `aspect-ratio`, 
                                                `The ratio between the width and the height of the viewport`
                                            ],
                                            [
                                                `color`, 
                                                `The number of bits per color component for the output device`
                                            ],
                                            [
                                                `color-gamut`, 
                                                `The approximate range of colors that are supported by the user agent and output device (added in Media Queries Level 4)`
                                            ],
                                            [
                                                `color-index`, 
                                                `The number of colors the device can display`
                                            ],
                                            [
                                                `grid`, 
                                                `Whether the device is a grid or bitmap`
                                            ],
                                            [
                                                `height`, 
                                                `The viewport height`
                                            ],
                                            [
                                                `hover`, 
                                                `Does the primary input mechanism allow the user to hover over elements? (added in Media Queries Level 4)`
                                            ],
                                            [
                                                `inverted-colors`, 
                                                `Is the browser or underlying OS inverting colors? (added in Media Queries Level 4)`
                                            ],
                                            [
                                                `light-level`, 
                                                `Current ambient light level (added in Media Queries Level 4)`
                                            ],
                                            [
                                                `max-aspect-ratio`, 
                                                `The maximum ratio between the width and the height of the display area`
                                            ],
                                            [
                                                `max-color`, 
                                                `The maximum number of bits per color component for the output device`
                                            ],
                                            [
                                                `max-color-index`, 
                                                `The maximum number of colors the device can display`
                                            ],
                                            [
                                                `max-height`, 
                                                `The maximum height of the display area, such as a browser window`
                                            ],
                                            [
                                                `max-monochrome`, 
                                                `The maximum number of bits per "color" on a monochrome (greyscale) device`
                                            ],
                                            [
                                                `max-resolution`, 
                                                `The maximum resolution of the device, using dpi or dpcm`
                                            ],
                                            [
                                                `max-width`, 
                                                `The maximum width of the display area, such as a browser window (Used Primarily)`
                                            ],
                                            [
                                                `min-aspect-ratio`, 
                                                `The minimum ratio between the width and the height of the display area`
                                            ],
                                            [
                                                `min-color`, 
                                                `The minimum number of bits per color component for the output device`
                                            ],
                                            [
                                                `min-color-index`, 
                                                `The minimum number of colors the device can display`
                                            ],
                                            [
                                                `min-height`, 
                                                `The minimum height of the display area, such as a browser window`
                                            ],
                                            [
                                                `min-monochrome`, 
                                                `The minimum number of bits per "color" on a monochrome (greyscale) device`
                                            ],
                                            [
                                                `min-resolution`, 
                                                `The minimum resolution of the device, using dpi or dpcm`
                                            ],
                                            [
                                                `min-width`, 
                                                `The minimum width of the display area, such as a browser window`
                                            ],
                                            [
                                                `monochrome`, 
                                                `The number of bits per "color" on a monochrome (greyscale) device`
                                            ],
                                            [
                                                `orientation`, 
                                                `The orientation of the viewport (landscape or portrait mode)`
                                            ],
                                            [
                                                `overflow-block`, 
                                                `How does the output device handle content that overflows the viewport along the block axis (added in Media Queries Level 4)`
                                            ],
                                            [
                                                `overflow-inline`, 
                                                `Can content that overflows the viewport along the inline axis be scrolled (added in Media Queries Level 4)`
                                            ],
                                            [
                                                `pointer`, 
                                                `Is the primary input mechanism a pointing device, and if so, how accurate is it? (added in Media Queries Level 4)`
                                            ],
                                            [
                                                `resolution`, 
                                                `The resolution of the output device, using dpi or dpcm`
                                            ],
                                            [
                                                `scan`, 
                                                `The scanning process of the output device`
                                            ],
                                            [
                                                `scripting`, 
                                                `Is scripting (e.g. JavaScript) available? (added in Media Queries Level 4)`
                                            ],
                                            [
                                                `update`, 
                                                `How quickly can the output device modify the appearance of the content (added in Media Queries Level 4)`
                                            ],
                                            [
                                                `width`, 
                                                `The viewport width`
                                            ],
                                        ]

                                    }
                                }
                                
                            ]
                        },
                        {
                            id: 'allall', 
                            title: 'all', 
                            cellDir: [
                                {text: `The all property resets all properties, apart from unicode-bidi and direction, to their initial or inherited value.`},
                                {code: `all: initial;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [                               
                                            [
                                                `initial`, 
                                                `Changes all the properties applied to the element or the element's parent to their initial value`
                                            ],
                                            [
                                                `inherit`, 
                                                `Changes all the properties applied to the element or the element's parent to their parent value`
                                            ],
                                            [
                                                `unset`, 
                                                `Changes all the properties applied to the element or the element's parent to their parent value if they are inheritable or to their initial value if not`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'content', 
                            title: 'content', 
                            cellDir: [
                                {text: `The content property is used with the ::before and ::after pseudo-elements, to insert generated content.`},
                                {code: `content: " (" attr(href) ")";`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `normal`, 
                                                `Default value. Sets the content, if specified, to normal, which default is "none" (which is nothing)`
                                            ],
                                            [
                                                `none`, 
                                                `Sets the content, if specified, to nothing`
                                            ],
                                            [
                                                `counter`, 
                                                `Sets the content as a counter`
                                            ],
                                            [
                                                `attr(attribute)`, 
                                                `Sets the content as one of the selector's attribute`
                                            ],
                                            [
                                                `string`, 
                                                `Sets the content to the text you specify`
                                            ],
                                            [
                                                `open-quote`, 
                                                `Sets the content to be an opening quote`
                                            ],
                                            [
                                                `close-quote`, 
                                                `Sets the content to be a closing quote`
                                            ],
                                            [
                                                `no-open-quote`, 
                                                `Removes the opening quote from the content, if specified`
                                            ],
                                            [
                                                `no-close-quote`, 
                                                `Removes the closing quote from the content, if specified`
                                            ],
                                            [
                                                `url(url)`, 
                                                `Sets the content to be some kind of media (an image, a sound, a video, etc.)`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'counterIncrement', 
                            title: 'counter-increment', 
                            cellDir: [
                                {text: `The counter-increment property increases or decreases the value of one or more CSS counters.`},
                                {text: `The counter-increment property is usually used together with the counter-reset property and the content property.`},
                                {code: `body {`, indent: 0},
                                {code: `/* Set "my-sec-counter" to 0 */`, indent: 1},
                                {code: `counter-reset: my-sec-counter;`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `h2::before {`, indent: 0},
                                {code: `/* Increment "my-sec-counter" by 1 */`, indent: 1},
                                {code: `counter-increment: my-sec-counter;`, indent: 1},
                                {code: `content: "Section " counter(my-sec-counter) ". ";`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Default value. No counters will be incremented`
                                            ],
                                            [
                                                `id number`, 
                                                `The id defines which counter to increment. The number sets how much the counter will increment on each occurrence of the selector. The default increment is 1. Negative values are allowed. If idrefers to a counter that has not been initialized by counter-reset, the default initial value is 0`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'counterReset', 
                            title: 'counter-reset', 
                            cellDir: [
                                {text: `The counter-reset property creates or resets one or more CSS counters.`},
                                {text: `The counter-reset property is usually used together with the counter-increment property and the content property.`},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `none`, 
                                                `Default value. No counters will be incremented`
                                            ],
                                            [
                                                `id number`, 
                                                `The id defines which counter to increment. The number sets how much the counter will increment on each occurrence of the selector. The default increment is 1. Negative values are allowed. If idrefers to a counter that has not been initialized by counter-reset, the default initial value is 0`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'imageRendering', 
                            title: 'image-rendering', 
                            cellDir: [
                                {text: `The image-rendering property specifies the type of algorithm to be used for image scaling.`},
                                {text: (<><b>Note: </b>{'This property has no effect on images that are not scaled.'}</>)},
                                {code: `image-rendering: high-quality;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `auto`, 
                                                `Let the browser choose the scaling algorithm. This is default`
                                            ],
                                            [
                                                `smooth`, 
                                                `Use an algorithm that smooth out the colors in the image`
                                            ],
                                            [
                                                `high-quality`, 
                                                `Same as smooth, but with a preference for higher-quality scaling`
                                            ],
                                            [
                                                `crisp-edges`, 
                                                `Use an algorithm that will preserve the contrast and edges in the image`
                                            ],
                                            [
                                                `pixelated`, 
                                                `If the image is scaled up, the nearest-neighbor algorithm is used, so the image will appear as being composed of large pixels. If the image is scaled down, it will be the same as auto`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'unicodeBidi', 
                            title: 'unicode-bidi', 
                            cellDir: [
                                {text: `Used together with the direction property to set or return whether the text should be overridden to support multiple languages in the same document`},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `initial`, 
                                                `Sets this property to its default value.`
                                            ],
                                            [
                                                `inherit`, 
                                                `Inherits this property from its parent element.`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        
                    ] 
                },
                {
                    id: 'cssSelectors',
                    title: 'CSS Selectors',
                    titleDir: [],
                    RowDir: [
                                                            
                        {
                            id: 'class', 
                            title: '.class', 
                            cellDir: [
                                {text: `The .class selector selects elements with a specific class attribute.`},
                                {text: `To select elements with a specific class, write a period (.) character, followed by the name of the class.`},
                                {text: `You can also specify that only specific HTML elements should be affected by a class. To do this, start with the element name, then write the period (.) character, followed by the name of the class (look at Example 1 below).`},
                                {text: `HTML elements can also refer to more than one class (look at Example 2 below).`},
                                {code: `.intro {}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                (<><b>{'.class1.class2'}</b></>), 
                                                `Selects all elements with both name1 and name2 set within its class attribute`
                                            ],
                                            [
                                                (<><b>{'.class1 .class2'}</b></>), 
                                                `Selects all elements with name2 that is a descendant of an element with name1`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'id', 
                            title: '#id', 
                            cellDir: [
                                {text: `The #id selector styles the element with the specified id.`},
                                {code: `#firstname {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'all', 
                            title: '*', 
                            cellDir: [
                                {text: `The * selector selects all elements.`},
                                {text: `The * selector can also select all elements inside another element (See "More Examples").`},
                                {code: `* {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'element', 
                            title: 'element', 
                            cellDir: [
                                {text: `The element selector selects all elements with the specified element name.`},
                                {code: `p {}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                (<><b>{'element.class'}</b></>), 
                                                (<>
                                                The element.class selector is used to select the specified element with the the specified class.<br/>
                                                {'p.intro {}'}
                                                </>)
                                            ],
                                            [
                                                (<><b>{'element,element'}</b></>), 
                                                (<>
                                                To style several elements with the same style, separate each element name with a comma.<br/>
                                                {'h2, p {}'}
                                                </>)
                                            ],
                                            [
                                                (<><b>{'element element'}</b></>), 
                                                (<>
                                                The element element selector is used to select elements inside elements.<br/>
                                                {'div p {}'}
                                                </>)
                                            ],
                                            [
                                                (<><b>{'element>element'}</b></>), 
                                                (<>
                                                {'The element>element selector is used to select elements with a specific parent.'}<br/>
                                                <b>Note: </b>Elements that are not directly a child of the specified parent, are not selected.<br/>
                                                {'div > p {}'}
                                                </>)
                                            ],
                                            [
                                                (<><b>{'element+element'}</b></>), 
                                                (<>
                                                The element+element selector is used to select an element that is directly after another specific element.<br/>
                                                {'div + p {}'}
                                                </>)
                                            ],
                                            [
                                                (<><b>{'element1~element2'}</b></>), 
                                                (<>
                                                The element1~element2 selector matches occurrences of element2 that are preceded by element1.<br/>
                                                Both elements must have the same parent, but element2 does not have to be immediately preceded by element1.<br/>
                                                {'p ~ ul {}'}
                                                </>)
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'attribute', 
                            title: '[attribute]', 
                            cellDir: [
                                {text: `The [attribute] selector is used to select elements with the specified attribute.`},
                                {code: `a[target] {}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                (<><b>{'[attribute=value]'}</b></>), 
                                                (<>
                                                {'The [attribute=value] selector is used to select elements with the specified attribute and value.'}<br/>
                                                {'a[target=_blank] {}'}
                                                </>)
                                            ],
                                            [
                                                (<><b>{'[attribute~=value]'}</b></>), 
                                                (<>
                                                {'The [attribute~=value] selector is used to select elements with an attribute value containing a specified word.'}<br/>
                                                {'[title~=flower] {}'}
                                                </>)
                                            ],
                                            [
                                                (<><b>{'[attribute|=value]'}</b></>), 
                                                (<>
                                                {'The [attribute|=value] selector is used to select elements with the specified attribute starting with the specified value.'}<br/>
                                                <b>Note: </b>{'The value has to be a whole word, either alone, like lang="en", or followed by a hyphen( - ), like lang="en-us".'}<br/>
                                                {'[lang|=en] {}'}
                                                </>)
                                            ],
                                            [
                                                (<><b>{'[attribute^=value]'}</b></>), 
                                                (<>
                                                {'The [attribute^=value] selector matches every element whose attribute value begins with a specified value.'}<br/>
                                                {'div[class^="test"] {}'}
                                                </>)
                                            ],
                                            [
                                                (<><b>{'[attribute$=value]'}</b></>), 
                                                (<>
                                                {'The [attribute$=value] selector matches every element whose attribute value ends with a specified value.'}<br/>
                                                {'div[class$="test"] {}'}
                                                </>)
                                            ],
                                            [
                                                (<><b>{'[attribute*=value]'}</b></>), 
                                                (<>
                                                {'The [attribute*=value] selector matches every element whose attribute value containing a specified value.'}<br/>
                                                {'div[class*="test"] {}'}
                                                </>)
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'active', 
                            title: ':active', 
                            cellDir: [
                                {text: `The :active selector is used to select and style the active link.`},
                                {text: `A link becomes active when you click on it.`},
                                {text: (<><b>Tip: </b>{'The :active selector can be used on all elements, not only links.'}</>)},
                                {text: (<><b>Tip: </b>{'Use the :link selector to style links to unvisited pages, the :visited selector to style links to visited pages, and the :hoverselector to style links when you mouse over them.'}</>)},
                                {text: (<><b>Note: </b>{':active MUST come after :hover (if present) in the CSS definition in order to be effective!'}</>)},
                                {code: `a:active {} `, indent: 0},
                            ]
                        },
                        {
                            id: 'link', 
                            title: ':link', 
                            cellDir: [
                                {text: `The :link selector is used to select unvisited links.`},
                                {text: (<><b>Tip: </b>{'The :link selector does not style links you have already visited.'}</>)},
                                {text: (<><b>Note: </b>{'Use the :visited selector to style links to visited pages, the :hover selector to style links when you mouse over them, and the :active selector to style links when you click on them.'}</>)},
                                {code: `a:link {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'visited', 
                            title: ':visited', 
                            cellDir: [
                                {text: `The :visited selector is used to select visited links.`},
                                {text: `Browsers limits the styles that can be set for a:visited links, due to security issues.`},
                                {text: `Allowed styles are:`},
                                {list: [
                                    'color', 
                                    'background-color', 
                                    'border-color (and border-color for separate sides)', 
                                    'outline color', 
                                    'column-rule-color', 
                                    'the color parts of fill and stroke', 
                                ]},
                                {text: `All other styles are inherited from a:link.`},
                                {code: `a:visited {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'hover', 
                            title: ':hover', 
                            cellDir: [
                                {text: `The :hover selector is used to select elements when you mouse over them.`},
                                {text: (<><b>Tip: </b>{'The :hover selector can be used on all elements, not only on links.'}</>)},
                                {text: (<><b>Note: </b>{':hover MUST come after :link and :visited (if they are present) in the CSS definition, in order to be effective!'}</>)},
                                {code: `a:hover {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'after', 
                            title: '::after', 
                            cellDir: [
                                {text: `The ::after selector inserts something after the content of each selected element(s).`},
                                {text: `Use the content property to specify the content to insert.`},
                                {code: `p::after {`, indent: 0},
                                {code: `content: " - Remember this";`, indent: 1},
                                {code: `}`, indent: 0},
                            ]
                        },
                        {
                            id: 'before', 
                            title: '::before', 
                            cellDir: [
                                {text: `The ::before selector inserts something before the content of each selected element(s).`},
                                {text: `Use the content property to specify the content to insert.`},
                                {code: `p::before { `, indent: 0},
                                {code: `content: "Read this: ";`, indent: 1},
                                {code: `}`, indent: 0},
                            ]
                        },
                        {
                            id: 'firstChild', 
                            title: ':first-child', 
                            cellDir: [
                                {text: `The :first-child selector is used to select the specified selector, only if it is the first child of its parent.`},
                                {code: `p:first-child {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'childN', 
                            title: ':nth-child(n)', 
                            cellDir: [
                                {text: `The :nth-child(n) selector matches every element that is the nth child of its parent.`},
                                {text: `n can be a number, a keyword (odd or even), or a formula (like an + b).`},
                                {code: `div:nth-child(2) {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'nthLastChildN', 
                            title: ':nth-last-child(n)', 
                            cellDir: [
                                {text: `The :nth-last-child(n) selector matches every element that is the nth child, regardless of type, of its parent, counting from the last child.`},
                                {code: `p:nth-last-child(2) {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'lastChild', 
                            title: ':last-child', 
                            cellDir: [
                                {text: `The :last-child selector matches every element that is the last child of its parent.`},
                                {text: (<><b>Tip: </b>{'p:last-child is equal to p:nth-last-child(1).'}</>)},
                                {code: `p:last-child {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'onlyChild', 
                            title: ':only-child', 
                            cellDir: [
                                {text: `The :only-child selector matches every element that is the only child of its parent.`},
                                {code: `p:only-child {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'firstLetter', 
                            title: '::first-letter', 
                            cellDir: [
                                {text: `The ::first-letter selector is used to add a style to the first letter of the specified selector.`},
                                {text: (<><b>Note: </b>{'The following properties can be used with ::first-letter: '}</>)},
                                {list: [
                                    'font properties', 
                                    'color properties', 
                                    'background properties', 
                                    'margin properties', 
                                    'padding properties', 
                                    'border properties', 
                                    'text-decoration', 
                                    "vertical-align (only if float is 'none')", 
                                    'text-transform', 
                                    'line-height', 
                                    'float', 
                                    'clear', 
                                ]},
                                {text: (<><b>Note: </b>{'The ::first-letter selector can only be used with block-level elements.'}</>)},
                                {code: `p::first-letter {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'firstLine', 
                            title: '::first-line', 
                            cellDir: [
                                {text: `The ::first-line selector is used to add a style to the first line of the specified selector.`},
                                {text: (<><b>Note: </b>{'The following properties can be used with ::first-line: '}</>)},
                                {list: [
                                    'font properties', 
                                    'color properties', 
                                    'background properties', 
                                    'word-spacing', 
                                    'letter-spacing', 
                                    'text-decoration', 
                                    'vertical-align', 
                                    'text-transform', 
                                    'line-height', 
                                    'clear', 
                                ]},
                                {text: (<><b>Note: </b>{'The ::first-line selector can only be used with block-level elements.'}</>)},
                                {code: `p::first-line {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'firstOfType', 
                            title: ':first-of-type', 
                            cellDir: [
                                {text: `The :first-of-type selector matches every element that is the first child, of a particular type, of its parent.`},
                                {text: (<><b>Tip: </b>{'This is the same as :nth-of-type(1).'}</>)},
                                {code: `p:first-of-type {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'nthOfTypeN', 
                            title: ':nth-of-type(n)', 
                            cellDir: [
                                {text: `The :nth-of-type(n) selector matches every element that is the nth child, of the same type (tag name), of its parent.`},
                                {code: `div:nth-of-type(2) {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'nthLastOfType', 
                            title: ':nth-last-of-type(n)', 
                            cellDir: [
                                {text: `The :nth-last-of-type(n) selector matches every element that is the nth child, of a particular type, of its parent, counting from the last child.`},
                                {code: `p:nth-last-of-type(2) {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'lastOfType', 
                            title: ':last-of-type', 
                            cellDir: [
                                {text: `The :last-of-type selector matches every element that is the last child, of a particular type, of its parent.`},
                                {text: (<><b>Tip: </b>{'This is the same as :nth-last-of-type(1).'}</>)},
                                {code: `p:last-of-type {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'onlyOfType', 
                            title: ':only-of-type', 
                            cellDir: [
                                {text: `The :only-of-type selector matches every element that is the only child of its type, of its parent.`},
                                {code: `p:only-of-type {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'notS', 
                            title: ':not(selector)', 
                            cellDir: [
                                {text: `The :not(selector) selector matches every element that is NOT the specified element/selector.`},
                                {code: `:not(p) {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'root', 
                            title: ':root', 
                            cellDir: [
                                {text: `The :root selector matches the document's root element.`},
                                {text: `In HTML, the root element is always the html element.`},
                                {code: `:root {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'langL', 
                            title: ':lang(language)', 
                            cellDir: [
                                {text: `The :lang() selector is used to select elements with a lang attribute with the specified value.`},
                                {code: `p:lang(it) {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'fullscreen', 
                            title: ':fullscreen', 
                            cellDir: [
                                {text: `The :fullscreen selector is used to select the element(s) that is in full-screen mode.`},
                                {code: `:fullscreen {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'marker', 
                            title: '::marker', 
                            cellDir: [
                                {text: `The ::marker selector selects the marker of a list item. (Bullet Points)`},
                                {text: `This selector works on any element set to display:list-item.`},
                                {code: `::marker {} `, indent: 0},
                            ]
                        },
                        {
                            id: 'selection', 
                            title: '::selection', 
                            cellDir: [
                                {text: `The ::selection selector matches the portion of an element that is selected by a user (Highlighted).`},
                                {text: `Only a few CSS properties can be applied to the ::selection selector: color, background, cursor, and outline.`},
                                {code: `::selection {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'empty', 
                            title: ':empty', 
                            cellDir: [
                                {text: `The :empty selector matches every element that has no children (including text nodes).`},
                                {code: `p:empty {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'target', 
                            title: ':target', 
                            cellDir: [
                                {text: `URLs with an # followed by an anchor name link to a certain element within a document. The element being linked to is the target element. `},
                                {text: `The :target selector can be used to style the current active target element.`},
                                {code: `:target {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'required', 
                            title: ':required', 
                            cellDir: [
                                {text: `The :required selector selects form elements which are required.`},
                                {text: `Form elements with a required attribute are defined as required.`},
                                {text: (<><b>Note: </b>{'The :required selector only applies to the form elements: input, select and textarea.'}</>)},
                                {code: `input:required {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'optional', 
                            title: ':optional', 
                            cellDir: [
                                {text: `The :optional selector selects form elements which are optional.`},
                                {text: `Form elements with no required attribute are defined as optional.`},
                                {text: (<><b>Note: </b>{'The :optional selector only applies to the form elements: input, select and textarea.'}</>)},
                                {code: `input:optional {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'placeholder', 
                            title: '::placeholder', 
                            cellDir: [
                                {text: `The ::placeholder selector selects form elements with placeholder text, and let you style the placeholder text.`},
                                {text: `The placeholder text is set with the placeholder attribute, which specifies a hint that describes the expected value of an input field.`},
                                {text: (<><b>Tip: </b>{'The default color of the placeholder text is light grey in most browsers.'}</>)},
                                {code: `::placeholder {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'readOnly', 
                            title: ':read-only', 
                            cellDir: [
                                {text: `The :read-only selector selects elements which are "readonly".`},
                                {text: `Form elements with a "readonly" attribute are defined as "readonly".`},
                                {code: `input:read-only {} `, indent: 0},
                            ]
                        },
                        {
                            id: 'readWrite', 
                            title: ':read-write', 
                            cellDir: [
                                {text: `The :read-write selector selects form elements which are "readable" and "writeable".`},
                                {text: `Form elements with no "readonly" attribute, and no "disabled" attribute are defined as "read-" and "write-able".`},
                                {code: `input:read-write {} `, indent: 0},
                            ]
                        },
                        {
                            id: 'focus', 
                            title: ':focus', 
                            cellDir: [
                                {text: `The :focus selector is used to select the element that has focus.`},
                                {text: (<><b>Tip: </b>{'The :focus selector is allowed on elements that accept keyboard events or other user inputs.'}</>)},
                                {code: ``, indent: 0},
                            ]
                        },
                        {
                            id: 'inRange', 
                            title: ':in-range', 
                            cellDir: [
                                {text: `The :in-range selector selects all elements with a value that is within a specified range.`},
                                {text: (<><b>Note: </b>{'The :in-range selector only works for input elements with min and/or max attributes!'}</>)},
                                {text: (<><b>Tip: </b>{'Use the :out-of-range selector to select all elements with a value that is outside a specified range.'}</>)},
                                {code: `input:in-range {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'outOfRange', 
                            title: ':out-of-range', 
                            cellDir: [
                                {text: `The :out-of-range selector selects all elements with a value that is outside a specified range.`},
                                {text: (<><b>Note: </b>{'The :out-of-range selector only works for input elements with min and/or max attributes!'}</>)},
                                {code: `input:out-of-range {} `, indent: 0},
                            ]
                        },
                        {
                            id: 'checked', 
                            title: ':checked', 
                            cellDir: [
                                {text: `The :checked selector matches every checked <input> element (only for radio buttons and checkboxes) and <option> element.`},
                                {code: `input:checked {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'default', 
                            title: ':default', 
                            cellDir: [
                                {text: `The :default selector selects the default form element in a group of related elements.`},
                                {text: `The :default selector can only be used on <button>, <input type="checkbox">, <input type="radio">, and <option> elements`},
                                {code: `input:default {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'disabled', 
                            title: ':disabled', 
                            cellDir: [
                                {text: `The :disabled selector matches every disabled element (mostly used on form elements).`},
                                {code: `input[type="text"]:disabled {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'enabled', 
                            title: ':enabled', 
                            cellDir: [
                                {text: `The :enabled selector matches every enabled element (mostly used on form elements).`},
                                {code: `input[type="text"]:enabled {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'indeterminate', 
                            title: ':indeterminate', 
                            cellDir: [
                                {text: `The :indeterminate selector selects form elements that are in an indeterminate state.`},
                                {text: `The :indeterminate selector can only be used on <input type="checkbox">, <input type="radio">, and <progress> elements.`},
                                {text: (<><b>Note: </b>{'Checkboxes cannot be indeterminate with HTML - it is a property of the checkbox object, which can be set to true by JavaScript.'}</>)},
                                {text: `Radio buttons are indeterminate when all radio buttons with the same name value in the form are unchecked.`},
                                {code: `input:indeterminate {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'valid', 
                            title: ':valid', 
                            cellDir: [
                                {text: `The :valid selector selects form elements with a value that validates according to the element's settings.`},
                                {text: (<><b>Note: </b>{'The :valid selector only works for form elements with limitations, such as input elements with min and max attributes, email fields with a legal email, or number fields with a numeric value, etc.'}</>)},
                                {code: `input:valid {}`, indent: 0},
                            ]
                        },
                        {
                            id: 'invalid', 
                            title: ':invalid', 
                            cellDir: [
                                {text: `The :valid selector selects form elements with a value that validates according to the element's settings.`},
                                {text: (<><b>Note: </b>{'The :valid selector only works for form elements with limitations, such as input elements with min and max attributes, email fields with a legal email, or number fields with a numeric value, etc.'}</>)},
                                {code: `input:valid {}`, indent: 0},
                            ]
                        },
                    ] 
                },
                {
                    id: 'cssFunctions',
                    title: 'CSS Functions',
                    titleDir: [],
                    RowDir: [ 
                        {
                            id: 'attr', 
                            title: 'attr()', 
                            cellDir: [
                                {text: `The attr() function returns the value of an attribute of the selected elements.`},
                                {code: `content: " (" attr(href) ")";`, indent: 0},
                            ]
                        },
                        {
                            id: 'calc', 
                            title: 'calc()', 
                            cellDir: [
                                {text: `The calc() function performs a calculation to be used as the property value.`},
                                {code: `width: calc(100% - 100px);`, indent: 0},
                            ]
                        },
                        {
                            id: 'counter', 
                            title: 'counter()', 
                            cellDir: [
                                {text: `The counter() function returns the current value of the named counter, as a string.`},
                                {code: `counter-increment: section;`, indent: 0},
                                {code: `content: "Section " counter(section) ": ";`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `countername`, 
                                                `Required. The name of the counter (which is the same name used for the counter-reset and counter-increment properties)`
                                            ],
                                            [
                                                `counterstyle`, 
                                                `Optional. The style of the counter (can be a list-style-type value)`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'cubicBezier', 
                            title: 'cubic-bezier()', 
                            cellDir: [
                                {text: `The cubic-bezier() function defines a Cubic Bezier curve.`},
                                {text: `A Cubic Bezier curve is defined by four points P0, P1, P2, and P3. P0 and P3 are the start and the end of the curve and, in CSS these points are fixed as the coordinates are ratios. P0 is (0, 0) and represents the initial time and the initial state, P3 is (1, 1) and represents the final time and the final state.`},
                                {text: `The cubic-bezier() function can be used with the animation-timing-function property and the transition-timing-functionproperty. `},
                                {code: `transition-timing-function: cubic-bezier(0.1, 0.7, 1.0, 0.1);`, indent: 0},
                            ]
                        },
                        {
                            id: 'max', 
                            title: 'max()', 
                            cellDir: [
                                {text: `The max() function uses the largest value, from a comma-separated list of values, as the property value.`},
                                {code: `width: max(50%, 300px);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `value1, value2, ...`, 
                                                `Required. A list of comma-separated values - where the largest value is chosen`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'min', 
                            title: 'min()', 
                            cellDir: [
                                {text: `The min() function uses the smallest value, from a comma-separated list of values, as the property value.`},
                                {code: `width: min(50%, 300px);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `value1, value2, ...`, 
                                                `Required. A list of comma-separated values - where the largest value is chosen`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'var', 
                            title: 'var()', 
                            cellDir: [
                                {text: `The var() function is used to insert the value of a CSS variable.`},
                                {code: `background-color: var(--main-bg-color)`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `:root {`, indent: 0},
                                {code: `--main-bg-color: coral;`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `#div1 {`, indent: 0},
                                {code: `background-color: var(--main-bg-color);`, indent: 1},
                                {code: `padding: 5px;  `, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `name`, 
                                                `Required. The variable name (must start with two dashes)`
                                            ],
                                            [
                                                `value`, 
                                                `Optional. The fallback value (used if the variable is not found)`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'rgb', 
                            title: 'rgb()', 
                            cellDir: [
                                {text: `The rgb() function define colors using the Red-green-blue (RGB) model.`},
                                {text: `An RGB color value is specified with: rgb(red, green, blue). Each parameter defines the intensity of that color and can be an integer between 0 and 255 or a percentage value (from 0% to 100%).`},
                                {text: `For example, the rgb(0,0,255) value is rendered as blue, because the blue parameter is set to its highest value (255) and the others are set to 0.`},
                                {code: `background-color:rgb(0,0,255);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `red`, 
                                                `Defines the intensity of red as an integer between 0 and 255, or as a percentage value between 0% and 100%`
                                            ],
                                            [
                                                `green`, 
                                                `Defines the intensity of green as an integer between 0 and 255, or as a percentage value between 0% and 100%`
                                            ],
                                            [
                                                `blue`, 
                                                `Defines the intensity of blue as an integer between 0 and 255, or as a percentage value between 0% and 100%`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'rgba', 
                            title: 'rgba()', 
                            cellDir: [
                                {text: `The rgba() function define colors using the Red-green-blue-alpha (RGBA) model.`},
                                {text: `RGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity of the color.`},
                                {code: `background-color:rgba(0,0,255,0.3);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `red`, 
                                                `Defines the intensity of red as an integer between 0 and 255, or as a percentage value between 0% and 100%`
                                            ],
                                            [
                                                `green`, 
                                                `Defines the intensity of green as an integer between 0 and 255, or as a percentage value between 0% and 100%`
                                            ],
                                            [
                                                `blue`, 
                                                `Defines the intensity of blue as an integer between 0 and 255, or as a percentage value between 0% and 100%`
                                            ],
                                            [
                                                `alpha`, 
                                                `Defines the opacity as a number between 0.0 (fully transparent) and 1.0 (fully opaque)`
                                            ],
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'hsl', 
                            title: 'hsl()', 
                            cellDir: [
                                {text: `The hsl() function define colors using the Hue-saturation-lightness model (HSL).`},
                                {text: `HSL stands for hue, saturation, and lightness - and represents a cylindrical-coordinate representation of colors.`},
                                {code: `background-color:hsl(120,100%,75%);`, indent: 0},
                            ]
                        },
                        {
                            id: 'hsla', 
                            title: 'hsla()', 
                            cellDir: [
                                {text: `The hsla() function define colors using the Hue-saturation-lightness-alpha model (HSLA).`},
                                {text: `HSLA color values are an extension of HSL color values with an alpha channel - which specifies the opacity of the color.`},
                                {code: `background-color:hsla(120,100%,25%,0.3);`, indent: 0},
                            ]
                        },
                        {
                            id: 'linearGradient', 
                            title: 'linear-gradient()', 
                            cellDir: [
                                {text: `The linear-gradient() function sets a linear gradient as the background image.`},
                                {text: `To create a linear gradient you must define at least two color stops. Color stops are the colors you want to render smooth transitions among. You can also set a starting point and a direction (or an angle) along with the gradient effect.`},
                                {code: `background-image: linear-gradient(to bottom right, red , blue);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `direction`, 
                                                `Defines a starting point and a direction (or an angle) along with the gradient effect.`
                                            ],
                                            [
                                                `color-stop1, color-stop2,...`, 
                                                `Color stops are the colors you want to render smooth transitions among. This value consists of a color value, followed by an optional stop position (a percentage between 0% and 100% or a length along the gradient axis).`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'repeatingLinearGradient', 
                            title: 'repeating-linear-gradient()', 
                            cellDir: [
                                {text: `The repeating-linear-gradient() function is used to repeat linear gradients.`},
                                {code: `background-image: repeating-linear-gradient(red, yellow 10%, green 20%);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `angle`, 
                                                `Defines an angle of direction for the gradient. From 0deg to 360deg. Default is 180deg.`
                                            ],
                                            [
                                                `side-or-corner`, 
                                                `Defines the position of the starting-point of the gradient line. It consists of two keywords: the first one indicates the horizontal side, left or right, and the second one the vertical side, top or bottom. The order is not relevant and each of the keyword is optional.`
                                            ],
                                            [
                                                `color-stop1, color-stop2,...`, 
                                                `Color stops are the colors you want to render smooth transitions among. This value consists of a color value, followed by an optional stop position (a percentage between 0% and 100% or a length along the gradient axis).`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'radialGradient', 
                            title: 'radial-gradient()', 
                            cellDir: [
                                {text: `The radial-gradient() function sets a radial gradient as the background image.`},
                                {text: `A radial gradient is defined by its center.`},
                                {text: `To create a radial gradient you must define at least two color stops.`},
                                {code: `background-image: radial-gradient(red, green, blue);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `shape`, 
                                                (<>
                                                Defines the shape of the gradient.<br/><br/>
                                                Possible values:<br/>
                                                ellipse (default)<br/>
                                                circle

                                                </>)
                                            ],
                                            [
                                                `size`, 
                                                (<>
                                                Defines the size of the gradient.<br/><br/>
                                                Possible values: <br/>
                                                farthest-corner (default)<br/>
                                                closest-side<br/>
                                                closest-corner<br/>
                                                farthest-side
                                                </>)
                                            ],
                                            [
                                                `position`, 
                                                `Defines the position of the gradient. Default is "center"`
                                            ],
                                            [
                                                `start-color, ..., last-color`, 
                                                `Color stops are the colors you want to render smooth transitions among. This value consists of a color value, followed by an optional stop position (a percentage between 0% and 100% or a length along the gradient axis).`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'repeatingRadialGradient', 
                            title: 'repeating-radial-gradient()', 
                            cellDir: [
                                {text: `The repeating-radial-gradient() function is used to repeat radial gradients.`},
                                {code: `background-image: repeating-radial-gradient(red, yellow 10%, green 15%);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `shape`, 
                                                (<>
                                                Defines the shape of the gradient.<br/><br/>
                                                Possible values:<br/>
                                                ellipse (default)<br/>
                                                circle

                                                </>)
                                            ],
                                            [
                                                `size`, 
                                                (<>
                                                Defines the size of the gradient.<br/><br/>
                                                Possible values: <br/>
                                                farthest-corner (default)<br/>
                                                closest-side<br/>
                                                closest-corner<br/>
                                                farthest-side
                                                </>)
                                            ],
                                            [
                                                `position`, 
                                                `Defines the position of the gradient. Default is "center"`
                                            ],
                                            [
                                                `start-color, ..., last-color`, 
                                                `Color stops are the colors you want to render smooth transitions among. This value consists of a color value, followed by an optional stop position (a percentage between 0% and 100% or a length along the gradient axis).`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'conicGradient', 
                            title: 'conic-gradient()', 
                            cellDir: [
                                {text: `The conic-gradient() function sets a conic gradient as the background image.`},
                                {text: `A conic gradient is a gradient with color transitions rotated around a center point.`},
                                {text: `To create a conic gradient you must define at least two color stops.`},
                                {code: `background-image: conic-gradient(red, yellow, green);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `from angle`, 
                                                `Optional. The entire conic gradient is rotated by this angle. Default value is 0deg`
                                            ],
                                            [
                                                `at position`, 
                                                `Optional. Specifies the gradient center of the conic gradient. Default value is center`
                                            ],
                                            [
                                                `color degree, ..., color degree`, 
                                                `Color stops are the colors you want to render smooth transitions among. This value consists of a color value, followed by an optional stop position (a degree between 0 and 360 or a percent between 0% and 100%).`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'repeatingConicGradient', 
                            title: 'repeating-conic-gradient()', 
                            cellDir: [
                                {text: `The repeating-conic-gradient() function is used to repeat conic gradients.`},
                                {code: `background-image: repeating-conic-gradient(red 10%, yellow 20%);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `from angle`, 
                                                `Optional. The entire conic gradient is rotated by this angle. Default value is 0deg`
                                            ],
                                            [
                                                `at position`, 
                                                `Optional. Specifies the gradient center of the conic gradient. Default value is center`
                                            ],
                                            [
                                                `color degree, ..., color degree`, 
                                                `Color stops are the colors you want to render smooth transitions among. This value consists of a color value, followed by an optional stop position (a degree between 0 and 360 or a percent between 0% and 100%).`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
            ]
        },
        {
            id: 'javaScript', 
            title: 'JavaScript', 
            dis: 'Interaction in Web Sites', 
            TableDir: [
                {
                    id: 'arrayObject',
                    title: 'Array Object',
                    titleDir: [
                        {text: `The Array object is used to store multiple values in a single variable:`},
                        {code: `const cars = ["Saab", "Volvo", "BMW"];`, indent: 0},
                        {text: `Array indexes are zero-based: The first element in the array is 0, the second is 1, and so on.`},
                    ],
                    RowDir: [
                        // {
                        //     id: 'arrayProperties', 
                        //     title: 'Array Properties', 
                        //     headCellDir: []
                        // },
                        {
                            id: 'lengthAO', 
                            title: 'length', 
                            cellDir: [
                                {text: `The length property sets or returns the number of elements in an array.`},
                                {text: (<><b>{'Return the length of an array:'}</b></>)},
                                {code: `array.length`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `let length = fruits.length;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'4'}</>), indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'Set the length of an array:'}</b></>)},
                                {code: `array.length = number`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `fruits.length = 2;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Banana,Orange'}</>), indent: 0},
                            ]
                        },
                        // {
                        //     id: 'arraymethods', 
                        //     title: 'Array Methods', 
                        //     headCellDir: []
                        // },
                        {
                            id: 'concat', 
                            title: 'concat()', 
                            cellDir: [
                                {text: `The concat() method concatenates (joins) two or more arrays.`},
                                {text: `The concat() method returns a new array, containing the joined arrays.`},
                                {text: `The concat() method does not change the existing arrays.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array1.concat(array2, array3, ..., arrayX)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const arr1 = ["Cecilie", "Lone"];`, indent: 0},
                                {code: `const arr2 = ["Emil", "Tobias", "Linus"];`, indent: 0},
                                {code: `const arr3 = ["Robin"];`, indent: 0},
                                {code: `const children = arr1.concat(arr2,arr3);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{' Cecilie, Lone, Emil, Tobias, Linus, Robin'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'copyWithin', 
                            title: 'copyWithin()', 
                            cellDir: [
                                {text: `The copyWithin() method copies array elements to another position in the array.`},
                                {text: `The copyWithin() method overwrites the existing values.`},
                                {text: `The copyWithin() method does not add items to the array.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.copyWithin(target, start, end)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango", "Kiwi"];`, indent: 0},
                                {code: `fruits.copyWithin(2, 0, 2);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Banana,Orange,Banana,Orange,Kiwi'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'entries', 
                            title: 'entries()', 
                            cellDir: [
                                {text: `The entries() method returns an Array Iterator object with key/value pairs:`},
                                {text: `The entries() method does not change the original array.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.entries()`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `const f = fruits.entries();`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'0,Banana;1,Orange;2,Apple;3,Mango'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'every', 
                            title: 'every()', 
                            cellDir: [
                                {text: `The every() method executes a function for each array element.`},
                                {text: `The every() method returns true if the function returns true for all elements.`},
                                {text: `The every() method returns false if the function returns false for one element.`},
                                {text: `The every() method does not execute the function for empty elements.`},
                                {text: `The every() method does not change the original array`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.every(function(currentValue, index, arr), thisValue)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const ages = [32, 33, 16, 40];`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `ages.every(checkAge)`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `function checkAge(age) {`, indent: 0},
                                {code: `return age > 18;`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'some', 
                            title: 'some()', 
                            cellDir: [
                                {text: `The some() method checks if any array elements pass a test (provided as a function).`},
                                {text: `The some() method executes the function once for each array element:`},
                                {list: [
                                    'If the function returns true, some() returns true and stops.',
                                    'If the function returns false, some() runs the next function.',
                                ]},
                                {text: `The some() method does not execute the function for empty array elements.`},
                                {text: `The some() method does not change the original array.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.some(function(value, index, arr), this)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const ages = [3, 10, 18, 20];`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `ages.some(checkAdult); `, indent: 0},
                                {code: `function checkAdult(age) {`, indent: 0},
                                {code: `return age > 18;`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'true'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'fill', 
                            title: 'fill()', 
                            cellDir: [
                                {text: `The fill() method fills specified elements in an array with a value.`},
                                {text: `The fill() method overwrites the original array.`},
                                {text: `Start and end position can be specified. If not, all elements will be filled.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.fill(value, start, end)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `fruits.fill("Kiwi", 2, 4);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Banana,Orange,Kiwi,Kiwi'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'filter', 
                            title: 'filter()', 
                            cellDir: [
                                {text: `The filter() method creates a new array filled with elements that pass a test provided by a function.`},
                                {text: `The filter() method does not execute the function for empty elements.`},
                                {text: `The filter() method does not change the original array.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.filter(function(currentValue, index, arr), thisValue)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const ages = [32, 33, 16, 40];`, indent: 0},
                                {code: `const result = ages.filter(checkAdult);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `function checkAdult(age) {`, indent: 0},
                                {code: `return age >= 18;`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'32,33,40'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'find', 
                            title: 'find()', 
                            cellDir: [
                                {text: `The find() method returns the value of the first element that passes a test.`},
                                {text: `The find() method executes a function for each array element.`},
                                {text: `The find() method returns undefined if no elements are found.`},
                                {text: `The find() method does not execute the function for empty elements.`},
                                {text: `The find() method does not change the original array.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.find(function(currentValue, index, arr),thisValue)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const ages = [3, 10, 18, 20];`, indent: 0},
                                {code: `const result = ages.find(checkAge);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `function checkAge(age) {`, indent: 0},
                                {code: `return age > 18;`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'20'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'findIndex', 
                            title: 'findIndex()', 
                            cellDir: [
                                {text: `The findIndex() method executes a function for each array element.`},
                                {text: `The findIndex() method returns the index (position) of the first element that passes a test.`},
                                {text: `The findIndex() method returns -1 if no match is found.`},
                                {text: `The findIndex() method does not execute the function for empty array elements.`},
                                {text: `The findIndex() method does not change the original array.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.findIndex(function(currentValue, index, arr), thisValue)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const ages = [3, 10, 18, 20];`, indent: 0},
                                {code: `const result = ages.find(checkAge);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `function checkAge(age) {`, indent: 0},
                                {code: `return age > 18;`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'3'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'forEach', 
                            title: 'forEach()', 
                            cellDir: [
                                {text: `The forEach() method calls a function for each element in an array.`},
                                {text: `The forEach() method is not executed for empty elements.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.forEach(function(currentValue, index, arr), thisValue)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["apple", "orange", "cherry"];`, indent: 0},
                                {code: `fruits.forEach(myFunction);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'result of each array element'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'map', 
                            title: 'map()', 
                            cellDir: [
                                {text: `map() creates a new array from calling a function for every array element.`},
                                {text: `map() calls a function once for each element in an array.`},
                                {text: `map() does not execute the function for empty elements.`},
                                {text: `map() does not change the original array.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.map(function(currentValue, index, arr), thisValue)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const numbers = [65, 44, 12, 4];`, indent: 0},
                                {code: `const newArr = numbers.map(myFunction)`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `function myFunction(num) {`, indent: 0},
                                {code: `return num * 10;`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'650,440,120,40'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'from', 
                            title: 'from()', 
                            cellDir: [
                                {text: `The Array.from() method returns an array from any object with a length property.`},
                                {text: `The Array.from() method returns an array from any iterable object.`},
                                {text: (<><b>Note: </b>{'Array.from() is a static property of the JavaScript Array object.  You can only use it as Array.from().  Using x.from(), where x is an array will return undefined.'}</>)},
                                {text: (<><b>Syntax</b></>)},
                                {code: `Array.from(object, mapFunction, thisValue)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `Array.from("ABCDEFG")`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'A,B,C,D,E,F,G'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'includes', 
                            title: 'includes()', 
                            cellDir: [
                                {text: `The includes() method returns true if an array contains a specified value.`},
                                {text: `The includes() method returns false if the value is not found.`},
                                {text: `The includes() method is case sensitive.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.includes(element, start)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `fruits.includes("Banana", 3);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'indexOf', 
                            title: 'indexOf()', 
                            cellDir: [
                                {text: `The indexOf() method returns the first index (position) of a specified value.`},
                                {text: `The indexOf() method returns -1 if the value is not found.`},
                                {text: `The indexOf() method starts at a specified index and searches from left to right.`},
                                {text: `By default the search starts at the first element and ends at the last.`},
                                {text: `Negative start values counts from the last element (but still searches from right to left).`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.indexOf(item, start)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango", "Apple"];`, indent: 0},
                                {code: `let index = fruits.indexOf("Apple", 3);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'4'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'lastIndexOf', 
                            title: 'lastIndexOf()', 
                            cellDir: [
                                {text: `The lastIndexOf() method returns the last index (position) of a specified value.`},
                                {text: `The lastIndexOf() method returns -1 if the value is not found.`},
                                {text: `The lastIndexOf() starts at a specified index and searches from right to left.`},
                                {text: `By defalt the search starts at the last element and ends at the first.`},
                                {text: `Negative start values counts from the last element (but still searches from right to left).`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.lastIndexOf(item, start)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Orange", "Apple", "Mango", "Apple", "Banana", "Apple"];`, indent: 0},
                                {code: `let index = fruits.lastIndexOf("Apple");`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'5'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'isArray', 
                            title: 'isArray()', 
                            cellDir: [
                                {text: `The isArray() method returns true if an object is an array, otherwise false.`},
                                {text: (<><b>Note: </b>{'Array.isArray() is a static property of the JavaScript Array object.  You can only use it as Array.isArray().  Using x.isArray(), where x is an array will return undefined.'}</>)},
                                {text: (<><b>Syntax</b></>)},
                                {code: `Array.isArray(obj)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "W3Schools";`, indent: 0},
                                {code: `let result = Array.isArray(text);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'join', 
                            title: 'join()', 
                            cellDir: [
                                {text: `The join() method returns an array as a string.`},
                                {text: `The join() method does not change the original array.`},
                                {text: `Any separator can be specified. The default is comma (,).`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.join(separator)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `let text = fruits.join(" and ");`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Banana and Orange and Apple and Mango'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'keys', 
                            title: 'keys()', 
                            cellDir: [
                                {text: `The keys() method returns an Array Iterator object with the keys of an array.`},
                                {text: `The keys() method does not change the original array.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.keys()`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `const keys = Object.keys(fruits);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'0,1,2,3'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'shift', 
                            title: 'shift()', 
                            cellDir: [
                                {text: `The shift() method removes the first item of an array.`},
                                {text: `The shift() method changes the original array.`},
                                {text: `The shift() method returns the shifted element.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.shift()`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `fruits.shift();`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Banana, fruits = ["Orange", "Apple", "Mango"]'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'unshift', 
                            title: 'unshift()', 
                            cellDir: [
                                {text: `The unshift() method adds new elements to the beginning of an array.`},
                                {text: `The unshift() method overwrites the original array.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.unshift(item1, item2, ..., itemX)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `fruits.unshift("Lemon","Pineapple");`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Lemon,Pineapple,Banana,Orange,Apple,Mango'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'pop', 
                            title: 'pop()', 
                            cellDir: [
                                {text: `The pop() method removes (pops) the last element of an array.`},
                                {text: `The pop() method changes the original array.`},
                                {text: `The pop() method returns the removed element.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.pop()`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `fruits.pop();`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Mango; fruits = ["Banana", "Orange", "Apple"]; '}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'push', 
                            title: 'push()', 
                            cellDir: [
                                {text: `The push() method adds new items to the end of an array.`},
                                {text: `The push() method changes the length of the array.`},
                                {text: `The push() method returns the new length.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.push(item1, item2, ..., itemX)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `fruits.push("Kiwi", "Lemon");`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Banana,Orange,Apple,Mango,Kiwi,Lemon'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'reduce', 
                            title: 'reduce()', 
                            cellDir: [
                                {text: `The reduce() method executes a reducer function for array element.`},
                                {text: `The reduce() method returns a single value: the function's accumulated result.`},
                                {text: `The reduce() method does not execute the function for empty array elements.`},
                                {text: `The reduce() method does not change the original array.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.reduce(function(total, currentValue, currentIndex, arr), initialValue)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const numbers = [15.5, 2.3, 1.1, 4.7];`, indent: 0},
                                {code: `document.getElementById("demo").innerHTML = numbers.reduce(getSum, 0);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `function getSum(total, num) {`, indent: 0},
                                {code: `return total + num;`, indent: 0},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'23.6'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'reduceRight', 
                            title: 'reduceRight()', 
                            cellDir: [
                                {text: `The reduceRight() method executes a reducer function for each array element.`},
                                {text: `The reduceRight() method works from right to left.`},
                                {text: `The reduceRight() method returns a single value: the function's accumulated result.`},
                                {text: `The reduceRight() method does not execute the function for empty elements.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.reduceRight(function(total, currentValue, currentIndex, arr), initialValue)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const numbers = [2, 45, 30, 100];`, indent: 0},
                                {code: `document.getElementById("demo").innerHTML = numbers.reduceRight(getSum);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `function getSum(total, num) {`, indent: 0},
                                {code: `return total - num;`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'23'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'sort', 
                            title: 'sort()', 
                            cellDir: [
                                {text: `The sort() sorts the elements of an array.`},
                                {text: `The sort() overwrites the original array.`},
                                {text: `The sort() sorts the elements as strings in alphabetical and ascending order.`},
                                {text: (<><b>Note: </b>{'Sorting alphabetically works well for strings ("Apple" comes before "Banana"). But, sorting numbers can produce incorrect results. "25" is bigger than "100", because "2" is bigger than "1". You can fix this by providing a "compare function" (See examples below).'}</>)},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.sort(compareFunction)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `fruits.sort();`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Apple,Banana,Mango,Orange'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'reverse', 
                            title: 'reverse()', 
                            cellDir: [
                                {text: `The reverse() method reverses the order of the elements in an array.`},
                                {text: `The reverse() method overwrites the original array.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.reverse()`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `fruits.reverse();`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Mango,Apple,Orange,Banana'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'slice', 
                            title: 'slice()', 
                            cellDir: [
                                {text: `The slice() method returns selected elements in an array, as a new array.`},
                                {text: `The slice() method selects from a given start, up to a (not inclusive) given end.`},
                                {text: `The slice() method does not change the original array.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.slice(start, end)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];`, indent: 0},
                                {code: `const citrus = fruits.slice(1, 3);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Orange,Lemon'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'splice', 
                            title: 'splice()', 
                            cellDir: [
                                {text: `The splice() method adds and/or removes array elements.`},
                                {text: `The splice() method overwrites the original array.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.splice(index, howmany, item1, ....., itemX)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `fruits.splice(2, 1, "Lemon", "Kiwi");`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Banana,Orange,Lemon,Kiwi,Mango'}</>), indent: 0},
                            ]
                        },
                        
                    ] 
                },
                {
                    id: 'Strings',
                    title: 'Strings',
                    titleDir: [
                        {text: `A JavaScript string stores a series of characters like "John Doe".`},
                        {text: `A string can be any text inside double or single quotes:`},
                        {code: `let carName1 = "Volvo XC60";`, indent: 0},
                        {code: `let carName2 = 'Volvo XC60';`, indent: 0},
                        {text: `String indexes are zero-based:`},
                        {text: `The first character is in position 0, the second in 1, and so on.`},
                        {text: (<><b>{'String Properties and Methods'}</b></>)},
                        {text: `Normally, strings like "John Doe", cannot have methods or properties because they are not objects.`},
                        {text: `But with JavaScript, methods and properties are also available to strings, because JavaScript treats strings as objects when executing methods and properties.`},
                    ],
                    RowDir: [
                        // {
                        //     id: 'stringProperties', 
                        //     title: 'String Properties', 
                        //     headCellDir: []
                        // },
                        {
                            id: 'length', 
                            title: 'length', 
                            cellDir: [
                                {text: `The length property returns the length of a string.`},
                                {text: `The length property of an empty string is 0.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.length`, indent: 0},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "Hello World!";`, indent: 0},
                                {code: `let length = text.length;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'12'}</>), indent: 0},
                            ]
                        },
                        
                        // {
                        //     id: 'stringMethods', 
                        //     title: 'String Methods', 
                        //     headCellDir: []
                        // },

                        {
                            id: 'charAt', 
                            title: 'charAt()', 
                            cellDir: [
                                {text: `The charAt() method returns the character at a specified index (position) in a string.`},
                                {text: `The index of the first character is 0, the second 1, ...`},
                                {text: `The index of the last character is string length - 1 (See Examples below).`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.charAt(index)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "HELLO WORLD";`, indent: 0},
                                {code: `let letter = text.charAt(1);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'E'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'charCodeAt', 
                            title: 'charCodeAt()', 
                            cellDir: [
                                {text: `The charCodeAt() method returns the Unicode of the character at a specified index (position) in a string.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.charCodeAt(index)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "HELLO WORLD";`, indent: 0},
                                {code: `let code = text.charCodeAt(1);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'69'}</>), indent: 0},
                            ]
                        },
                        
                        {
                            id: 'concat', 
                            title: 'concat()', 
                            cellDir: [
                                {text: `The concat() method joins two or more strings.`},
                                {text: `The concat() method does not change the existing strings.`},
                                {text: `The concat() method returns a new string.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.concat(string1, string2, ..., stringX)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text1 = "Hello";`, indent: 0},
                                {code: `let text2 = "world!";`, indent: 0},
                                {code: `let result = text1.concat(" ", text2);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Hello world!'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'startsWith', 
                            title: 'startsWith()', 
                            cellDir: [
                                {text: `The startsWith() method returns true if a string starts with a specified string.`},
                                {text: `Otherwise it returns false.`},
                                {text: `The startsWith() method is case sensitive.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.startsWith(searchValue, start)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "Hello world, welcome to the universe.";`, indent: 0},
                                {code: `text.startsWith("world", 6);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'true'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'endsWith', 
                            title: 'endsWith()', 
                            cellDir: [
                                {text: `The endsWith() method returns true if a string ends with a specified string.`},
                                {text: `Otherwise it returns false.`},
                                {text: `The endsWith() method is case sensitive.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.endsWith(searchvalue, length)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "Hello world, welcome to the universe.";`, indent: 0},
                                {code: `text.endsWith("world", 11);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'true'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'fromCharCode', 
                            title: 'fromCharCode()', 
                            cellDir: [
                                {text: `The String.fromCharCode() method converts Unicode values to characters.`},
                                {text: `The String.fromCharCode() is a static method of the String object.`},
                                {text: `The syntax is always String.fromCharCode().`},
                                {text: `You cannot use myString.fromCharCode().`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `String.fromCharCode(n1, n2, ..., nX)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = String.fromCharCode(72, 69, 76, 76, 79);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Hello'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'includes', 
                            title: 'includes()', 
                            cellDir: [
                                {text: `The includes() method returns true if a string contains a specified string.`},
                                {text: `Otherwise it returns false.`},
                                {text: `The includes() method is case sensitive.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.includes(searchvalue, start)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "Hello world, welcome to the universe.";`, indent: 0},
                                {code: `let result = text.includes("world");`, indent: 0},
                                {code: (<><b>Output: </b>{'true'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `let text = "Hello World, welcome to the universe.";`, indent: 0},
                                {code: `let result = text.includes("world", 12);`, indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'indexOf', 
                            title: 'indexOf()', 
                            cellDir: [
                                {text: `The indexOf() method returns the position of the first occurrence of a value in a string.`},
                                {text: `The indexOf() method returns -1 if the value is not found.`},
                                {text: `The indexOf() method is case sensitive`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.indexOf(searchvalue, start)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "Hello world, welcome to the universe.";`, indent: 0},
                                {code: `text.indexOf("e", 5);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'14'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'lastIndexOf', 
                            title: 'lastIndexOf()', 
                            cellDir: [
                                {text: `The lastIndexOf() method returns the index (position) of the last occurrence of a specified value in a string.`},
                                {text: `The lastIndexOf() method searches the string from the end to the beginning.`},
                                {text: `The lastIndexOf() method returns the index from the beginning (position 0).`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.lastIndexOf(searchvalue, start)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "Hello planet earth, you are a great planet.";`, indent: 0},
                                {code: `let result = text.lastIndexOf("planet", 20);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'6'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'localeCompare', 
                            title: 'localeCompare()', 
                            cellDir: [
                                {text: `The localeCompare() method compares two strings in the current locale.`},
                                {text: `The localeCompare() method returns sort order -1, 1, or 0 (for before, after, or equal).`},
                                {text: `The current locale is based on the language settings of the browser.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.localeCompare(compareString)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text1 = "cd";`, indent: 0},
                                {code: `let text2 = "ab";`, indent: 0},
                                {code: `let result = text1.localeCompare(text2);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'1'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'match', 
                            title: 'match()', 
                            cellDir: [
                                {text: `The match() method matches a string against a regular expression **`},
                                {text: `The match() method returns an array with the matches.`},
                                {text: `The match() method returns null if no match is found.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.match(match)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'A seach for "ain" using a string:'}</b></>)},
                                {code: `let text = "The rain in SPAIN stays mainly in the plain"; `, indent: 0},
                                {code: `text.match("ain");`, indent: 0},
                                {code: (<><b>Output: </b>{'ain'}</>), indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'A seach for "ain" using a regular expression:'}</b></>)},
                                {code: `let text = "The rain in SPAIN stays mainly in the plain"; `, indent: 0},
                                {code: `text.match(/ain/);`, indent: 0},
                                {code: (<><b>Output: </b>{'ain'}</>), indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'A global seach for "ain":'}</b></>)},
                                {code: `let text = "The rain in SPAIN stays mainly in the plain"; `, indent: 0},
                                {code: `text.match(/ain/g);`, indent: 0},
                                {code: (<><b>Output: </b>{'ain,ain,ain'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'repeat', 
                            title: 'repeat()', 
                            cellDir: [
                                {text: `The repeat() method returns a string with a number of copies of a string.`},
                                {text: `The repeat() method returns a new string.`},
                                {text: `The repeat() method does not change the original string.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.repeat(count)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "Hello world!";`, indent: 0},
                                {code: `let result = text.repeat(2);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Hello world!Hello world!'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'replace', 
                            title: 'replace()', 
                            cellDir: [
                                {text: `The replace() method searches a string for a value or a regular expression.`},
                                {text: `The replace() method returns a new string with the value(s) replaced.`},
                                {text: `The replace() method does not change the original string.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.replace(searchValue, newValue)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "Visit Microsoft!";`, indent: 0},
                                {code: `let result = text.replace("Microsoft", "W3Schools");`, indent: 0},
                                {code: (<><b>Output: </b>{'Visit W3Schools!'}</>), indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: 'A global replacement:'},
                                {code: `let text = "Mr Blue has a blue house and a blue car";`, indent: 0},
                                {code: `let result = text.replace(/blue/g, "red");`, indent: 0},
                                {code: (<><b>Output: </b>{'Mr Blue has a red house and a red car.'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'search', 
                            title: 'search()', 
                            cellDir: [
                                {text: `The search() method matches a string against a regular expression **`},
                                {text: `The search() method returns the index (position) of the first match.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.search(searchValue)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "Mr. Blue has a blue house";`, indent: 0},
                                {code: `let position = text.search("Blue");`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'4'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'slice', 
                            title: 'slice()', 
                            cellDir: [
                                {text: `The slice() method extracts a part of a string.`},
                                {text: `The slice() method returns the extracted part in a new string.`},
                                {text: `The slice() method does not change the original string.`},
                                {text: `The start and end parameters specifies the part of the string to extract.`},
                                {text: `The first position is 0, the second is 1, ...`},
                                {text: `A negative number selects from the end of the string.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.slice(start, end)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "Hello world!";`, indent: 0},
                                {code: `let result = text.slice(0, 5);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Hello'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'split', 
                            title: 'split()', 
                            cellDir: [
                                {text: `The split() method splits a string into an array of substrings.`},
                                {text: `The split() method returns the new array.`},
                                {text: `The split() method does not change the original string.`},
                                {text: `If (" ") is used as separator, the string is split between words.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.split(separator, limit)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "How are you doing today?";`, indent: 0},
                                {code: `const myArray = text.split(" ");`, indent: 0},
                                {code: (<><b>Output: </b>{'How,are,you,doing,today?'}</>), indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Split the words, and return the second word:`},
                                {code: `let text = "How are you doing today?";`, indent: 0},
                                {code: `const myArray = text.split(" ");`, indent: 0},
                                {code: `let word = myArray[1];`, indent: 0},
                                {code: (<><b>Output: </b>{'are'}</>), indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Split the characters, including spaces:`},
                                {code: `const myArray = text.split("");`, indent: 0},
                                {code: (<><b>Output: </b>{'H,o,w, ,a,r,e, ,y,o,u, ,d,o,i,n,g, ,t,o,d,a,y,?'}</>), indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Use the limit parameter:`},
                                {code: `const myArray = text.split(" ", 3);`, indent: 0},
                                {code: (<><b>Output: </b>{'How,are,you'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'substr', 
                            title: 'substr()', 
                            cellDir: [
                                {text: `The substr() method extracts a part of a string.`},
                                {text: `The substr() method begins at a specified position, and returns a specified number of characters.`},
                                {text: `The substr() method does not change the original string.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.substr(start, length)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "Hello world!";`, indent: 0},
                                {code: `let result = text.substr(1, 4);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'ello'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'substring', 
                            title: 'substring()', 
                            cellDir: [
                                {text: `The substring() method extracts characters, between two indices (positions), from a string, and returns the substring.`},
                                {text: `The substring() method extracts characters from start to end (exclusive).`},
                                {text: `The substring() method does not change the original string.`},
                                {text: `If start is greater than end, arguments are swapped: (4, 1) = (1, 4).`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.substring(start, end)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "Hello world!";`, indent: 0},
                                {code: `let result = text.substring(1, 4);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'ell'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'toLowerCase', 
                            title: 'toLowerCase()', 
                            cellDir: [
                                {text: `The toLowerCase() method converts a string to lowercase letters.`},
                                {text: `The toLowerCase() method does not change the original string.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.toLowerCase()`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "Hello World!";`, indent: 0},
                                {code: `let result = text.toLowerCase();`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'hello world!'}</>), indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                `toLocaleLowerCase()`, 
                                                `The toLocaleLowerCase() returns the same result as toLowerCase(), except for locales that conflict with the regular Unicode case mappings (such as Turkish).`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'toUpperCase', 
                            title: 'toUpperCase()', 
                            cellDir: [
                                {text: `The toUpperCase() method converts a string to uppercase letters.`},
                                {text: `The toUpperCase() method does not change the original string.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.toUpperCase()`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "Hello World!";`, indent: 0},
                                {code: `let result = text.toUpperCase();`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'HELLO WORLD!'}</>), indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                `toLocaleUpperCase()`, 
                                                `The toLocaleUpperCase() returns the same result as toUpperCase(), except for locales that conflict with the regular Unicode case mappings (such as Turkish).`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'trim', 
                            title: 'trim()', 
                            cellDir: [
                                {text: `The trim() method removes whitespace from both sides of a string.`},
                                {text: `The trim() method does not change the original string.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `string.trim()`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: (<>{'let text = "'}&nbsp;&nbsp;&nbsp;&nbsp;{'Hello World!'}&nbsp;&nbsp;&nbsp;&nbsp;{'";'}</>), indent: 0},
                                {code: `let result = text.trim();`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Hello World!'}</>), indent: 0},
                            ]
                        },
                        
                    ] 
                },
                {
                    id: 'Numbers',
                    title: 'Numbers',
                    titleDir: [
                        {text: `JavaScript has only one type of number.`},
                        {text: `Numbers can be written with, or without, decimals:`},
                        {code: `let x = 3.14;     // A number with decimals`, indent: 0},
                        {code: `let y = 34;       // A number without decimals `, indent: 0},
                        {text: (<>&nbsp;</>)},
                        {text: `Extra large or extra small numbers can be written with scientific (exponent) notation:`},
                        {code: `let x = 123e5;    // 12300000`, indent: 0},
                        {code: `let y = 123e-5;   // 0.00123 `, indent: 0},
                    ],
                    RowDir: [
                        {
                            id: 'numberProperties', 
                            title: 'Number Properties', 
                            headCellDir: []
                        },
                        {
                            id: 'maxValue', 
                            title: 'MAX_VALUE', 
                            cellDir: [
                                {text: `Returns the largest number possible in JavaScript`},
                                {text: `Number.MAX_VALUE returns the largest number possible in JavaScript.`},
                                {text: `Number.MAX_VALUE has the value of 1.7976931348623157e+308.`},
                                {text: `Numbers larger than MAX_VALUE are represented as Infinity.`},
                                {text: (<><b>Note: </b>{'MAX_VALUE is a property of the JavaScript Number object. You can only use it as Number.MAX_VALUE. Using x.MAX_VALUE, where x is a variable, will return undefined.'}</>)},
                                {text: (<><b>Syntax</b></>)},
                                {code: `Number.MAX_VALUE`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let x = Number.MAX_VALUE;`, indent: 0},
                                {code: (<><b>Output: </b>{'1.7976931348623157e+308'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'minValue', 
                            title: 'MIN_VALUE', 
                            cellDir: [
                                {text: `Returns the smallest number possible in JavaScript`},
                                {text: `Number.MIN_VALUE returns the smallest number possible in JavaScript.`},
                                {text: `Number.MIN_VALUE has a value of 5e-324.`},
                                {text: (<><b>Note: </b>{'MIN_VALUE is the value closest to 0. Numbers smaller than this are converted to 0. The most negative number is the negative MAX_NUMBER.'}</>)},
                                {text: (<><b>Note: </b>{'MIN_VALUE is a property of the JavaScript Number object. You can only use it as Number.MIN_VALUE. Using x.MIN_VALUE, where x is a variable, will return undefined.'}</>)},
                                {text: (<><b>Syntax</b></>)},
                                {code: `Number.MIN_VALUE`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let x = Number.MIN_VALUE;`, indent: 0},
                                {code: (<><b>Output: </b>{'5e-324'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'positiveInfility', 
                            title: 'POSITIVE_INFINITY', 
                            cellDir: [
                                {text: `POSITIVE_INFINITY returns positive infinity.`},
                                {text: `POSITIVE_INFINITY is "something higher than any other number".`},
                                {text: `You can only use it as Number.POSITIVE_INFINITY.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `Number.POSITIVE_INFINITY`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let x = Number.POSITIVE_INFINITY;`, indent: 0},
                                {code: (<><b>Output: </b>{'Infinity'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'negativeInfinity', 
                            title: 'NEGATIVE_INFINITY', 
                            cellDir: [
                                {text: `Number.NEGATIVE_INFINITY returns negative infinity.`},
                                {text: `Number.NEGATIVE_INFINITY is "a number lower than any other number".`},
                                {text: `You can only use it as Number.NEGATIVE_INFINITY.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `Number.NEGATIVE_INFINITY`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let x = 100;`, indent: 0},
                                {code: `x.NEGATIVE_INFINITY;`, indent: 0},
                                {code: (<><b>Output: </b>{'-Infinity'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'nan', 
                            title: 'NaN', 
                            cellDir: [
                                {text: `In JavaScript, NaN is short for "Not-a-Number".`},
                                {text: `In JavaScript, NaN is a number that is not a legal number.`},
                                {text: `The Global NaN property is the same as the Number.Nan property.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `Number.NaN`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let x = Number.NaN;`, indent: 0},
                                {code: `let x = NaN;`, indent: 0},
                                {code: (<><b>Output: </b>{'NaN; Nan'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'numberMethods', 
                            title: 'Number Methods', 
                            headCellDir: []
                        },
                        {
                            id: 'isFinite', 
                            title: 'isFinite()', 
                            cellDir: [
                                {text: `The Number.isFinite() method returns true if a number is a finite number.`},
                                {text: `Infinite (not finite) numbers are Infinity, -Infinity, or NaN`},
                                {text: `Otherwise it returns false.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `Number.isFinite(value)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `Number.isFinite(123)`, indent: 0},
                                {code: (<><b>Output: </b>{'true'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `Number.isFinite("123")`, indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'isInteger', 
                            title: 'isInteger()', 
                            cellDir: [
                                {text: `The Number.isInteger() method returns true if a value is an integer of the datatype Number.`},
                                {text: `Otherwise it returns false.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `Number.isInteger(value)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `Number.isInteger(5-2);`, indent: 0},
                                {code: (<><b>Output: </b>{'true'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `Number.isInteger(5/2);`, indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'isNaN', 
                            title: 'isNaN()', 
                            cellDir: [
                                {text: `In JavaScript, NaN is short for "Not-a-Number".`},
                                {text: `In JavaScript, NaN is a number that is not a legal number.`},
                                {text: `The Number.isNaN() method returns true if the value is  NaN, and the type is a Number.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `Number.isNaN(value)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `Number.isNaN(123);`, indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `Number.isNaN(-1.23);`, indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `Number.isNaN('123');`, indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `Number.isNaN(0/0);`, indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'isSafeInteger', 
                            title: 'isSafeInteger()', 
                            cellDir: [
                                {text: `The Number.isSafeInteger() method returns trueif a number is a safe integer.`},
                                {text: `Otherwise it returns false.`},
                                {text: `A safe integer is an integer that can be exactly represented as an IEEE-754 double precision number: all integers from (253 - 1) to -(253 - 1).`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `Number.isSafeInteger(value)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `Number.isSafeInteger(5e100);`, indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `Number.isSafeInteger(-123);`, indent: 0},
                                {code: (<><b>Output: </b>{'true'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `Number.isSafeInteger('123');`, indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'toExponential', 
                            title: 'toExponential(x)', 
                            cellDir: [
                                {text: `The toExponential() method converts a number into an exponential notation.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `number.toExponential(x)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let num = 5.56789;`, indent: 0},
                                {code: `let n = num.toExponential();`, indent: 0},
                                {code: (<><b>Output: </b>{'5.56789e+0'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `let num = 5.56789;`, indent: 0},
                                {code: `let n = num.toExponential(3);`, indent: 0},
                                {code: (<><b>Output: </b>{'5.568e+0'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'toFixed', 
                            title: 'toFixed(x)', 
                            cellDir: [
                                {text: `The toFixed() method converts a number to a string.`},
                                {text: `The toFixed() method rounds the string to a specified number of decimals.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `number.toFixed(x)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let num = 5.56789;`, indent: 0},
                                {code: `let n = num.toFixed();`, indent: 0},
                                {code: (<><b>Output: </b>{'6'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `let num = 5.56789;`, indent: 0},
                                {code: `let n = num.toFixed(2);`, indent: 0},
                                {code: (<><b>Output: </b>{'5.57'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'toLocaleString', 
                            title: 'toLocaleString()', 
                            cellDir: [
                                {text: `The toLocaleString() returns a number as a string, using local language format.`},
                                {text: `The language format depends on the locale setup on your computer.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `number.toLocaleString(locales, options)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let num = 1000000;`, indent: 0},
                                {code: `let text = num.toLocaleString();`, indent: 0},
                                {code: (<><b>Output: </b>{'1,000,000'}</>), indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Format a number into a string, using the locale specific of FINLAND:`},
                                {code: `let num = 1000000;`, indent: 0},
                                {code: `let text = num.toLocaleString("fi-FI");`, indent: 0},
                                {code: (<><b>Output: </b>{'1 000 000'}</>), indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Format a number into a currency string, using the locale specific of USA:`},
                                {code: `let num = 1000000;`, indent: 0},
                                {code: `let text = num.toLocaleString("en-US", {style:"currency", currency:"USD"});`, indent: 0},
                                {code: (<><b>Output: </b>{'$1,000,000.00'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'toPrecision', 
                            title: 'toPrecision(x)', 
                            cellDir: [
                                {text: `The toPrecision() method formats a number to a specified length.`},
                                {text: `A decimal point and nulls are added (if needed), to create the specified length.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `number.toPrecision(x)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let num = 0.001658853;`, indent: 0},
                                {code: `num.toPrecision(2);`, indent: 0},
                                {code: `num.toPrecision(3);`, indent: 0},
                                {code: `num.toPrecision(10);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'0.0017; 0.00166; 0.001658853000'}</>), indent: 0},
                            ]
                        },
                        
                    ] 
                },
                {
                    id: 'mathObject',
                    title: 'Math Object',
                    titleDir: [
                        {text: `The Math object allows you to perform mathematical tasks.`},
                        {text: `Math is not a constructor. All properties/methods of Math can be called by using Math as an object, without creating it:`},
                        {code: `let x = Math.PI;`, indent: 0},
                        {code: `let y = Math.sqrt(16);`, indent: 0},
                    ],
                    RowDir: [
                        {
                            id: 'mathObjectProperties', 
                            title: 'Math Object Properties', 
                            headCellDir: [
                                {
                                    table: {
                                        head: ['Property', 'Description'],
                                        body: [
                                                                 
                                            [
                                                `E`, 
                                                `Math.E returns Euler's number, base of natural logarithms, approximately 2.718.`
                                            ],
                                            [
                                                `LN2`, 
                                                `Math.LN2 returns the natural logarithm of 2, approximately 0.693.`
                                            ],
                                            [
                                                `LN10`, 
                                                `Math.LN10 returns the natural logarithm of 10, approximately 2.302.`
                                            ],
                                            [
                                                `LOG2E`, 
                                                `Math.LOG2E returns the base-2 logarithm of E, approximately 1.442.`
                                            ],
                                            [
                                                `LOG10E`, 
                                                `Math.LOG10E returns the base-10 logarithm of E, approximately 0.434.`
                                            ],
                                            [
                                                `PI`, 
                                                `Math.PI returns PI (the ratio of a circle's area to the square of its radius, approximately 3.14)`
                                            ],
                                            [
                                                `SQRT1_2`, 
                                                `Math.SQRT1_2 returns the square root of 1/2, approximately 0.707.`
                                            ],
                                            [
                                                `SQRT2`, 
                                                `Math.SQRT2 returns the square root of 2, approximately 1.414.`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'mathObjectMethods', 
                            title: 'Math Object Methods', 
                            headCellDir: [
                                {
                                    table: {
                                        head: ['Method', 'Description'],
                                        body: [
                                            [
                                                `abs(x)`, 
                                                `The Math.abs() method returns the absolute value of a number.`
                                            ],
                                            [
                                                `max(x, y, z, ..., n)`, 
                                                `Returns the number with the highest value`
                                            ],
                                            [
                                                `min(x, y, z, ..., n)`, 
                                                `Returns the number with the lowest value`
                                            ],
                                            [
                                                `sign(x)`, 
                                                `Returns the sign of a number (checks whether it is positive, negative or zero)`
                                            ],
                                            [
                                                `random()`, 
                                                `Returns a random number between 0 and 1`
                                            ],
                                            [
                                                `clz32(x)`, 
                                                `Returns the number of leading zeros in a 32-bit binary representation of x`
                                            ],
                                            [
                                                `fround(x)`, 
                                                `Returns the nearest (32-bit single precision) float representation of a number`
                                            ],
                                            [
                                                `round(x)`, 
                                                `Rounds x to the nearest integer`
                                            ],
                                            [
                                                `ceil(x) `, 
                                                `Returns x, rounded upwards to the nearest integer`
                                            ],
                                            [
                                                `floor(x)`, 
                                                `Returns x, rounded downwards to the nearest integer`
                                            ],
                                            [
                                                `sqrt(x)`, 
                                                `Returns the square root of x`
                                            ],
                                            [
                                                `cbrt(x)`, 
                                                `Returns the cubic root of x`
                                            ],
                                            [
                                                `pow(x, y)`, 
                                                `Returns the value of x to the power of y`
                                            ],
                                            [
                                                `exp(x)`, 
                                                `Returns the value of Ex`
                                            ],
                                            [
                                                `expm1(x)`, 
                                                `Returns the value of Ex minus 1`
                                            ],
                                            [
                                                `log(x)`, 
                                                `Returns the natural logarithmof x`
                                            ],
                                            [
                                                `log2(x)`, 
                                                `Returns the base-2 logarithm of x`
                                            ],
                                            [
                                                `log10(x)`, 
                                                `Returns the base-10 logarithm of x`
                                            ],
                                            [
                                                `log1p(x)`, 
                                                `Returns the natural logarithm of 1 + x`
                                            ],
                                            [
                                                `trunc(x)`, 
                                                `Returns the integer part of a number (x)`
                                            ],
                                            [
                                                `sin(x)`, 
                                                `Returns the sine of x (x is in radians)`
                                            ],
                                            [
                                                `asin(x)`, 
                                                `Returns the arcsine of x, in radians`
                                            ],
                                            [
                                                `sinh(x)`, 
                                                `Returns the hyperbolic sine of x`
                                            ],
                                            [
                                                `asinh(x)`, 
                                                `Returns the hyperbolic arcsine of x`
                                            ],
                                            [
                                                `cos(x)`, 
                                                `Returns the cosine of x (x is in radians)`
                                            ],
                                            [
                                                `acos(x)`, 
                                                `Returns the arccosine of x, in radians`
                                            ],
                                            [
                                                `cosh(x)`, 
                                                `Returns the hyperbolic cosine of x`
                                            ],
                                            [
                                                `acosh(x)`, 
                                                `Returns the hyperbolic arccosine of x`
                                            ],
                                            [
                                                `tan(x)`, 
                                                `Returns the tangent of an angle`
                                            ],
                                            [
                                                `atan(x)`, 
                                                `Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians`
                                            ],
                                            [
                                                `atan2(y, x)`, 
                                                `Returns the arctangent of the quotient of its arguments`
                                            ],
                                            [
                                                `tanh(x)`, 
                                                `Returns the hyperbolic tangent of a number`
                                            ],
                                            [
                                                `atanh(x)`, 
                                                `Returns the hyperbolic arctangent of x`
                                            ],
                                            
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'dateObject',
                    title: 'Date Object',
                    titleDir: [
                        {text: `The Date object is used to work with dates and times.`},
                        {text: `Date objects are created with new Date().`},
                        {text: `There are four ways of instantiating a date:`},
                        {code: `new Date();`, indent: 0},
                        {code: `new Date(milliseconds);`, indent: 0},
                        {code: `new Date(dateString);`, indent: 0},
                        {code: `new Date(year, month, day, hours, minutes, seconds, milliseconds);`, indent: 0},
                    ],
                    RowDir: [
                        {
                            id: 'dateMethods', 
                            title: 'Date Methods', 
                            headCellDir: [
                                {
                                    table: {
                                        head: ['Method', 'Description'],
                                        body: [
                                            [
                                                `getFullYear()`, 
                                                `Returns the year`
                                            ],
                                            [
                                                `getMonth()`, 
                                                `Returns the month (from 0-11)`
                                            ],
                                            [
                                                `getDate()`, 
                                                `Returns the day of the month (from 1-31)`
                                            ],
                                            [
                                                `getDay()`, 
                                                `Returns the day of the week (from 0-6)`
                                            ],
                                            [
                                                `getHours()`, 
                                                `Returns the hour (from 0-23)`
                                            ],
                                            [
                                                `getMinutes()`, 
                                                `Returns the minutes (from 0-59)`
                                            ],
                                            [
                                                `getSeconds()`, 
                                                `Returns the seconds (from 0-59)`
                                            ],
                                            [
                                                `getMilliseconds()`, 
                                                `Returns the milliseconds (from 0-999)`
                                            ],
                                            [
                                                `getTime()`, 
                                                `Returns the number of milliseconds since midnight Jan 1 1970, and a specified date`
                                            ],
                                            [
                                                `now()`, 
                                                `Returns the number of milliseconds since midnight Jan 1, 1970`
                                            ],
                                            [
                                                `parse()`, 
                                                `Parses a date string and returns the number of milliseconds since January 1, 1970`
                                            ],
                                            [
                                                `getUTCFullYear()`, 
                                                `Returns the year, according to universal time`
                                            ],
                                            [
                                                `getUTCMonth()`, 
                                                `Returns the month, according to universal time (from 0-11)`
                                            ],
                                            [
                                                `getUTCDate()`, 
                                                `Returns the day of the month, according to universal time (from 1-31)`
                                            ],
                                            [
                                                `getUTCDay()`, 
                                                `Returns the day of the week, according to universal time (from 0-6)`
                                            ],
                                            [
                                                `getUTCHours()`, 
                                                `Returns the hour, according to universal time (from 0-23)`
                                            ],
                                            [
                                                `getUTCMinutes()`, 
                                                `Returns the minutes, according to universal time (from 0-59)`
                                            ],
                                            [
                                                `getUTCSeconds()`, 
                                                `Returns the seconds, according to universal time (from 0-59)`
                                            ],
                                            [
                                                `getUTCMilliseconds()`, 
                                                `Returns the milliseconds, according to universal time (from 0-999)`
                                            ],
                                            [
                                                `UTC()`, 
                                                `Returns the number of milliseconds in a date since midnight of January 1, 1970, according to UTC time`
                                            ],
                                            [
                                                `getTimezoneOffset()`, 
                                                `Returns the time difference between UTC time and local time, in minutes`
                                            ],
                                            [
                                                `setFullYear()`, 
                                                `Sets the year of a date object`
                                            ],
                                            [
                                                `setMonth()`, 
                                                `Sets the month of a date object`
                                            ],
                                            [
                                                `setDate()`, 
                                                `Sets the day of the month of a date object`
                                            ],
                                            [
                                                `setHours()`, 
                                                `Sets the hour of a date object`
                                            ],
                                                                                                        
                                            [
                                                `setMinutes()`, 
                                                `Set the minutes of a date object`
                                            ],
                                            [
                                                `setSeconds()`, 
                                                `Sets the seconds of a date object`
                                            ],
                                            [
                                                `setMilliseconds()`, 
                                                `Sets the milliseconds of a date object`
                                            ],
                                            [
                                                `setTime()`, 
                                                `Sets a date to a specified number of milliseconds after/before January 1, 1970`
                                            ],
                                            [
                                                `setUTCFullYear()`, 
                                                `Sets the year of a date object, according to universal time`
                                            ],
                                            [
                                                `setUTCMonth()`, 
                                                `Sets the month of a date object, according to universal time`
                                            ],
                                            [
                                                `setUTCDate()`, 
                                                `Sets the day of the month of a date object, according to universal time`
                                            ],
                                            [
                                                `setUTCHours()`, 
                                                `Sets the hour of a date object, according to universal time`
                                            ],
                                            [
                                                `setUTCMinutes()`, 
                                                `Set the minutes of a date object, according to universal time`
                                            ],
                                            [
                                                `setUTCSeconds()`, 
                                                `Set the seconds of a date object, according to universal time`
                                            ],
                                            [
                                                `setUTCMilliseconds()`, 
                                                `Sets the milliseconds of a date object, according to universal time`
                                            ],
                                            [
                                                `toDateString()`, 
                                                `Converts the date portion of a Date object into a readable string`
                                            ],
                                            [
                                                `toTimeString()`, 
                                                `Converts the time portion of a Date object to a string`
                                            ],
                                            [
                                                `toLocaleDateString()`, 
                                                `Returns the date portion of a Date object as a string, using locale conventions`
                                            ],
                                            [
                                                `toLocaleTimeString()`, 
                                                `Returns the time portion of a Date object as a string, using locale conventions`
                                            ],
                                            [
                                                `toLocaleString()`, 
                                                `Converts a Date object to a string, using locale conventions`
                                            ],
                                            [
                                                `toUTCString()`, 
                                                `Converts a Date object to a string, according to universal time`
                                            ],
                                            [
                                                `toISOString()`, 
                                                `Returns the date as a string, using the ISO standard`
                                            ],
                                            [
                                                `toJSON()`, 
                                                `Returns the date as a string, formatted as a JSON date`
                                            ],
                                            [
                                                `toString()`, 
                                                `Converts a Date object to a string`
                                            ],
                                            [
                                                `valueOf()`, 
                                                `Returns the primitive value of a Date object`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                    ] 
                },
                {
                    id: 'globalMethods',
                    title: 'Global Properties & Methods',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'globalProperties', 
                            title: 'Global Properties', 
                            headCellDir: []
                        },
                        {
                            id: 'infinity', 
                            title: 'Infinity', 
                            cellDir: [
                                {text: `A numeric value that represents positive/negative infinity`},
                            ]
                        },
                        {
                            id: 'nan', 
                            title: 'NaN', 
                            cellDir: [
                                {text: `"Not-a-Number" value`},
                            ]
                        },
                        {
                            id: 'undefined', 
                            title: 'undefined', 
                            cellDir: [
                                {text: `Indicates that a variable has not been assigned a value`},
                            ]
                        },
                        {
                            id: 'constructor', 
                            title: 'constructor', 
                            cellDir: [
                                {text: `The constructor property returns the function that created the Object prototype.`},
                                {code: `function Object() { [native code] }`, indent: 0},
                            ]
                        },
                        {
                            id: 'prototype', 
                            title: 'prototype', 
                            cellDir: [
                                {text: `prototype allows you to add new properties and methods to objects.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `object.prototype.name = value`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example 1</b></>)},
                                {code: `Array.prototype.myUcase = function() {`, indent: 0},
                                {code: `for (let i = 0; i < this.length; i++) {`, indent: 1},
                                {code: `this[i] = this[i].toUpperCase();`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `};`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `var fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `fruits.myUcase();`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'BANANA,ORANGE,APPLE,MANGO'}</>), indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example 2</b></>)},
                                {code: `function Person(first, last, age, eyecolor) {`, indent: 0},
                                {code: `this.firstName = first;`, indent: 1},
                                {code: `this.lastName = last;`, indent: 1},
                                {code: `this.eyeColor = eyecolor;`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `const.myFather = new Person("John", "Doe", "Blue", );`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `Person.prototype.nationality = "English";`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'myFather.nationality = "English";'}</>), indent: 0},
                            ]
                        },
                        
                        {
                            id: 'globalMethods', 
                            title: 'Global Methods', 
                            headCellDir: []
                        },
                        {
                            id: 'encodeURI', 
                            title: 'encodeURI()', 
                            cellDir: [
                                {text: `The encodeURI() method encodes a URI.`},
                                {text: `The encodeURI() method does not encode characters like: , / ? : @ & = + $ * #`},
                                {code: `let uri = "my test.asp?name=ståle&car=saab";`, indent: 0},
                                {code: `let encoded = encodeURI(uri);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Encoded URI: </b>{'my%20test.asp?name=st%C3%A5le&car=saab'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'decodeURI', 
                            title: 'decodeURI()', 
                            cellDir: [
                                {text: `The decodeURI() method decodes a URI.`},
                                {code: `let uri = "my test.asp?name=ståle&car=saab";`, indent: 0},
                                {code: `let decoded = decodeURI(encoded);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Decoded URI: </b>{''}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'encodeURIComponent', 
                            title: 'encodeURIComponent()', 
                            cellDir: [
                                {text: `The encodeURIComponent() method encodes a URI component.`},
                                {text: `The encodeURIComponent() method encodes special characters including: , / ? : @ & = + $ #`},
                                {code: `let uri = "https://w3schools.com/my test.asp?name=ståle&car=saab";`, indent: 0},
                                {code: `let encoded = encodeURIComponent(uri);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Encoded URI: </b>{'https%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst%C3%A5le%26car%3Dsaab'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'decodeURIComponent', 
                            title: 'decodeURIComponent()', 
                            cellDir: [
                                {text: `The decodeURIComponent() method decodes a URI component.`},
                                {code: `let uri = "https://w3schools.com/my test.asp?name=ståle&car=saab";`, indent: 0},
                                {code: `let decoded = decodeURIComponent(encoded);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Decoded URI: </b>{'https://w3schools.com/my test.asp?name=ståle&car=saab'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'isFinite', 
                            title: 'isFinite()', 
                            cellDir: [
                                {text: `The Number.isFinite() method returns true if a number is a finite number.`},
                                {text: `Infinite (not finite) numbers are Infinity, -Infinity, or NaN`},
                                {text: `Otherwise it returns false.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `Number.isFinite(value)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `Number.isFinite(123)`, indent: 0},
                                {code: (<><b>Output: </b>{'true'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `Number.isFinite("123")`, indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'isNaN', 
                            title: 'isNaN()', 
                            cellDir: [
                                {text: `In JavaScript, NaN is short for "Not-a-Number".`},
                                {text: `In JavaScript, NaN is a number that is not a legal number.`},
                                {text: `The Number.isNaN() method returns true if the value is  NaN, and the type is a Number.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `Number.isNaN(value)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `Number.isNaN(123);`, indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `Number.isNaN(-1.23);`, indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `Number.isNaN('123');`, indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `Number.isNaN(0/0);`, indent: 0},
                                {code: (<><b>Output: </b>{'false'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'number', 
                            title: 'Number()', 
                            cellDir: [
                                {text: `The Number() method converts a value to a number.`},
                                {text: `If the value cannot be converted, NaN is returned.`},
                                {code: `Number(true);`, indent: 0},
                                {code: `Number(false);`, indent: 0},
                                {code: `Number(new Date());`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'1; 0; 1649293650949'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'parseFloat', 
                            title: 'parseFloat()', 
                            cellDir: [
                                {text: `The parseFloat() method parses a value as a string and returns the first number.`},
                                {text: (<><b>Note: </b>{'If the first character cannot be converted, NaN is returned. Leading and trailing spaces are ignored. Only the first number found is returned.'}</>)},
                                {code: `parseFloat(10);`, indent: 0},
                                {code: `parseFloat("10");`, indent: 0},
                                {code: `parseFloat("10.33");`, indent: 0},
                                {code: `parseFloat("34 45 66");`, indent: 0},
                                {code: `parseFloat("He was 40");`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'10;10;10.33;34;NaN'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'parseInt', 
                            title: 'parseInt()', 
                            cellDir: [
                                {text: `The parseInt method parses a value as a string and returns the first integer.`},
                                {text: `A radix parameter specifies the number system to use:`},
                                {text: `2 = binary, 8 = octal, 10 = decimal, 16 = hexadecimal.`},
                                {text: `If radix is omitted, JavaScript assumes radix 10. If the value begins with "0x", JavaScript assumes radix 16.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `parseInt(string, radix)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `parseInt("10");`, indent: 0},
                                {code: `parseInt("10.00");`, indent: 0},
                                {code: `parseInt("10.33");`, indent: 0},
                                {code: `parseInt("34 45 66");`, indent: 0},
                                {code: `parseInt(" 60 ");`, indent: 0},
                                {code: `parseInt("40 years");`, indent: 0},
                                {code: `parseInt("He was 40");`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'10;10;10;34;60;40;NaN'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'string', 
                            title: 'String()', 
                            cellDir: [
                                {text: `The String() method converts a value to a string.`},
                                {text: (<><b>Note: </b>{'The String() method returns the same as the toString() method for any value.'}</>)},
                                {code: `String(new Date());`, indent: 0},
                                {code: `String("12345");`, indent: 0},
                                {code: `String(12345);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Wed Apr 06 2022 21:11:55 GMT-0400 (EDT);12345;12345'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'toString', 
                            title: 'toString()', 
                            cellDir: [
                                {text: `The toString() method returns a string verion of an object`},
                                {text: `The toString() method does not change the original object.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.toString()`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `let text = fruits.toString();`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Banana,Orange,Apple,Mango'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'valueOf', 
                            title: 'valueOf()', 
                            cellDir: [
                                {text: `The valueOf() method returns the object itself.`},
                                {text: `The valueOf() method does not change the original object.`},
                                {text: `fruits.valueOf() returns the same as fruits.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `array.valueOf()`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const fruits = ["Banana", "Orange", "Apple", "Mango"];`, indent: 0},
                                {code: `const myArray = fruits.valueOf();`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Banana,Orange,Apple,Mango; same as const myArray = fruits;'}</>), indent: 0},
                            ]
                        },
                        
                    ] 
                },
                {
                    id: 'regExpObject',
                    title: 'RegExp Object',
                    titleDir: [
                        {text: `A regular expression is a pattern of characters.`},
                        {text: `The pattern is used to do pattern-matching "search-and-replace" functions on text.`},
                        {text: `In JavaScript, a RegExp Object is a pattern with Properties and Methods.`},
                        {text: (<><b>Syntax</b></>)},
                        {code: `/pattern/modifier(s);`, indent: 0},
                        {text: (<>&nbsp;</>)},
                        {text: (<><b>Example</b></>)},
                        {code: `let pattern = /w3schools/i;`, indent: 0},
                        {text: (<>&nbsp;</>)},
                        {
                            table: {
                                head: ['Value', 'Description'],
                                body: [
                                    [
                                        `w3schools`, 
                                        `The pattern to search for`
                                    ],
                                    [
                                        `/w3schools/`, 
                                        `A regular expression`
                                    ],
                                    [
                                        `/w3schools/i`, 
                                        `A case-insensitive regular expression`
                                    ],

                                ]

                            }
                        }
                    ],
                    RowDir: [
                        {
                            id: 'modifiers', 
                            title: 'Modifiers', 
                            headCellDir: [
                                {text: `Modifiers are used to perform case-insensitive and global searches:`},
                            ]
                        },
                        {
                            id: 'g', 
                            title: 'g', 
                            cellDir: [
                                {text: `Perform a global match (find all matches rather than stopping after the first match)`},
                                {code: `let pattern = /[1-4]/g;`, indent: 0},
                            ]
                        },
                        {
                            id: 'i', 
                            title: 'i', 
                            cellDir: [
                                {text: `Perform case-insensitive matching`},
                                {code: `let pattern = /w3schools/i;`, indent: 0},
                            ]
                        },
                        {
                            id: 'm', 
                            title: 'm', 
                            cellDir: [
                                {text: `Perform multiline matching`},
                                // {code: `let text = {'Is this'}`, indent: 0},
                                // {code: ``, indent: 0},
                                // {code: ``, indent: 0},
                                // {code: (<>&nbsp;</>), indent: 0},
                                // {code: ``, indent: 0},
                            ]
                        },
                        
                        {
                            id: 'brackets', 
                            title: 'Brackets', 
                            headCellDir: [
                                {text: `Brackets are used to find a range of characters:`},
                            ]
                        },
                        {
                            id: 'abc', 
                            title: '[abc]', 
                            cellDir: [
                                {text: `Brackets [abc] specifies matches for the characters inside the brackets.`},
                                {text: `Brackets can define single characters, groups, or character spans:`},
                                {code: `let text = "Do you know if this is all there is?";`, indent: 0},
                                {code: `let pattern = /[is]/gi;`, indent: 0},
                                {code: (<><b>Output: </b>{'i,i,s,i,s,i,s'}</>), indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `[abc]`, 
                                                `Any of the characters a, b, or c`
                                            ],
                                            [
                                                `[A-Z]`, 
                                                `Any character from uppercase A to uppercase Z`
                                            ],
                                            [
                                                `[a-z]`, 
                                                `Any character from lowercase a to lowercase z`
                                            ],
                                            [
                                                `[A-z]`, 
                                                `Any character from uppercase A to lowercase z`
                                            ],
                                            
                                        ]
        
                                    }
                                }
                            ]
                        },
                        {
                            id: 'abc2', 
                            title: '[^abc]', 
                            cellDir: [
                                {text: `Brackets [^abc] specifies matches for any character NOT between the brackets.`},
                                {text: `Brackets can define single characters, groups, or character spans:`},
                                {code: `let pattern = /[^h]/g;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                        [
                                            `[^abc]`, 
                                            `Not any of the characters a, b, or c`
                                        ],
                                        [
                                            `[^A-Z]`, 
                                            `Not any character from uppercase A to uppercase Z`
                                        ],
                                        [
                                            `[^a-z]`, 
                                            `Not any character from lowercase a to lowercase z`
                                        ],
                                        [
                                            `[^A-z]`, 
                                            `Not any character from uppercase A to lowercase z`
                                        ],
                                        
                                        ]
        
                                    }
                                }
                            ]
                        },
                        {
                            id: '0-9', 
                            title: '[0-9]', 
                            cellDir: [
                                {text: `The [0-9] expression is used to find any character between the brackets.`},
                                {text: `The digits inside the brackets can be any numbers or span of numbers from 0 to 9.`},
                                {code: `let text = "123456789";`, indent: 0},
                                {code: `let pattern = /[1-4]/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'1,2,3,4'}</>), indent: 0},
                            ]
                        },
                        {
                            id: '0-92', 
                            title: '[^0-9]', 
                            cellDir: [
                                {text: `Find any character NOT between the brackets (any non-digit)`},
                                {code: `let text = "123456789";`, indent: 0},
                                {code: `let pattern = /[^1-4]/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'5,6,7,8,9'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'xy', 
                            title: '(x|y)', 
                            cellDir: [
                                {text: `The (x|y) expression is used to find any of the alternatives specified.`},
                                {text: `The alternatives can be of any characters.`},
                                {code: `let pattern= /(red|green)/g;`, indent: 0},
                                {code: `let pattern = /(0|5|7)/g;`, indent: 0},
                            ]
                        },
                        
                        {
                            id: 'metacharacters', 
                            title: 'Metacharacters', 
                            headCellDir: [
                                {text: `Metacharacters are characters with a special meaning:`},
                            ]
                        },
                        {
                            id: 'period', 
                            title: '.', 
                            cellDir: [
                                {text: `Find a single character, except newline or line terminator`},
                                {code: `let text = "That's hot!";`, indent: 0},
                                {code: `let pattern = /./g;`, indent: 0},
                                {code: (<><b>Output: </b>{"T,h,a,t,',s, ,h,o,t,!"}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `let text = "That's hot!";`, indent: 0},
                                {code: `let pattern = /h.t/g;`, indent: 0},
                                {code: (<><b>Output: </b>{'hat,hot'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'dashW', 
                            title: `\\w`, 
                            cellDir: [
                                {text: `The \\w metacharacter matches word characters.`},
                                {text: `A word character is a character a-z, A-Z, 0-9, including _ (underscore).`},
                                {code: `let text = "Give 100%!";`, indent: 0},
                                {code: `let pattern = /\\w/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'G,i,v,e,1,0,0'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'dashCW', 
                            title: `\\W`, 
                            cellDir: [
                                {text: `The \\W metacharacter matches non-word characters:`},
                                {code: `let text = "Give 100%!";`, indent: 0},
                                {code: `let pattern = /\\W/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{',%,!'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'dashD', 
                            title: '\\d', 
                            cellDir: [
                                {text: `The \\d metacharacter matches digits from 0 to 9.`},
                                {code: `let text = "Give 100%!";`, indent: 0},
                                {code: `let pattern= /\\d/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'1,0,0'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'dashCD', 
                            title: '\\D', 
                            cellDir: [
                                {text: `The \\D metacharacter matches non-digit characters.`},
                                {code: `let text = "Give 100%!";`, indent: 0},
                                {code: `let pattern = /\\D/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'G,i,v,e, ,%,!'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'dashS', 
                            title: '\\s', 
                            cellDir: [
                                {text: `The \\s metacharacter matches whitespace character.`},
                                {text: `Whitespace characters can be:`},
                                {list: [
                                    'A space character',
                                    'A tab character',
                                    'A carriage return character',
                                    'A new line character',
                                    'A vertical tab character',
                                    'A form feed character',
                                ]},
                                {code: `let text = "Is this all there is?";`, indent: 0},
                                {code: `let pattern = /\\s/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{', , ,'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'dashCS', 
                            title: '\\S', 
                            cellDir: [
                                {text: `The \\S metacharacter matches non-whitespace characters.`},
                                {code: `let text = "Is this all there is?";`, indent: 0},
                                {code: `let pattern = /\\S/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'I,s,t,h,i,s,a,l,l,t,h,e,r,e,i,s,?'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'dashB', 
                            title: '\\b', 
                            cellDir: [
                                {text: `The \\b metacharacter matches at the beginning or end of a word.`},
                                {text: `Search for the pattern LO at the beginning of a word like this: \\bLO`},
                                {text: `Search for the pattern LO at the end of a word like this: LO\\b`},
                                {code: `let text = "HELLO, LOOK AT YOU";`, indent: 0},
                                {code: `let pattern = /\\bLO/;`, indent: 0},
                                {code: (<><b>Output: </b>{'7'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `let text = "HELLO, LOOK AT YOU";`, indent: 0},
                                {code: `let pattern = /LO\\b/;`, indent: 0},
                                {code: (<><b>Output: </b>{'3'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'dashCB', 
                            title: '\\B', 
                            cellDir: [
                                {text: `The \\B metacharacter matches NOT at the beginning/end of a word.`},
                                {code: `let text = "HELLO, LOOK AT YOU";`, indent: 0},
                                {code: `let pattern = /\\BLO/;`, indent: 0},
                                {code: (<><b>Output: </b>{'3'}</>), indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `let text = "HELLO, LOOK AT YOU";`, indent: 0},
                                {code: `let pattern = /LO\\B/;`, indent: 0},
                                {code: (<><b>Output: </b>{'7'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'dash0', 
                            title: '\\0', 
                            cellDir: [
                                {text: `The \\0 metacharacter maches NUL characters (\\0).`},
                                {code: `let text = "Visit W3Schools.\\0Learn Javascript.";`, indent: 0},
                                {code: `let pattern = /\\0/;`, indent: 0},
                                {code: (<><b>Output: </b>{'16'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'dashn', 
                            title: '\\n', 
                            cellDir: [
                                {text: `The \\n character matches newline characters (\\n).`},
                                {code: `let text = "Visit W3Schools.\\nLearn Javascript.";`, indent: 0},
                                {code: `let pattern = /\\n/;`, indent: 0},
                                {code: (<><b>Output: </b>{'16'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'dashF', 
                            title: '\\f', 
                            cellDir: [
                                {text: `Find a form feed character`},
                            ]
                        },
                        {
                            id: 'dashR', 
                            title: '\\r', 
                            cellDir: [
                                {text: `Find a carriage return character`},
                            ]
                        },
                        {
                            id: 'dashT', 
                            title: '\\t', 
                            cellDir: [
                                {text: `Find a tab character`},
                            ]
                        },
                        {
                            id: 'dashV', 
                            title: '\\v', 
                            cellDir: [
                                {text: `Find a vertical tab character`},
                            ]
                        },
                        {
                            id: 'dashXXX', 
                            title: `\\xxx`, 
                            cellDir: [
                                {text: `The \\xxx metacharacters matches the Latin character by an octal number (xxx).`},
                                {code: `let text = "Visit W3Schools. Hello World!"; `, indent: 0},
                                {code: `let pattern = /\\127/g;`, indent: 0},
                                {code: (<><b>Output: </b>{'W,W; octn(127)=W'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'dashXDD', 
                            title: '\\xdd', 
                            cellDir: [
                                {text: `The \\xdd metacharacters matches Latin characters specified by a hexadecimal number (dd).`},
                                {code: `let text = "Visit W3Schools. Hello World!";`, indent: 0},
                                {code: `let pattern = /\\x57/g;`, indent: 0},
                                {code: (<><b>Output: </b>{'W,W; hex(57)=W'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'dashUDDD', 
                            title: (<>{'\\'}{'udddd'}</>), 
                            cellDir: [
                                {text: (<>{'The \\'} {'udddd metacharacters matches Unicode characters specified by a hexadecimal number (dddd).'}</>)},
                                {code: `let text = "Visit W3Schools. Hello World!";`, indent: 0},
                                {code: `let pattern = /\\u0057/g;`, indent: 0},
                                {code: (<><b>Output: </b>{'W,W; Uni(u0057)=W'}</>), indent: 0},
                            ]
                        },
                        
                        {
                            id: 'quantifiers', 
                            title: 'Quantifiers', 
                            headCellDir: []
                        },
                        {
                            id: 'nplus', 
                            title: 'n+', 
                            cellDir: [
                                {text: `The n+ quantifier matches any string that contains at least one n.`},
                                {code: `let text = "Hellooo World! Hello W3Schools!"; `, indent: 0},
                                {code: `let pattern = /o+/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'ooo,o,o,oo'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'nstar', 
                            title: 'n*', 
                            cellDir: [
                                {text: `The n* quantifier matches any string that contains zero or more occurrences of n.`},
                                {code: `let text = "Hellooo World! Hello W3Schools!"; `, indent: 0},
                                {code: `let pattern = /lo*/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'l,looo,l,l,lo,l'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'nquest', 
                            title: 'n?', 
                            cellDir: [
                                {text: `The n? quantifier matches any string that contains zero or one occurrences of n.`},
                                {code: `let text = "1, 100 or 1000?";`, indent: 0},
                                {code: `let pattern = /10?/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'1,10,10'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'nX', 
                            title: 'n{X}', 
                            cellDir: [
                                {text: `The n{X} quantifier matches any string that contains a sequence of X n's. X must be a number.`},
                                {code: `let text = "100, 1000 or 10000?";`, indent: 0},
                                {code: `let pattern = /\d{4}/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'1000,1000'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'nXY', 
                            title: 'n{X,Y}', 
                            cellDir: [
                                {text: `The n{X,Y} quantifier matches any string that contains a sequence of X to Y n's.`},
                                {code: `let text = "100, 1000 or 10000?";`, indent: 0},
                                {code: `let pattern = /\d{3,4}/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'100,1000,1000'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'nXcom', 
                            title: 'n{X,}', 
                            cellDir: [
                                {text: `The n{X,} quantifier matches any string that contains a sequence of at least X n's.`},
                                {code: `let text = "100, 1000 or 10000?";`, indent: 0},
                                {code: `let pattern = /\\d{3,}/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'100,1000,10000'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'ndol', 
                            title: 'n$', 
                            cellDir: [
                                {text: `The n$ quantifier matches any string with n at the end of it.`},
                                {code: `let text = "Is this his";`, indent: 0},
                                {code: `let pattern = /is$/;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'is'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'narrow', 
                            title: '^n', 
                            cellDir: [
                                {text: `The ^n quantifier matches any string with n at the beginning of it.`},
                                {code: `let text = "Is this his";`, indent: 0},
                                {code: `let pattern = /^Is/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Is'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'nequal', 
                            title: '?=n', 
                            cellDir: [
                                {text: `The ?=n quantifier matches any string that is followed by a specific string n.`},
                                {code: `let text = "Is this all there is";`, indent: 0},
                                {code: `let pattern = /is(?= all)/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'is'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'nex', 
                            title: '?!n', 
                            cellDir: [
                                {text: `The ?!n quantifier matches any string that is not followed by a specific string n.`},
                                {code: `let text = "Is this all there is";`, indent: 0},
                                {code: `let pattern = /is(?! all)/gi;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'Is,is'}</>), indent: 0},
                            ]
                        },
                        
                        {
                            id: 'regExpObjectProperties', 
                            title: 'RegExp Object Properties', 
                            headCellDir: []
                        },
                        {
                            id: 'global', 
                            title: 'global', 
                            cellDir: [
                                {text: `The global property specifies whether or not the "g" modifier is set.`},
                                {text: `This property returns true if the "g" modifier is set, otherwise it returns false.`},
                            ]
                        },
                        {
                            id: 'ignoreCase', 
                            title: 'ignoreCase', 
                            cellDir: [
                                {text: `The ignoreCase property specifies whether or not the "i" modifier is set.`},
                                {text: `This property returns true if the "i" modifier is set, otherwise it returns false.`},
                            ]
                        },
                        {
                            id: 'lastIndex', 
                            title: 'lastIndex', 
                            cellDir: [
                                {text: `The lastIndex property specifies the index at which to start the next match.`},
                                {text: (<><b>Note: </b>{'This property only works if the "g" modifier is set.'}</>)},
                                {text: `This property returns an integer that specifies the character position immediately after the last match found by exec( ) or test( ) methods.`},
                                {code: `let text = "The rain in Spain stays mainly in the plain";`, indent: 0},
                                {code: `let pattern = /ain/g;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `let result = "";`, indent: 0},
                                {code: `while (pattern.test(text)==true) {pattern.lastIndex}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'8,17,28,43'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'multiline', 
                            title: 'multiline', 
                            cellDir: [
                                {text: `The multiline property specifies whether or not the m modifier is set.`},
                                {text: `This property returns true if the "m" modifier is set, otherwise it returns false.`},
                            ]
                        },
                        {
                            id: 'source', 
                            title: 'source', 
                            cellDir: [
                                {text: `The source property returns the text of the RegExp pattern.`},
                                {code: `let text = "Visit W3Schools";`, indent: 0},
                                {code: `let pattern = /W3S/g;`, indent: 0},
                                {code: `let result = pattern.source;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'W3S'}</>), indent: 0},
                            ]
                        },
                        
                        {
                            id: 'regExpObjectMethods', 
                            title: 'RegExp Object Methods', 
                            headCellDir: []
                        },
                        {
                            id: 'exec', 
                            title: 'exec()', 
                            cellDir: [
                                {text: `The exec() method tests for a match in a string.`},
                                {text: `If it finds a match, it returns a result array, otherwise it returns null.`},
                                {code: `let text = "The best things in life are free";`, indent: 0},
                                {code: `let result = /e/.exec(text);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'e'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'test', 
                            title: 'test()', 
                            cellDir: [
                                {text: `The test() method tests for a match in a string.`},
                                {text: `If it finds a match, it returns true, otherwise it returns false.`},
                                {code: `let text = "The best things in life are free"; let pattern = /e/;`, indent: 0},
                                {code: `let result = pattern.test(text);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: (<><b>Output: </b>{'true'}</>), indent: 0},
                            ]
                        },
                        
                    ] 
                },
                {
                    id: 'classes',
                    title: 'Classes',
                    titleDir: [
                        {text: `A class is a type of function, but instead of using the keyword function to initiate it, we use the keyword class, and the properties are assigned inside a constructor() method:`},
                        {code: `class Car {  // Create a class`, indent: 0},
                        {code: `constructor(brand) {  // Class constructor`, indent: 1},
                        {code: `this.carname = brand;  // Class body/properties`, indent: 2},
                        {code: `}`, indent: 1},
                        {code: `}`, indent: 0},
                        {code: (<>&nbsp;</>), indent: 0},
                        {code: `mycar = new Car("Ford");  // Create an object of Car class`, indent: 0},
                    ],
                    RowDir: [
                        {
                            id: 'constructor', 
                            title: 'constructor()', 
                            cellDir: [
                                {text: `The constructor() method is a special method for creating and initializing objects created within a class.`},
                                {text: `The constructor() method is called automatically when a class is initiated, and it has to have the exact name "constructor", in fact, if you do not have a constructor method, JavaScript will add an invisible and empty constructor method.`},
                                {text: (<><b>Note: </b>{'A class cannot have more than one constructor() method. This will throw a SyntaxError.'}</>)},
                                {text: `You can use the super() method to call the constructor of a parent class (see "More Examples" below).`},
                                {code: `class Car {`, indent: 0},
                                {code: `constructor(brand) {  // Constructor`, indent: 1},
                                {code: `this.carname = brand;`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `mycar = new Car("Ford");`, indent: 0},
                            ]
                        },
                        {
                            id: 'extends', 
                            title: 'extends', 
                            cellDir: [
                                {text: `The extends keyword is used to create a child class of another class (parent).`},
                                {text: `The child class inherits all the methods from another class.`},
                                {text: `Inheritance is useful for code reusability: reuse properties and methods of an existing class when you create a new class.`},
                                {text: (<><b>Note: </b>{"From the example above; The super() method refers to the parent class. By calling the super() method in the constructor method, we call the parent's constructor method and gets access to the parent's properties and methods."}</>)},
                                {text: (<><b>Syntax</b></>)},
                                {code: `class childClass extends parentClass`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `class Car {`, indent: 0},
                                {code: `constructor(brand) {`, indent: 1},
                                {code: `this.carname = brand;`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `present() {`, indent: 1},
                                {code: `return 'I have a ' + this.carname;`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `class Model extends Car {`, indent: 0},
                                {code: `constructor(brand, mod) {`, indent: 1},
                                {code: `super(brand);`, indent: 2},
                                {code: `this.model = mod;`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `show() {`, indent: 1},
                                {code: `return this.present() + ', it is a ' + this.model;`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `mycar = new Model("Ford", "Mustang");`, indent: 0},
                                {code: `document.getElementById("demo").innerHTML = mycar.show();`, indent: 0},
                            ]
                        },
                        {
                            id: 'static', 
                            title: 'static', 
                            cellDir: [
                                {text: `The static keyword defines static methods for classes.`},
                                {text: `Static methods are called directly on the class (Car from the example above) - without creating an instance/object (mycar) of the class.`},
                                {code: `class Car {`, indent: 0},
                                {code: `constructor(brand) {`, indent: 1},
                                {code: `this.carname = brand;`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `static hello() {  // static method`, indent: 1},
                                {code: `return "Hello!!";`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `mycar = new Car("Ford");`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `//Call 'hello()' on the class Car:`, indent: 0},
                                {code: `document.getElementById("demo").innerHTML = Car.hello();`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `//and NOT on the 'mycar' object:`, indent: 0},
                                {code: `//document.getElementById("demo").innerHTML = mycar.hello();`, indent: 0},
                                {code: `//this would raise an error.`, indent: 0},
                            ]
                        },
                        {
                            id: 'super', 
                            title: 'super', 
                            cellDir: [
                                {text: `The super keyword is used to call the constructor of its parent class to access the parent's properties and methods.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `super(arguments);  // calls the parent constructor (only inside the constructor)`, indent: 0},
                                {code: `super.parentMethod(arguments);  // calls a parent method`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {text: `Create a class named "Model" which will inherit the methods from the "Car" class, by using the extends keyword.`},
                                {text: `By calling the super() method in the constructor method, we call the parent's constructor method and gets access to the parent's properties and methods:`},
                                {code: `class Car {`, indent: 0},
                                {code: `constructor(brand) {`, indent: 1},
                                {code: `this.carname = brand;`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `present() {`, indent: 1},
                                {code: `return 'I have a ' + this.carname;`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `class Model extends Car {`, indent: 0},
                                {code: `constructor(brand, mod) {`, indent: 1},
                                {code: `super(brand);`, indent: 2},
                                {code: `this.model = mod;`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `show() {`, indent: 1},
                                {code: `return this.present() + ', it is a ' + this.model;`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `mycar = new Model("Ford", "Mustang");`, indent: 0},
                                {code: `document.getElementById("demo").innerHTML = mycar.show();`, indent: 0},
                            ]
                        },
                        {
                            id: 'private', 
                            title: 'private', 
                            cellDir: [
                                {text: `A private field is an identifier prefixed with # (the hash symbol). The hash is an integral part of the field's name, which means a private property can never have name clash with a public property. In order to refer to a private field anywhere in the class, you must declare it in the class body (you can't create a private property on the fly). Apart from this, a private field is pretty much equivalent to a normal property.`},
                                {code: `class Color {`, indent: 0},
                                {code: `// Declare: every Color instance has a private field called #values.`, indent: 1},
                                {code: `#values;`, indent: 1},
                                {code: `constructor(r, g, b) {`, indent: 1},
                                {code: `this.#values = [r, g, b];`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `getRed() {`, indent: 1},
                                {code: `return this.#values[0];`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `setRed(value) {`, indent: 1},
                                {code: `this.#values[0] = value;`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `const red = new Color(255, 0, 0);`, indent: 0},
                                {code: `console.log(red.getRed()); // 255`, indent: 0},
                            ]
                        },
                        
                    ] 
                },
                {
                    id: 'errorObject',
                    title: 'Error Object',
                    titleDir: [
                        {text: `The Error object provides error information when an error occurs.`},
                        {text: (<><b>{'Example'}</b></>)},
                        {text: `In this example we have written "alert" as "adddlert" to deliberately produce an error.`},
                        {text: `Return the error name and a description of the error:`},
                        {code: `try {`, indent: 0},
                        {code: `adddlert("Welcome");`, indent: 1},
                        {code: `}`, indent: 0},
                        {code: `catch(err) {`, indent: 0},
                        {code: `document.getElementById("demo").innerHTML = `, indent: 1},
                        {code: `err.name + "<br>" + err.message;`, indent: 1},
                        {code: `}`, indent: 0},
                    ],
                    RowDir: [
                        {
                            id: 'name', 
                            title: 'name', 
                            cellDir: [
                                {text: `The name property sets or returns the name of an error.`},
                                {text: `Six different values can be returned by the error name property:`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `errorObj.name`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `try {`, indent: 0},
                                {code: `adddlert("Welcome guest!");`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: `catch(err) {`, indent: 0},
                                {code: `document.getElementById("demo").innerHTML = err.name;`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `EvalError`, 
                                                `Deprecated - use SyntaxError instead`
                                            ],
                                            [
                                                `RangeError`, 
                                                `A number "out of range" has occurred`
                                            ],
                                            [
                                                `ReferenceError`, 
                                                `An illegal reference has occurred`
                                            ],
                                            [
                                                `SyntaxError`, 
                                                `A syntax error has occurred`
                                            ],
                                            [
                                                `TypeError`, 
                                                `A type error has occurred`
                                            ],
                                            [
                                                `URIError`, 
                                                `An error in encodeURI() has occurred`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'message', 
                            title: 'message', 
                            cellDir: [
                                {text: `The message property sets or returns an error message.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `errorObj.message`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `try {`, indent: 0},
                                {code: `adddlert("Welcome guest!");`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: `catch(err) {`, indent: 0},
                                {code: `document.getElementById("demo").innerHTML = err.message;`, indent: 1},
                                {code: `}`, indent: 0},
                            ]
                        },
                        
                    ] 
                },
                {
                    id: 'operators',
                    title: 'Operators',
                    titleDir: [],
                    RowDir: [
                        {
                            id: 'booleans', 
                            title: 'Booleans', 
                            headCellDir: [
                                {text: `You can use the Boolean() function to find out if an expression is true:`},
                                {code: `Boolean(10 > 9)`, indent: 0},
                                {text: `Or even easier:`},
                                {code: `(10 > 9) 10 > 9`, indent: 0},
                            ]
                        },
                        {
                            id: 'arithmeticOperators', 
                            title: 'Arithmetic Operators', 
                            headCellDir: [
                                {text: `Arithmetic operators are used to perform arithmetic between variables and/or values.`},
                                {text: `Given that y = 5, the table below explains the arithmetic operators: `},
                                {
                                    table: {
                                        head: ['Operator', 'Description', 'Example'],
                                        body: [
                                            [
                                                (<>&nbsp;{'+'}</>), 
                                                `Addition`,
                                                `x = y + 2`
                                            ],
                                            [
                                                (<>&nbsp;{'-'}</>), 
                                                `Subtraction`,
                                                `x = y - 2`
                                            ],
                                            [
                                                (<>&nbsp;{'*'}</>), 
                                                `Multiplication`,
                                                `x = y * 2`
                                            ],
                                            [
                                                (<>&nbsp;{'/'}</>), 
                                                `Division`,
                                                `x = y / 2`
                                            ],
                                            [
                                                (<>&nbsp;{'%'}</>), 
                                                `Modulus (division remainder)`,
                                                `x = y % 2`
                                            ],
                                            [
                                                (<>&nbsp;{'++'}</>), 
                                                `Increment`,
                                                (<>
                                                x = ++y<br/>
                                                x = y++
                                                </>)
                                            ],
                                            [
                                                (<>&nbsp;{'--'}</>), 
                                                `Decrement`,
                                                (<>
                                                x = --y<br/>
                                                x = y--
                                                </>)
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'assignmentOperators', 
                            title: 'Assignment Operators', 
                            headCellDir: [
                                {text: `Assignment operators are used to assign values to JavaScript variables.`},
                                {text: `Given that x = 10 and y = 5, the table below explains the assignment operators:`},
                                {
                                    table: {
                                        head: ['Operator', 'Example', 'Same As'],
                                        body: [
                                            [
                                                ` =`, 
                                                `x = y`,
                                                `x = y`
                                            ],
                                            [
                                                ` +=`, 
                                                `x += y`, 
                                                `x = x + y`
                                            ],
                                            [
                                                ` -=`, 
                                                `x -= y`, 
                                                `x = x - y`
                                            ],
                                            [
                                                ` *=`, 
                                                `x *= y`, 
                                                `x = x * y`
                                            ],
                                            [
                                                ` /=`, 
                                                `x /= y`, 
                                                `x = x / y`
                                            ],
                                            [
                                                ` %=`, 
                                                `x %= y`, 
                                                `x = x % y`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'stringOperators', 
                            title: 'String Operators', 
                            headCellDir: [
                                {text: `The + operator, and the += operator can also be used to concatenate (add) strings.`},
                                {text: `Given that text1 = "Good ", text2 = "Morning", and text3 = "", the table below explains the operators:`},
                                {
                                    table: {
                                        head: ['Operator', 'Example', 'Variables'],
                                        body: [
                                            [
                                                ` +`, 
                                                `text3 = text1 + text2 `,
                                                (<>
                                                {'text1 = "Good "'}<br/>
                                                {'text2 = "Morning"'}<br/>
                                                {'text3 = "Good Morning"'}
                                                </>)
                                            ],
                                            [
                                                ` +=`, 
                                                `text1 += text2 `,
                                                (<>
                                                {'text1 = "Good Morning"'}<br/>
                                                {'text2 = "Morning"'}<br/>
                                                {'text3 = ""'}
                                                </>)
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'comparisonOperators', 
                            title: 'Comparison Operators', 
                            headCellDir: [
                                {text: ``},
                                {text: ``},
                                {
                                    table: {
                                        head: ['Operator', 'Description', 'Example'],
                                        body: [
                                            [
                                                `==`, 
                                                `equal to`, 
                                                (<>
                                                x == 8 is false<br/>
                                                x == 5 is true
                                                </>),
                                            ],
                                            [
                                                `===`, 
                                                `equal value and equal type`, 
                                                (<>
                                                {'x === "5" is false'}<br/>
                                                x === 5 is true
                                                </>),
                                            ],
                                            [
                                                `!=`, 
                                                `not equal`, 
                                                `x != 8 is true`, 
                                            ],
                                            [
                                                `!==`, 
                                                `not equal value or not equal type`, 
                                                (<>
                                                {'x !== "5" is true'}<br/>
                                                x !== 5 is false
                                                </>),
                                            ],
                                            [
                                                `>`, 
                                                `greater than`, 
                                                `x > 8 is false`, 
                                            ],
                                            [
                                                `<`, 
                                                `less than`, 
                                                `x < 8 is true`, 
                                            ],
                                            [
                                                `>=`, 
                                                `greater than or equal to`, 
                                                `x >= 8 is false`, 
                                            ],
                                            [
                                                `<=`, 
                                                `less than or equal to`, 
                                                `x <= 8 is true`, 
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'conditionalOperator', 
                            title: 'Conditional Operator', 
                            headCellDir: [
                                {text: `The conditional operator assigns a value to a variable based on a condition.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `variablename = (condition) ? value1:value2`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `voteable = (age < 18) ? "Too young":"Old enough";`, indent: 0},
                                {text: `If the variable "age" is a value below 18, the value of the variable "voteable" will be "Too young", otherwise the value of voteable will be "Old enough".`},
                            ]
                        },
                        {
                            id: 'logicalOperators', 
                            title: 'Logical Operators', 
                            headCellDir: [
                                {text: ``},
                                {text: ``},
                                {
                                    table: {
                                        head: ['Operator', 'Description', 'Example'],
                                        body: [
                                            [
                                                ` &&`, 
                                                `and`, 
                                                `(x < 10 && y > 1) is true`
                                            ],
                                            [
                                                ` ||`, 
                                                `or`, 
                                                `(x === 5 || y === 5) is false`
                                            ],
                                            [
                                                ` !`, 
                                                `not`, 
                                                `!(x === y) is true`
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        // {
                        //     id: 'bitwiseOperators', 
                        //     title: 'Bitwise Operators', 
                        //     headCellDir: [
                        //         {text: ``},
                        //         {
                        //             table: {
                        //                 head: ['Value', 'Description'],
                        //                 body: [
                        //                     [
                        //                         ``, 
                        //                         ``
                        //                     ],
                                            
                        //                 ]

                        //             }
                        //         }
                        //     ]
                        // },
                        {
                            id: 'typeofOperator', 
                            title: 'typeof Operator', 
                            headCellDir: [
                                {text: `The typeof operator returns the type of a variable, object, function or expression:`},
                                {code: `typeof "John"                 // Returns string `, indent: 0},
                                {code: `typeof 3.14                   // Returns number`, indent: 0},
                                {code: `typeof NaN                    // Returns number`, indent: 0},
                                {code: `typeof false                  // Returns boolean`, indent: 0},
                                {code: `typeof [1, 2, 3, 4]           // Returns object`, indent: 0},
                                {code: `typeof {name:'John', age:34}  // Returns object`, indent: 0},
                                {code: `typeof new Date()             // Returns object`, indent: 0},
                                {code: `typeof function () {}         // Returns function`, indent: 0},
                                {code: `typeof myCar                  // Returns undefined (if myCar is not declared)`, indent: 0},
                                {code: `typeof null                   // Returns object`, indent: 0},
                                {list: [
                                    'NaN is number',
                                    'array is object',
                                    'date is object',
                                    'null is object',
                                    'undefined variable is undefined',
                                ]},
                                {text: (<><b>Note: </b>{'You cannot use typeof to define if a JavaScript object is an array (or a date).'}</>)},
                            ]
                        },
                        {
                            id: 'deleteOperator', 
                            title: 'delete Operator', 
                            headCellDir: [
                                {text: `The delete operator deletes a property from an object:`},
                                {code: `const person = {`, indent: 0},
                                {code: `firstName:"John",`, indent: 1},
                                {code: `lastName:"Doe",`, indent: 1},
                                {code: `age:50,`, indent: 1},
                                {code: `eyeColor:"blue"`, indent: 1},
                                {code: `};`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `delete person.age;   // or delete person["age"]; `, indent: 0},
                                {text: `The delete operator deletes both the value of the property and the property itself.`},
                                {text: `After deletion, the property cannot be used before it is added back again.`},
                                {text: `The delete operator is designed to be used on object properties. It has no effect on variables or functions.`},
                                {text: (<><b>Note: </b>{'The delete operator should not be used on predefined JavaScript object properties. It can crash your application.'}</>)},
                            ]
                        },
                        {
                            id: 'inOperator', 
                            title: 'in Operator', 
                            headCellDir: [
                                {text: `The in operator returns true if the specified property is in the specified object, otherwise false:`},
                                {code: `// Arrays`, indent: 0},
                                {code: `const cars = ["Saab", "Volvo", "BMW"];`, indent: 0},
                                {code: `"Saab" in cars          // Returns false (specify the index number instead of value)`, indent: 0},
                                {code: `0 in cars               // Returns true`, indent: 0},
                                {code: `1 in cars               // Returns true`, indent: 0},
                                {code: `4 in cars               // Returns false (does not exist)`, indent: 0},
                                {code: `"length" in cars        // Returns true  (length is an Array property)`, indent: 0},
                                {code: ``, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `// Objects`, indent: 0},
                                {code: `const person = {firstName:"John", lastName:"Doe", age:50};`, indent: 0},
                                {code: `"firstName" in person   // Returns true`, indent: 0},
                                {code: `"age" in person         // Returns true`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `// Predefined objects`, indent: 0},
                                {code: `"PI" in Math            // Returns true`, indent: 0},
                                {code: `"NaN" in Number         // Returns true`, indent: 0},
                                {code: `"length" in String      // Returns true`, indent: 0},
                            ]
                        },
                        {
                            id: 'instanceofOperator', 
                            title: 'instanceof Operator', 
                            headCellDir: [
                                {text: `The instanceof operator returns true if the specified object is an instance of the specified object:`},
                                {code: `const cars = ["Saab", "Volvo", "BMW"];`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `(cars instanceof Array)   // Returns true`, indent: 0},
                                {code: `(cars instanceof Object)  // Returns true`, indent: 0},
                                {code: `(cars instanceof String)  // Returns false`, indent: 0},
                                {code: `(cars instanceof Number)  // Returns false`, indent: 0},
                            ]
                        },
                        {
                            id: 'voidOperator', 
                            title: 'void Operator', 
                            headCellDir: [
                                {text: `The void operator evaluates an expression and returns undefined. This operator is often used to obtain the undefined primitive value, using "void(0)" (useful when evaluating an expression without using the return value).`},
                                {code: `<a href="javascript:void(0);">`, indent: 0},
                                {code: `Useless link`, indent: 1},
                                {code: `</a>`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `<a href="javascript:void(document.body.style.backgroundColor='red');">`, indent: 0},
                                {code: `Click me to change the background color of body to red`, indent: 1},
                                {code: `</a>`, indent: 0},
                            ]
                        },
                        {id: '', title: '', cellDir: []},
                    ] 
                },
                {
                    id: 'statements',
                    title: 'Statements',
                    titleDir: [
                        {text: `In HTML, JavaScript statements are "instructions" to be "executed" by the web browser.`},
                        {text: `This statement tells the browser to write "Hello Dolly." inside an HTML element with id="demo":`},
                        {code: `document.getElementById("demo").innerHTML = "Hello Dolly."; `, indent: 0},
                    ],
                    RowDir: [
                        {
                            id: 'statementIdentifiers', 
                            title: 'Statement Identifiers', 
                            headCellDir: [
                                {text: `JavaScript statements often start with a statement identifier to identify the JavaScript action to be performed.`},
                                {text: `Statement identifiers are reserved words and cannot be used as variable names (or any other things).`},
                            ]
                        },{
                            id: 'var', 
                            title: 'var', 
                            cellDir: [
                                {text: `The var statement declares a variable.`},
                                {text: `Variables are containers for storing information.`},
                                {text: `Creating a variable in JavaScript is called "declaring" a variable:`},
                                {code: `var carName;`, indent: 0},
                            ]
                        },
                        {
                            id: 'let', 
                            title: 'let', 
                            cellDir: [
                                {text: `The let statement declares a variable.`},
                                {text: `Variables are containers for storing information.`},
                                {text: `Creating a variable in JavaScript is called "declaring" a variable:`},
                                {code: `let carName;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `After the declaration, the variable is empty (it has no value).`},
                                {text: `To assign a value to the variable, use the equal sign:`},
                                {code: `carName = "Volvo";`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `You can also assign a value to the variable when you declare it:`},
                                {code: `let carName = "Volvo";`, indent: 0},
                            ]
                        },
                        {
                            id: 'const', 
                            title: 'const', 
                            cellDir: [
                                {text: `The const statement declares a variable.`},
                                {text: `Variables are containers for storing information.`},
                                {text: `Creating a variable in JavaScript is called "declaring" a variable:`},
                                {text: (<><b>Note: </b>{'A const variable must be assigned when it is declared. As a general rule, always declare a variable with const unless you know that the value will change.'}</>)},
                                {text: `Use const when you declare:`},
                                {list: [
                                    'A new Array', 
                                    'A new Object', 
                                    'A new Function', 
                                    'A new RegExp', 
                                ]},
                                {code: `const name = "Volvo";`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `// Create an object:`, indent: 0},
                                {code: `const car = {type:"Fiat", model:"500", color:"white"};`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `// Change a property:`, indent: 0},
                                {code: `car.color = "red";`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `// Add a property:`, indent: 0},
                                {code: `car.owner = "Johnson";`, indent: 0},
                            ]
                        },
                        {
                            id: 'function', 
                            title: 'function', 
                            cellDir: [
                                {text: `The function statement declares a function.`},
                                {text: `A declared function is "saved for later use", and will be executed later, when it is invoked (called).`},
                                {text: `In JavaScript, functions are objects, and they have both properties and methods. `},
                                {text: `A function can also be defined using an expression `},
                                {text: (<><b>Syntax</b></>)},
                                {code: `function functionName(parameters) {`, indent: 0},
                                {code: `code to be executed`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `// Declare a function`, indent: 0},
                                {code: `function myFunction() {`, indent: 0},
                                {code: `document.getElementById("demo").innerHTML = "Hello World!";`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `// Call the function`, indent: 0},
                                {code: `myFunction();`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `// Calling a function without delaration`, indent: 0},
                                {code: `argument) => {Code w/argument}`, indent: 0},
                                {code: `(argument) => function(argument`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                `functionName`, 
                                                (<>
                                                Required.<br/>
                                                The name of the function.<br/>
                                                Naming rules: same as JavaScript variables.
                                                </>)
                                            ],
                                            [
                                                `parameters`, 
                                                (<>
                                                Optional.<br/>
                                                A set of arguments (parameter names), separated by commas.<br/><br/>
                                                The arguments are real values received by the function from the outside.<br/><br/>
                                                Inside the function, the arguments are used as local variables.<br/><br/>
                                                If a function is called with a missing argument, the value of the missing argument is set to undefined.
                                                </>)
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'return', 
                            title: 'return', 
                            cellDir: [
                                {text: `The return statement stops the execution of a function and returns a value.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `return value;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.getElementById("demo").innerHTML = myFunction("John");`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `function myFunction(name) {`, indent: 0},
                                {code: `return "Hello " + name;`, indent: 1},
                                {code: `}`, indent: 0},
                            ]
                        },
                        {
                            id: 'class', 
                            title: 'class', 
                            cellDir: [
                                {text: `A class is a type of object template.`},
                                {text: `The class statement initiates a JavaScript class.`},
                                {text: `Properties and methods are assigned in the constructor() method.`},
                                {text: `The constructor() method is called each time a class object is initialized.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `class className {`, indent: 0},
                                {code: `// class body`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `// Create a Car class`, indent: 0},
                                {code: `class Car {`, indent: 0},
                                {code: `constructor(brand) {`, indent: 0},
                                {code: `this.carname = brand;`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `// Create a Car Object`, indent: 0},
                                {code: `myCar = new Car("Ford");`, indent: 0},
                            ]
                        },
                        {
                            id: 'ifElse', 
                            title: 'if ... else ... else if', 
                            cellDir: [
                                {text: `The if/else statement executes a block of code if a specified condition is true. If the condition is false, another block of code can be executed.`},
                                {text: `The if/else statement is a part of JavaScript's "Conditional" Statements, which are used to perform different actions based on different conditions.`},
                                {text: `In JavaScript we have the following conditional statements:`},
                                {list: [
                                    'Use if to specify a block of code to be executed, if a specified condition is true', 
                                    'Use else to specify a block of code to be executed, if the same condition is false', 
                                    'Use else if to specify a new condition to test, if the first condition is false', 
                                    'Use switch to select one of many blocks of code to be executed', 
                                ]},
                                {text: (<><b>Syntax</b></>)},
                                {text: `The if statement specifies a block of code to be executed if a condition is true:`},
                                {code: `if (condition) {`, indent: 0},
                                {code: `// block of code to be executed if the condition is true`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `The else statement specifies a block of code to be executed if the condition is false:`},
                                {code: `if (condition) {`, indent: 0},
                                {code: `// block of code to be executed if the condition is true`, indent: 1},
                                {code: `} else { `, indent: 0},
                                {code: `// block of code to be executed if the condition is false`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `The else if statement specifies a new condition if the first condition is false:`},
                                {code: `if (condition1) {`, indent: 0},
                                {code: `// block of code to be executed if condition1 is true`, indent: 1},
                                {code: `} else if (condition2) {`, indent: 0},
                                {code: `// block of code to be executed if the condition1 is false and condition2 is true`, indent: 1},
                                {code: `} else {`, indent: 0},
                                {code: `// block of code to be executed if the condition1 is false and condition2 is false`, indent: 1},
                                {code: `}`, indent: 0},
                            ]
                        },
                        {
                            id: 'switch', 
                            title: 'switch', 
                            cellDir: [
                                {text: `The switch statement executes a block of code depending on different cases.`},
                                {text: `The switch statement is a part of JavaScript's "Conditional" Statements, which are used to perform different actions based on different conditions. Use switch to select one of many blocks of code to be executed. This is the perfect solution for long, nested if/else statements.`},
                                {text: `The switch statement evaluates an expression. The value of the expression is then compared with the values of each case in the structure. If there is a match, the associated block of code is executed.`},
                                {text: `The switch statement is often used together with a break or a default keyword (or both). These are both optional:`},
                                {list: [
                                    'The break keyword breaks out of the switch block. This will stop the execution of more execution of code and/or case testing inside the block. If break is omitted, the next code block in the switch statement is executed.',
                                    'The default keyword specifies some code to run if there is no case match. There can only be one default keyword in a switch. Although this is optional, it is recommended that you use it, as it takes care of unexpected cases.'
                                ]},
                                {text: (<><b>Syntax</b></>)},
                                {code: `switch(expression) {`, indent: 0},
                                {code: `case n:`, indent: 1},
                                {code: `code block`, indent: 2},
                                {code: `break;`, indent: 2},
                                {code: `case n:`, indent: 1},
                                {code: `code block`, indent: 2},
                                {code: `break;`, indent: 2},
                                {code: `default:`, indent: 1},
                                {code: `default code block`, indent: 2},
                                {code: `}`, indent: 0},
                            ]
                        },
                        {
                            id: 'break', 
                            title: 'break', 
                            cellDir: [
                                {text: `The break statement breaks out of a switch or a loop.`},
                                {text: `In a switch, it breaks out of the switch block. This stops the execution of more code inside the switch.`},
                                {text: `In in a loop, it breaks out of the loop and continues executing the code after the loop (if any).`},
                                {code: `let text = "";`, indent: 0},
                                {code: `for (let i = 0; i < 5; i++) {`, indent: 0},
                                {code: `if (i === 3) break;`, indent: 1},
                                {code: `text += i + "<br>";`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `let text = "";i = 0;`, indent: 0},
                                {code: `while (i < 5) {`, indent: 0},
                                {code: `text += i + "<br>";`, indent: 1},
                                {code: `i++;`, indent: 1},
                                {code: `if (i === 3) break;`, indent: 1},
                                {code: `}`, indent: 0},
                            ]
                        },
                        {
                            id: 'for', 
                            title: 'for', 
                            cellDir: [
                                {text: `The for statement defines a code block that is executed as long as a condition is true.`},
                                {text: (<><b>Note: </b>{'If you omit statement 2, you must provide a break inside the loop. Otherwise the loop will never end. This will crash your browser.'}</>)},
                                {text: (<><b>Syntax</b></>)},
                                {code: `for (statement 1; statement 2; statement 3) {`, indent: 0},
                                {code: `code block to be executed`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `for (let i = 0; i < 5; i++) {`, indent: 0},
                                {code: `text += i + "<br>";`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Loop (iterate over) an array to collect car names:`},
                                {code: `const cars = ["BMW", "Volvo", "Saab", "Ford"];`, indent: 0},
                                {code: `for (let i = 0; i < cars.length; i++) {`, indent: 0},
                                {code: `text += cars[i] + "<br>";`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                `statement 1`, 
                                                (<>
                                                Optional.<br/>
                                                Executed before the code block starts.<br/>
                                                Normally used to initialize a counter variable.<br/>
                                                To initiate multiple values, separate each value with a comma.<br/><br/>
                                                {'This parameter can be omitted, but not the semicolon ";"'}
                                                </>)
                                            ],
                                            [
                                                `statement 2`, 
                                                (<>
                                                Optional.<br/>
                                                The condition for running the code block.<br/>
                                                If it returns true the loop will start over again, otherwise the loop will end.<br/><br/>
                                                {'This parameter can be omitted, but not the semicolon ";"'}
                                                </>)
                                            ],
                                            [
                                                `statement 3`, 
                                                (<>
                                                Optional.<br/>
                                                Executed after the code block.<br/>
                                                Normally used to increment the counter variable.<br/><br/>
                                                This parameter can be omitted (e.g. to increase/decrease values inside the loop)
                                                </>)
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'forIn', 
                            title: 'for ... in', 
                            cellDir: [
                                {text: `The for...in statements combo iterates (loops) over the properties of an object.`},
                                {text: `The code block inside the loop is executed once for each property.`},
                                {text: (<><b>Note: </b>{'Do not use for...in to iterate an array if the index order is important. Use a for loop instead.'}</>)},
                                {text: (<><b>Syntax</b></>)},
                                {code: `for (x in object) {`, indent: 0},
                                {code: `code block to be executed`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Iterate (loop) over the properties of an object:`},
                                {code: `constperson = {fname:"John", lname:"Doe", age:25};`, indent: 0},
                                {code: `let text = "";`, indent: 0},
                                {code: `for (let x in person) {`, indent: 0},
                                {code: `text += person[x] + " ";`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Iterate (loop) over the values of an array:`},
                                {code: `const cars = ["BMW", "Volvo", "Saab", "Ford"];`, indent: 0},
                                {code: `let text = "";`, indent: 0},
                                {code: `for (let x in cars) {`, indent: 0},
                                {code: `text += cars[x] + " ";`, indent: 1},
                                {code: `}`, indent: 0},
                            ]
                        },
                        {
                            id: 'forOf', 
                            title: 'for ... of', 
                            cellDir: [
                                {text: `The for...of statements combo iterates (loops) over the values of any iterable.`},
                                {text: `The code block inside the loop is executed once for each value.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `for (x of iterable) {`, indent: 0},
                                {code: `code block to be executed`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Iterate (loop) over the values of an array:`},
                                {code: `let text = "";`, indent: 0},
                                {code: `const cars = ['BMW', 'Volvo', 'Mini'];`, indent: 0},
                                {code: `for (let x of cars) {`, indent: 0},
                                {code: `text += x + " ";`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Iterate (loop) over the values of a string:`},
                                {code: `let text = "JavaScript";`, indent: 0},
                                {code: `for (let x of text) {`, indent: 0},
                                {code: `text += x + " ";`, indent: 1},
                                {code: `}`, indent: 0},
                            ]
                        },
                        {
                            id: 'doWhile', 
                            title: 'do ... while', 
                            cellDir: [
                                {text: `The do...while statements combo defines a code block to be executed once, and repeated as long as a condition is true.`},
                                {text: `The do...while is used when you want to run a code block at least one time.`},
                                {text: (<><b>Note: </b>{'If you use a variable in the condition, you must initialize it before the loop, and increment it within the loop. Otherwise the loop will never end. This will crash your browser.'}</>)},
                                {text: (<><b>Note: </b>{'If the condition is always true, the loop will never end. This will also crash your browser.'}</>)},
                                {text: (<><b>Syntax</b></>)},
                                {code: `do {`, indent: 0},
                                {code: `code block to be executed`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: `while (condition);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = "";`, indent: 0},
                                {code: `let i = 0;`, indent: 0},
                                {code: `do {`, indent: 0},
                                {code: `text += i + "<br>";`, indent: 1},
                                {code: `i++;`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: `while (i < 5);`, indent: 0},
                            ]
                        },
                        {
                            id: 'while', 
                            title: 'while', 
                            cellDir: [
                                {text: `The while statement creates a loop (araund a code block) that is executed while a condition is true.`},
                                {text: `The loop runs while the condition is true. Otherwise it stops.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `while (condition) {`, indent: 0},
                                {code: `code block to be executed`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Loop a code block as long as a i is less than 5:`},
                                {code: `let text = "";`, indent: 0},
                                {code: `let i = 0;`, indent: 0},
                                {code: `while (i < 5) {`, indent: 0},
                                {code: `text += i + "<br>";`, indent: 1},
                                {code: `i++;`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Loop (iterate over) an array to collect car names:`},
                                {code: `const cars = ["BMW", "Volvo", "Saab", "Ford"];`, indent: 0},
                                {code: `let text = "";`, indent: 0},
                                {code: `let i = 0;`, indent: 0},
                                {code: `while (i < cars.length) {`, indent: 0},
                                {code: `text += cars[i] + "<br>";`, indent: 1},
                                {code: `i++;`, indent: 1},
                                {code: `}`, indent: 0},
                            ]
                        },
                        {
                            id: 'continue', 
                            title: 'continue', 
                            cellDir: [
                                {text: `The continue statement breaks one iteration (in the loop) if a specified condition occurs, and continues with the next iteration in the loop.`},
                                {text: `The difference between continue and the break statement, is instead of "jumping out" of a loop, the continue statement "jumps over" one iteration in the loop.`},
                                {text: `However, when the continue statement is executed, it behaves differently for different types of loops:`},
                                {list: [
                                    'In a while loop, the condition is tested, and if it is true, the loop is executed again', 
                                    'In a for loop, the increment expression (e.g. i++) is first evaluated, and then the condition is tested to find out if another iteration should be done', 
                                ]},
                                {text: `The continue statement can also be used with an optional label reference.`},
                                {text: (<><b>Note: </b>{'The continue statement (with or without a label reference) can only be used inside a loop.'}</>)},
                                {text: `Loop through a block of code, but skip the value of 3:`},
                                {code: `let text = "";`, indent: 0},
                                {code: `for (let i = 0; i < 5; i++) {`, indent: 0},
                                {code: `if (i === 3) continue;`, indent: 1},
                                {code: `text += i + "<br>";`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `let text = "";`, indent: 0},
                                {code: `let i = 0;`, indent: 0},
                                {code: `while (i < 5) {`, indent: 0},
                                {code: `i++;`, indent: 1},
                                {code: `if (i === 3) continue;`, indent: 1},
                                {code: `text += i + "<br>";`, indent: 1},
                                {code: `}`, indent: 0},
                            ]
                        },
                        {
                            id: 'throw', 
                            title: 'throw', 
                            cellDir: [
                                {text: `The throw statement allows you to create a custom error.`},
                                {text: `The throw statement throws (generates) an error.`},
                                {text: `The throw statement throws an exception.`},
                                {text: `The exception can be a JavaScript String, a Number, a Boolean or an Object:`},
                                {text: (<><b>Note: </b>{'Using throw with try and catch, lets you control program flow and generate custom error messages.'}</>)},
                                {code: `function myFunction() {`, indent: 0},
                                {code: `const message = document.getElementById("message");`, indent: 1},
                                {code: `message.innerHTML = "";`, indent: 1},
                                {code: `let x = document.getElementById("demo").value;`, indent: 1},
                                {code: `try { `, indent: 1},
                                {code: `if(x == "") throw "is Empty";`, indent: 2},
                                {code: `if(isNaN(x)) throw "not a number";`, indent: 2},
                                {code: `if(x > 10) throw "too high";`, indent: 2},
                                {code: `if(x < 5) throw "too low";`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `catch(err) {`, indent: 1},
                                {code: `message.innerHTML = "Input " + err;`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `}`, indent: 0},
                            ]
                        },
                        {
                            id: 'tryCatchFinally', 
                            title: 'try ... catch ... finally', 
                            cellDir: [
                                {text: `The try...catch...finally statements combo handles errors without stopping JavaScript.`},
                                {text: `The try statement defines the code block to run (to try).`},
                                {text: `The catch statement defines a code block to handle any error.`},
                                {text: `The finally statement defines a code block to run regardless of the result.`},
                                {text: `The throw statement defines a custom error.`},
                                {text: `Both catch and finally are optional, but you must use one of them`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `try {`, indent: 0},
                                {code: `tryCode - Code block to run`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: `catch(err) {`, indent: 0},
                                {code: `catchCode - Code block to handle errors`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: `finally {`, indent: 0},
                                {code: `finallyCode - Code block to be executed regardless of the try result`, indent: 1},
                                {code: `}`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `function myFunction()`, indent: 0},
                                {code: `const message = document.getElementById("message");`, indent: 1},
                                {code: `message.innerHTML = "";`, indent: 1},
                                {code: `let x = document.getElementById("demo").value;`, indent: 1},
                                {code: `try { `, indent: 1},
                                {code: `if(x == "") throw "Empty";`, indent: 2},
                                {code: `if(isNaN(x)) throw "Not a number";`, indent: 2},
                                {code: `if(x > 10) throw "Too high";`, indent: 2},
                                {code: `if(x < 5) throw "Too low";`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `catch(err) {`, indent: 1},
                                {code: `message.innerHTML = "Error: " + err + ".";`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `finally {`, indent: 1},
                                {code: `document.getElementById("demo").value = "";`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `}`, indent: 0},
                            ]
                        },
                        {
                            id: 'debugger', 
                            title: 'debugger', 
                            cellDir: [
                                {text: `The debugger statement stops the execution of JavaScript, and calls the debugger.`},
                                {text: (<><b>Note: </b>{'If no debugging is available, the debugger statement has no effect. Normally, you activate debugging in your browser with the F12 key, and select "Console" in the debugger menu.'}</>)},
                                {code: `let x = 15 * 5;`, indent: 0},
                                {code: `debugger;`, indent: 0},
                                {code: `document.getElementbyId("demo").innerHTML = x;`, indent: 0},
                            ]
                        },
                        
                        
                    ] 
                },
                {
                    id: 'json',
                    title: 'JSON',
                    titleDir: [
                        {text: `JSON is a format for storing and transporting data.`},
                        {text: `JSON is text, and text can be transported anywhere, and read by any programming language.`},
                        {text: `JavaScript Objects can be converted into JSON, and JSON can be converted back into JavaScript Objects.`},
                        {text: `This way we can work with the data as JavaScript objects, with no complicated parsing or translations.`},
                        {code: `// a JavaScript object...:`, indent: 0},
                        {code: `var myObj = { "name":"John", "age":31, "city":"New York" };`, indent: 0},
                        {code: (<>&nbsp;</>), indent: 0},
                        {code: `// ...converted into JSON:`, indent: 0},
                        {code: `var myJSON = JSON.stringify(myObj);`, indent: 0},
                        {code: (<>&nbsp;</>), indent: 0},
                        {code: `// send JSON:`, indent: 0},
                        {code: `window.location = "demo_json.php?x=" + myJSON;`, indent: 0},
                    ],
                    RowDir: [
                        {
                            id: 'parse', 
                            title: 'parse()', 
                            cellDir: [
                                {text: `The JSON.parse() method parses a string and returns a JavaScript object.`},
                                {text: `The string has to be written in JSON format.`},
                                {text: `The JSON.parse() method can optionally transform the result with a function.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `JSON.parse(string, function)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `var obj = JSON.parse('{"firstName":"John", "lastName":"Doe"}');`, indent: 0},
                            ]
                        },
                        {
                            id: 'stringify', 
                            title: 'stringify()', 
                            cellDir: [
                                {text: `The JSON.stringify() method converts JavaScript objects into strings.`},
                                {text: `When sending data to a web server the data has to be a string.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `JSON.stringify(obj, replacer, space)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `var obj = { "name":"John", "age":30, "city":"New York"};`, indent: 0},
                                {code: `var myJSON = JSON.stringify(obj);`, indent: 0},
                                {code: `document.getElementById("demo").innerHTML = myJSON;`, indent: 0},
                            ]
                        },
                        
                        {
                            id: 'validDataTypes', 
                            title: 'Valid Data Types', 
                            headCellDir: [
                                {text: `In JSON, values must be one of the following data types:`},
                                {list: [
                                    'a string',
                                    'a number',
                                    'an object (containing valid JSON values)',
                                    'an array',
                                    'a boolean',
                                    'null',
                                ]},
                                {text: `JSON values cannot be one of the following data types:`},
                                {list: [
                                    'a function',
                                    'a date',
                                    'undefined',
                                ]}

                            ]
                        },
                    ] 
                },
            ]
        },
        {
            id: 'htmlDom', 
            title: 'HTML DOM', 
            dis: 'Access Browser Window and More', 
            TableDir: [
                {
                    id: 'windowObject',
                    title: 'Window Object',
                    titleDir: [
                        {text: (<>&nbsp;</>)},
                        {text: `The window object represents an open window in a browser.`},
                        {text: `If a document contain frames (<iframe> tags), the browser creates one window object for the HTML document, and one additional window object for each frame.`},
                    ],
                    RowDir: [
                        {
                            id: 'windowObjectProperties', 
                            title: 'Properties',
                            headCellDir: [
                            ]
                        },         
                        {
                            id: 'name', 
                            title: 'name', 
                            cellDir: [
                                {text: `The name property sets or returns the name of the window.`},
                                {text: `A windows does not need to have a name.`},
                                {code: `indow.name = "myWindowName";`, indent: 0},
                            ]
                        },
                        {
                            id: 'location', 
                            title: 'location', 
                            cellDir: [
                                {text: `The location object contains information about the current URL.`},
                                {text: `The location object is a property of the window object.`},
                                {code: `let origin = window.location;`, indent: 0},
                                {code: `let origin = location;`, indent: 0},
                                {code: (<><b>Output: </b>{'https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_loc_origin1'}</>), indent: 0},
                            ]
                        },
                        {
                            id: 'document', 
                            title: 'document', 
                            cellDir: [
                                {text: `When an HTML document is loaded into a web browser, it becomes a document object.`},
                                {text: `The document object is the root node of the HTML document.`},
                                {text: `The document object is a property of the window object.`},
                            ]
                        },
                        {
                            id: 'console', 
                            title: 'console', 
                            cellDir: [
                                {text: `Returns the Console Object for the window.`},
                            ]
                        },
                        {
                            id: 'screen', 
                            title: 'screen', 
                            cellDir: [
                                {text: `Returns the Screen object for the window`},
                            ]
                        },
                        {
                            id: 'history', 
                            title: 'history', 
                            cellDir: [
                                {text: `The history object contains the URLs visited by the user (in the browser window).`},
                                {text: `The history object is a property of the window object.`},
                            ]
                        },
                        {
                            id: 'navigator', 
                            title: 'navigator', 
                            cellDir: [
                                {text: `The navigator object contains information about the browser.`},
                                {text: `The location object is a property of the window object.`},
                            ]
                        },
                        {
                            id: 'frameElement', 
                            title: 'frameElement', 
                            cellDir: [
                                {text: `The frameElement property returns the frame where the window runs.`},
                                {text: `The frameElement property returns null if the window does not run in a frame.`},
                                {text: `The frameElement property is read only.`},
                                {text: `A frame can be any embedding element:`},
                                {text: `<frame>, <iframe>, <embed>, <object>, etc.`},
                                {code: `if (window.frameElement) {`, indent: 0},
                                {code: `let answer = "YES";`, indent: 1},
                                {code: `}`, indent: 0},
                            ]
                        },
                        {
                            id: 'frames', 
                            title: 'frames', 
                            cellDir: [
                                {text: `The frames property returns an array with all window objects in the window.`},
                                {text: `The frames property is read-only.`},
                                {text: `The windows can be accessed by index numbers. The first index is 0.`},
                                {code: `window.frames[0].location = "https://www.w3schools.com/jsref/";`, indent: 0},
                            ]
                        },
                        {
                            id: 'length', 
                            title: 'length', 
                            cellDir: [
                                {text: `The length property returns the number of (framed) windows in the window.`},
                                {text: `The length property is read-only.`},
                                {text: `The windows can be accessed by index numbers. The first index is 0.`},
                                {code: `let length = window.length;`, indent: 0},
                                {code: `Output: 3`, indent: 0},
                            ]
                        },
                        {
                            id: 'opener', 
                            title: 'opener', 
                            cellDir: [
                                {text: `The opener property returns a reference to the window that created the window. Window object`},
                                {text: `If window xxx opens window yyy:`},
                                {code: `yyy.opener`, indent: 0},
                                {text: `returns xxx.`},
                                {code: `yyy.opener.close() `, indent: 0},
                                {text: `closes xxx.`},
                            ]
                        },
                        {
                            id: 'parent', 
                            title: 'parent', 
                            cellDir: [
                                {text: `The parent property returns the parent window (of the current window). Window object`},
                                {text: `The parent property is read-only.`},
                                {text: `The parent property is not the same as the top property.`},
                                {text: `window.parent returns the immediate parent of a window.`},
                                {text: `window.top returns the topmost window in the hierarchy of windows.`},
                            ]
                        },
                        {
                            id: 'top', 
                            title: 'top', 
                            cellDir: [
                                {text: `The top property returns the topmost window in the current browser window. Window object`},
                                {text: `The top property is read-only.`},
                            ]
                        },
                        {
                            id: 'self', 
                            title: 'self', 
                            cellDir: [
                                {text: `The self property returns the current window. Window object`},
                                {text: `The self property is read-only.`},
                                {text: `The self property is often used in comparisons `},
                                {code: `if (window.top != window.self) {`, indent: 0},
                                {code: `text = "This window is NOT the topmost window!";`, indent: 1},
                                {code: `} else {`, indent: 0},
                                {code: `text = "This window is the topmost window!";`, indent: 1},
                                {code: `}`, indent: 0},
                            ]
                        },                                 
                        {
                            id: 'closed', 
                            title: 'closed', 
                            cellDir: [
                                {text: `The closed property returns true if the window is closed.`},
                                {text: `The closed property is read-only.`},
                            ]
                        },
                        {
                            id: 'innerHeight', 
                            title: 'innerHeight', 
                            cellDir: [
                                {text: `The innerHeight property returns the height of a window's content area.`},
                                {text: `The innerHeight property is read only.`},
                            ]
                        },
                        {
                            id: 'innerWidth', 
                            title: 'innerWidth', 
                            cellDir: [
                                {text: `The innerWidth property returns the width of a window's content area.`},
                                {text: `The innerWidth property is read-only.`},
                            ]
                        },
                        {
                            id: 'outerHeight', 
                            title: 'outerHeight', 
                            cellDir: [
                                {text: `TheouterHeight property returns the outer height of the browser window, including all interface elements (like toolbars/scrollbars).`},
                                {text: `TheouterHeight property is read only.`},
                            ]
                        },
                        {
                            id: 'outerWidth', 
                            title: 'outerWidth', 
                            cellDir: [
                                {text: `The outerWidth property returns the outer width of the browser window, including all interface elements (like toolbars/scrollbars).`},
                                {text: `TheouterWidth property is read only.`},
                            ]
                        },
                        {
                            id: 'screenLeft', 
                            title: 'screenLeft', 
                            cellDir: [
                                {text: `The screenLeft property returns the x (horizontal) position of a window, relative to the screen.`},
                            ]
                        },
                        {
                            id: 'screenTop', 
                            title: 'screenTop', 
                            cellDir: [
                                {text: `The screenTop property returns the y (vertical) position of the window relative to the screen.`},
                            ]
                        },
                        {
                            id: 'screenX', 
                            title: 'screenX', 
                            cellDir: [
                                {text: `The screenX property returns the x (horizontal) coordinate of a window, relative to the screen.`},
                            ]
                        },
                        {
                            id: 'screenY', 
                            title: 'screenY', 
                            cellDir: [
                                {text: `The screenY property returns the y (vertical) coordinate of a window, relative to the screen.`},
                            ]
                        },
                        {
                            id: 'pageXOffset', 
                            title: 'pageXOffset', 
                            cellDir: [
                                {text: `The pageXOffset property returns the pixels a document has scrolled from the upper left corner of the window.`},
                                {text: `The pageXOffset property is equal to the scrollX property.`},
                                {text: `The pageXOffset property is read-only.`},
                            ]
                        },
                        {
                            id: 'pageYOffset', 
                            title: 'pageYOffset', 
                            cellDir: [
                                {text: `The pageXOffset property returns the pixels a document has scrolled from the upper left corner of the window.`},
                                {text: `The pageXOffset property is equal to the scrollX property.`},
                                {text: `pageXOffset property is read-only.`},
                            ]
                        },
                        {
                            id: 'localStorage', 
                            title: 'localStorage', 
                            cellDir: [
                                {text: `The localStorage object allows you to save key/value pairs in the browser. Storage Object`},
                                {text: `The localStorage object stores data with no expiration date.`},
                                {text: `The data is not deleted when the browser is closed, and are available for future sessions.`},
                            ]
                        },
                        {
                            id: 'sessionStorage', 
                            title: 'sessionStorage', 
                            cellDir: [
                                {text: `The sessionStorage object let you store key/value pairs in the browser. Storage Object`},
                                {text: `The sessionStorage object stores data for only one session.`},
                                {text: `The data is deleted when the browser is closed.`},
                            ]
                        },
                        {
                            id: 'storageObject', 
                            title: 'Storage Object', 
                            cellDir: [
                                {text: `The Storage object of the Web Storage API provides access to the session storage or local storage for a particular domain. This allows you to read, add, modify, and delete stored data items.`},
                                {text: (<><b>{'length'}</b></>)},
                                {text: `Returns the number of data items stored in the Storage object`},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'setItem()'}</b></>)},
                                {text: `Adds a key to the storage, or updates a key's value if it already exists`},
                                {code: `localStorage.setItem(keyname, value)`, indent: 0},
                                {code: `localStorage.setItem("mytime", Date.now());`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'getItem()'}</b></>)},
                                {text: `Returns the value of the specified key name`},
                                {code: `localStorage.getItem(keyname)`, indent: 0},
                                {code: `var x = localStorage.getItem("mytime");`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'removeItem()'}</b></>)},
                                {text: `Removes a key from the storage`},
                                {code: `localStorage.removeItem(keyname)`, indent: 0},
                                {code: `localStorage.removeItem("mytime");`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'key()'}</b></>)},
                                {text: `Returns the name of the nth key in the storage`},
                                {code: `sessionStorage.key(index)`, indent: 0},
                                {code: `var x = localStorage.key(0);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'clear()'}</b></>)},
                                {text: `Empty all key out of the storage`},
                            ]
                        },
                        {
                            id: 'windowObjectMethods', 
                            title: 'Methods',
                            headCellDir: []
                        },   
                        {
                            id: 'open', 
                            title: 'open()', 
                            cellDir: [
                                {text: `The open() method opens a new browser window, or a new tab, depending on your browser settings and the parameter values.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `window.open(URL, name, specs, replace)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `window.open("", "", "left=700,top=350,width=200,height=100");`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'URL'}</b></>)},
                                {text: `Optional.`},
                                {text: `The URL of the page to open.`},
                                {text: `If no URL is specified, a new blank window/tab is opened`},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'name'}</b></>)},
                                {text: `Optional.`},
                                {text: `TThe target attribute or the name of the window.`},
                                {text: `The following values are supported:`},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                `_blank`, 
                                                `URL is loaded into a new window, or tab. This is the default`
                                            ],
                                            [
                                                `_parent`, 
                                                `URL is loaded into the parent frame`
                                            ],
                                            [
                                                `_self`, 
                                                `URL replaces the current page`
                                            ],
                                            [
                                                `_top`, 
                                                `URL replaces any framesets that may be loaded`
                                            ],
                                            [
                                                `name`, 
                                                `The name of the window (does not specify the title of the window)`
                                            ],

                                        ]

                                    }
                                },
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'specs'}</b></>)},
                                {text: `Optional.`},
                                {text: `A comma-separated list of items, no whitespaces.`},
                                {text: `The following values are supported:`},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                `fullscreen=yes|no|1|0`, 
                                                `Whether or not to display the browser in full-screen mode. Default is no. A window in full-screen mode must also be in theater mode. IE only`
                                            ],
                                            [
                                                `height=pixels`, 
                                                `The height of the window. Min. value is 100`
                                            ],
                                            [
                                                `left=pixels`, 
                                                `The left position of the window. Negative values not allowed`
                                            ],
                                            [
                                                `location=yes|no|1|0`, 
                                                `Whether or not to display the address field. Opera only`
                                            ],
                                            [
                                                `menubar=yes|no|1|0`, 
                                                `Whether or not to display the menu bar`
                                            ],
                                            [
                                                `resizable=yes|no|1|0`, 
                                                `Whether or not the window is resizable. IE only`
                                            ],
                                            [
                                                `scrollbars=yes|no|1|0`, 
                                                `Whether or not to display scroll bars. IE, Firefox & Opera only`
                                            ],
                                            [
                                                `status=yes|no|1|0`, 
                                                `Whether or not to add a status bar`
                                            ],
                                            [
                                                `titlebar=yes|no|1|0`, 
                                                `Whether or not to display the title bar. Ignored unless the calling application is an HTML Application or a trusted dialog box`
                                            ],
                                            [
                                                `toolbar=yes|no|1|0`, 
                                                `Whether or not to display the browser toolbar. IE and Firefox only`
                                            ],
                                            [
                                                `top=pixels`, 
                                                `The top position of the window. Negative values not allowed`
                                            ],
                                            [
                                                `width=pixels`, 
                                                `The width of the window. Min. value is 100`
                                            ],

                                        ]

                                    }
                                },
                            ]
                        },
                        {
                            id: 'close', 
                            title: 'close()', 
                            cellDir: [
                                {text: `The close() method closes a window.`},
                            ]
                        },
                        {
                            id: 'stop', 
                            title: 'stop()', 
                            cellDir: [
                                {text: `The stop() method stops window loading.`},
                                {text: `The stop() method is the same as clicking stop in the browser.`},
                                {text: `The stop() method can be used to stop loading an image if it takes too long.`},
                            ]
                        },
                        {
                            id: 'print', 
                            title: 'print()', 
                            cellDir: [
                                {text: `The print() method prints the contents of the current window.`},
                                {text: `The print() method opens the Print Dialog Box, which lets the user to select preferred printing options.`},
                            ]
                        },
                        {
                            id: 'prompt', 
                            title: 'prompt()', 
                            cellDir: [
                                {text: `The prompt() method displays a dialog box that prompts the user for input.`},
                                {text: `The prompt() method returns the input value if the user clicks "OK", otherwise it returns null.`},
                                {text: (<><b>Note: </b>{'A prompt box is used if you want the user to input a value. When a prompt box pops up, the user will have to click either "OK" or "Cancel" to proceed.Do not overuse this method. It prevents the user from accessing other parts of the page until the box is closed.'}</>)},
                                {text: (<><b>Syntax</b></>)},
                                {code: `prompt(text, defaultText)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `prompt("Please enter your name", "Harry Potter")`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'Parameters'}</b></>)},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                `text`, 
                                                (<>
                                                Required.<br/>
                                                The text to display in the dialog box.
                                                </>)
                                            ],
                                            [
                                                `defaultText`, 
                                                (<>
                                                Optional.<br/>
                                                The default input text.
                                                </>)
                                            ],
                                            
                                        ]

                                    }
                                },
                                {text: (<><b>{'Return Value'}</b></>)},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                `A string`, 
                                                (<>
                                                {'If the user clicks "OK", the input value is returned.'}<br/>
                                                Otherwise null is returned.         
                                                </>)
                                            ],
                                            
                                        ]

                                    }
                                },
                            ]
                        },
                        {
                            id: 'confirm', 
                            title: 'confirm()', 
                            cellDir: [
                                {text: `The confirm() method displays a dialog box with a message, an OK button, and a Cancel button.`},
                                {text: `The confirm() method returns true if the user clicked "OK", otherwise false.`},
                                {text: `A confirm box is often used if you want the user to verify or accept something.`},
                                {text: `A confirm box takes the focus away from the current window, and forces the user to read the message.`},
                                {text: (<><b>Note: </b>{'Do not overuse this method. It prevents the user from accessing other parts of the page until the box is closed.'}</>)},
                                {code: `confirm("Press a button!");`, indent: 0},
                            ]
                        },
                        {
                            id: 'alert', 
                            title: 'alert()', 
                            cellDir: [
                                {text: `The alert() method displays an alert box with a message and an OK button.`},
                                {text: `The alert() method is used when you want information to come through to the user.`},
                                {code: `alert("Hello! I am an alert box!!");`, indent: 0},
                            ]
                        },
                        {
                            id: 'focus', 
                            title: 'focus()', 
                            cellDir: [
                                {text: `The focus() method sets focus to a window.`},
                                {text: `The focus() method makes a request to bring a window to the front.`},
                                {text: `It may not work as you expect, due to different user settings.`},
                            ]
                        },
                        {
                            id: 'blur', 
                            title: 'blur()', 
                            cellDir: [
                                {text: `The blur() method removes focus from a window.`},
                                {text: `The blur() method makes a request to bring a window to the background.`},
                                {text: `It may not work as you expect, due to different user settings.`},
                            ]
                        },
                        {
                            id: 'moveBy', 
                            title: 'moveBy()', 
                            cellDir: [
                                {text: `The moveBy() method moves a window a number of pixels relative to its current coordinates.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `window.moveBy(x, y)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `myWindow.moveBy(250, 250);`, indent: 0},
                            ]
                        },
                        {
                            id: 'moveTo', 
                            title: 'moveTo()', 
                            cellDir: [
                                {text: `The moveTo() method moves a window to the specified coordinates.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `window.moveTo(x, y)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `myWindow.moveTo(500, 100);`, indent: 0},
                            ]
                        },
                        {
                            id: 'resizeBy', 
                            title: 'resizeBy()', 
                            cellDir: [
                                {text: `The resizeBy() method resizes a window by a specified amount.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `resizeBy(width, height)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `myWindow.resizeBy(250, 250);`, indent: 0},
                            ]
                        },                           
                        {
                            id: 'resizeTo', 
                            title: 'resizeTo()', 
                            cellDir: [
                                {text: `The resizeTo() method resizes a window to a new width and height.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `window.resizeTo(width, height)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `myWindow.resizeBy(250, 250);`, indent: 0},
                            ]
                        },
                        {
                            id: 'scrollBy', 
                            title: 'scrollBy()', 
                            cellDir: [
                                {text: `The scrollBy() method scrolls the document by the specified number of pixels.`},
                                {text: `For the scrollBy() method to work, the document must be larger than the screen, and the scrollbar must be visible.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `window.scrollBy(x, y)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `window.scrollBy(0, 100);`, indent: 0},
                            ]
                        },
                        {
                            id: 'scrollTo', 
                            title: 'scrollTo()', 
                            cellDir: [
                                {text: `The scrollTo() method scrolls the document to specified coordinates.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `window.scrollBy(x, y)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `window.scrollBy(0, 100);`, indent: 0},
                            ]
                        },
                        {
                            id: 'getComputedStyle', 
                            title: 'getComputedStyle()', 
                            cellDir: [
                                {text: `The getComputedStyle() method gets the computed CSS properties and values of an HTML element.`},
                                {text: `The getComputedStyle() method returns a CSSStyleDeclaration object.`},
                                {text: `The computed style is the style used on the element after all styling sources have been applied.`},
                                {code: `const element = document.getElementById("test");`, indent: 0},
                                {code: `const cssObj = window.getComputedStyle(element, null);`, indent: 0},
                            ]
                        },
                        {
                            id: 'getSelection', 
                            title: 'getSelection()', 
                            cellDir: [
                                {text: `Returns a Selection object representing the range of text selected by the user`},
                            ]
                        },
                        {
                            id: 'matchMedia', 
                            title: 'matchMedia()', 
                            cellDir: [
                                {text: `The matchMedia() method returns a MediaQueryList Object with the results from the query.`},
                                {text: `The media queries of the matchMedia() method can be any of the media features of the CSS @media rule, like min-height, min-width, orientation, etc.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `window.matchMedia(mediaQuery)`, indent: 0},
                                {text: (<><b>Example</b></>)},
                                {code: `matchMedia("(max-height: 480px)")`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `// Create a match function`, indent: 0},
                                {code: `function myFunction(x) {`, indent: 0},
                                {code: `if (x.matches) {`, indent: 1},
                                {code: `document.body.style.backgroundColor = "yellow";`, indent: 2},
                                {code: `} else {`, indent: 1},
                                {code: `document.body.style.backgroundColor = "pink";`, indent: 2},
                                {code: `}`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `// Create a MediaQueryList object`, indent: 0},
                                {code: `const mmObj = window.matchMedia("(max-width: 700px)")`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `// Call the match function at run time:`, indent: 0},
                                {code: `myFunction(mmObj);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `// Add the match function as a listener for state changes:`, indent: 0},
                                {code: `mmObj.addListener(myFunction);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'MediaQueryList Properties & Methods'}</b></>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `matches`, 
                                                (<>
                                                A boolean.<br/>
                                                true if the document matches the query, otherwise false.
                                                </>)
                                            ],
                                            [
                                                `media`, 
                                                (<>
                                                A string.<br/>
                                                A media query (list).
                                                </>)
                                            ],
                                            [
                                                `removeListener()`, 
                                                (<>
                                                Removes a previously added listener function from the media query list. Does nothing if the specified listener is not already in the list
                                                </>)
                                            ],
                                            
                                        ]

                                    }
                                },
                            ]
                        },
                        {
                            id: 'requestAnimationFrame', 
                            title: 'requestAnimationFrame()', 
                            cellDir: [
                                {text: `Requests the browser to call a function to update an animation before the next repaint`},
                            ]
                        },
                        {
                            id: 'setInterval', 
                            title: 'setInterval()', 
                            cellDir: [
                                {text: `The setInterval() method calls a function at specified intervals (in milliseconds).`},
                                {code: `setInterval(function () {element.innerHTML += "Hello"}, 1000);`, indent: 0},
                            ]
                        },
                        {
                            id: 'clearInterval', 
                            title: 'clearInterval()', 
                            cellDir: [
                                {text: `The clearInterval() method clears a timer set with the setInterval() method.`},
                                {text: `To clear an interval, use the id returned from setInterval():`},
                                {code: `myInterval = setInterval(function, milliseconds);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Then you can to stop the execution by calling clearInterval():`},
                                {code: `clearInterval(myInterval);`, indent: 0},
                            ]
                        },
                        {
                            id: 'setTimeout', 
                            title: 'setTimeout()', 
                            cellDir: [
                                {text: `The setTimeout() method calls a function after a number of milliseconds.`},
                                {code: `const myTimeout = setTimeout(myGreeting, 5000);`, indent: 0},
                            ]
                        },
                        {
                            id: 'clearTimeout', 
                            title: 'clearTimeout()', 
                            cellDir: [
                                {text: `The clearTimeout() method clears a timer set with the setTimeout() method.`},
                                {text: `To clear a timeout, use the id returned from setTimeout():`},
                                {code: `myTimeout = setTimeout(function, milliseconds);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Then you can to stop the execution by calling clearTimeout():`},
                                {code: `clearTimeout(myTimeout);`, indent: 0},
                            ]
                        },
                        {
                            id: 'btoa', 
                            title: 'btoa()', 
                            cellDir: [
                                {text: `The btoa() method encodes a string in base-64.`},
                                {text: `The btoa() method uses the "A-Z", "a-z", "0-9", "+", "/" and "=" characters to encode the string.`},
                                {code: `let text = "Hello World!";`, indent: 0},
                                {code: `let encoded = window.btoa(text);`, indent: 0},
                            ]
                        },
                        {
                            id: 'atob', 
                            title: 'atob()', 
                            cellDir: [
                                {text: `The atob() method decodes a base-64 encoded string.`},
                                {code: `let text = "Hello World!";`, indent: 0},
                                {code: `let encoded = window.btoa(text);`, indent: 0},
                                {code: `let decoded = window.atob(encoded);`, indent: 0},
                            ]
                        },
                    ] 
                },
                {
                    id: 'historyObject',
                    title: 'History Object',
                    titleDir: [
                        {text: (<>&nbsp;</>)},
                        {text: `The history object contains the URLs visited by the user (in the browser window).`},
                        {text: `The history object is a property of the window object.`},
                        {text: `The history object is accessed with window.history or just history:`},
                        {code: `let length = window.history.length;`, indent: 0},
                        {code: `let length = history.length;`, indent: 0},
                    ],
                    RowDir: [
                        {
                            id: 'length', 
                            title: 'length', 
                            cellDir: [
                                {text: `The length property returns the number of URLs in the history list of the current browser window.`},
                                {text: `The property returns at least 1, because the list includes the current page.`},
                                {text: `This property is useful to find out how many pages the user has visited in the current browsing session.`},
                            ]
                        },
                        {
                            id: 'go', 
                            title: 'go()', 
                            cellDir: [
                                {text: `The history.go() method loads a URL (page) from the history list.`},
                                {text: `The history.go() method only works if the page exist in the history list.`},
                                {text: `history.go(0) reloads the page.`},
                                {text: `history.go(-1) is the same as history.back().`},
                                {text: `history.go(1) is the same as history.forward().`},
                            ]
                        },
                        {
                            id: 'back', 
                            title: 'back()', 
                            cellDir: [
                                {text: `The history.back() method loads the previous URL (page) in the history list.`},
                                {text: `history.back() method only works if a previous page exists.`},
                                {text: `history.back() is the same as history.go(-1).`},
                                {text: `history.back() is the same as clicking "Back" your browser.	`},
                            ]
                        },
                        {
                            id: 'forward', 
                            title: 'forward()', 
                            cellDir: [
                                {text: `The history.forward() method loads the next URL (page) in the history list.`},
                                {text: `The history.forward() method only works if a next page exists.`},
                                {text: `story.forward() is the same as history.go(1).`},
                                {text: `history.forward() is the same as clicking "Forward" in your browser.`},
                            ]
                        },
                        
                    ] 
                },
                {
                    id: 'locationObject',
                    title: 'Location Object',
                    titleDir: [
                        {text: (<>&nbsp;</>)},
                        {text: `The location object contains information about the current URL.`},
                        {text: `The location object is a property of the window object.`},
                        {text: `The location object is accessed with window.location or just location`},
                        {code: `let origin = window.location.origin;`, indent: 0},
                        {code: `let origin = location.origin;`, indent: 0},
                    ],
                    RowDir: [
                        {
                            id: 'locationObjectProperties', 
                            title: 'Properties',
                            headCellDir: []
                        },    
                        {
                            id: 'href', 
                            title: 'href', 
                            cellDir: [
                                {text: `The location.href property sets or returns the entire URL of the current page.`},
                                {code: `location.href = https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_loc_href`, indent: 0},
                            ]
                        },
                        {
                            id: 'pathname', 
                            title: 'pathname', 
                            cellDir: [
                                {text: `The pathname property sets or returns the pathname of a URL (page).`},
                                {code: `location.pathname = /jsref/tryit.asp`, indent: 0},
                            ]
                        },
                        {
                            id: 'port', 
                            title: 'port', 
                            cellDir: [
                                {text: `The port property sets or returns the port number of a URL.`},
                                {text: `If the port number is not specified in the URL, or if it is a default port (80 for http) or (443 for https), most browsers will return an empty string.`},
                                {code: `location.port = 55`, indent: 0},
                            ]
                        },
                        {
                            id: 'origin', 
                            title: 'origin', 
                            cellDir: [
                                {text: `The origin property returns the protocol, hostname and port number of a URL.`},
                                {text: `The origin property is read-only.`},
                                {code: `location.origin = https://www.w3schools.com:55`, indent: 0},
                            ]
                        },
                        {
                            id: 'host', 
                            title: 'host', 
                            cellDir: [
                                {text: `The location.host property returns the host (IP adress or domain) and port of a URL.`},
                                {text: `The location.host property can also be set, to navigate to the same URL with a new host and port.`},
                                {code: `location.host = www.w3schools.com:55`, indent: 0},
                            ]
                        },
                        {
                            id: 'hostname', 
                            title: 'hostname', 
                            cellDir: [
                                {text: `The location.hostname property returns the host (IP adress or domain) of a URL.`},
                                {text: `location.hostname property can also be set, to navigate to the same URL with a new hostname.`},
                                {code: `location.hostname = www.w3schools.com`, indent: 0},
                            ]
                        },
                        {
                            id: 'protocol', 
                            title: 'protocol', 
                            cellDir: [
                                {text: `The protocol property sets or returns the protocol of the current URL, including the colon (:).`},
                                {text: `The protocol is a standard that specifies how data are transmitted between computers.`},
                                {code: `location.protocol = https:`, indent: 0},
                            ]
                        },
                        {
                            id: 'hash', 
                            title: 'hash', 
                            cellDir: [
                                {text: `The location.hash property sets or returns the anchor part of a URL, including the hash sign (#).`},
                                {text: `When  location.hash is used to set the anchor part, do not include the hash sign (#).`},
                                {code: `location.hash = #mark_array_from`, indent: 0},
                            ]
                        },
                        {
                            id: 'search', 
                            title: 'search', 
                            cellDir: [
                                {text: `The search property returns the querystring part of a URL, including the question mark (?).`},
                                {text: `The search property can also be used to set the querystring.`},
                                {text: `The querystring part is the part of the URL after the question mark (?).`},
                                {text: `The querystring is used for parameter passing.`},
                                {code: `location.search = ?answer=yes`, indent: 0},
                            ]
                        },
                        {
                            id: 'locationObjectMethods', 
                            title: 'Methods',
                            headCellDir: []
                        },
                        {
                            id: 'assign', 
                            title: 'assign()', 
                            cellDir: [
                                {text: `The assign() method loads a new document.`},
                                {code: `location.assign("https://www.w3schools.com");`, indent: 0},
                            ]
                        },
                        {
                            id: 'replace', 
                            title: 'replace()', 
                            cellDir: [
                                {text: `The replace() method replaces the current document with a new one.`},
                                {text: `replace() removes the current URL from the document history.`},
                                {text: `With replace() it is not possible to use "back" to navigate back to the original document.`},
                                {code: `location.replace("https://www.w3schools.com");`, indent: 0},
                            ]
                        },
                        {
                            id: 'reload', 
                            title: 'reload()', 
                            cellDir: [
                                {text: `The reload() method reloads the current document.`},
                                {text: `The reload() method does the same as the reload button in your browser.`},
                                {code: ``, indent: 0},
                            ]
                        },
                        
                        
                    ] 
                },
                {
                    id: 'navigatorObject',
                    title: 'Navigator Object',
                    titleDir: [
                        {text: `The navigator object contains information about the browser.`},
                        {text: `The navigator object is a property of the window object.`},
                        {text: `The navigator object is accessed with window.navigator or just navigator:`},
                        {code: `let url = window.navigator.language;`, indent: 0},
                        {code: `let url = navigator.language;`, indent: 0},
                    ],
                    RowDir: [                  
                        {
                            id: 'appName', 
                            title: 'appName', 
                            cellDir: [
                                {text: `The appName property returns the browser name.`},
                                {text: `The appName property is read-only.`},
                                {text: `For compatibility reasons, all modern browsers returns "Netscape".`},
                                {code: `let browser = navigator.appName;`, indent: 0},
                            ]
                        },
                        {
                            id: 'appCodeName', 
                            title: 'appCodeName', 
                            cellDir: [
                                {text: `The appCodeName property returns browser code name.`},
                                {text: `The appCodeName property is read-only.`},
                                {text: `For compatibility reasons, all modern browsers returns "Mozilla".`},
                                {code: `let browser = navigator.appCodeName;`, indent: 0},
                            ]
                        },
                        {
                            id: 'appVersion', 
                            title: 'appVersion', 
                            cellDir: [
                                {text: `The appVersion property returns the browser version.`},
                                {text: `The appVersion property is read-only.`},
                                {code: `let version = navigator.appVersion;`, indent: 0},
                            ]
                        },
                        {
                            id: 'platform', 
                            title: 'platform', 
                            cellDir: [
                                {text: `The platform property returns for which platform the browser is compiled.`},
                                {text: `The platform property is read-only.`},
                                {code: `let platform = navigator.platform;`, indent: 0},
                            ]
                        },
                        {
                            id: 'product', 
                            title: 'product', 
                            cellDir: [
                                {text: `The product property returns the browser engine (product name).`},
                                {text: `The product property is read-only.`},
                                {code: `let product = navigator.product;`, indent: 0},
                            ]
                        },
                        {
                            id: 'language', 
                            title: 'language', 
                            cellDir: [
                                {text: `The language property returns the browser language.`},
                                {text: `The language property is read-only.`},
                                {code: `let language = navigator.language;`, indent: 0},
                            ]
                        },
                        {
                            id: 'geolocation', 
                            title: 'geolocation', 
                            cellDir: [
                                {text: `The geolocation property returns a Geolocation object that can be used to locate the user's position.`},
                                {text: `The geolocation property is read-only.`},
                                {text: `The geolocation property is only available in secure contexts (HTTPS).`},
                                {text: `The geolocation property is only available if the user approves it.`},
                                {text: (<><b>Note: </b>{'Geolocation is most accurate for devices with GPS, like iPhone.'}</>)},
                            ]
                        },
                        {
                            id: 'userAgent', 
                            title: 'userAgent', 
                            cellDir: [
                                {text: `The userAgent property returns the user-agent header sent by the browser to the server.`},
                                {text: `The userAgent property is read-only.`},
                                {text: `The value returned, contains information about the browser name, version and platform.`},
                                {text: `The web specification suggests that browsers should provide as little header information as possible. Never assume that this property will stay unchanged in future browsers.`},
                                {code: `let agent = navigator.userAgent;`, indent: 0},
                            ]
                        },
                        {
                            id: 'onLine', 
                            title: 'onLine', 
                            cellDir: [
                                {text: `The onLine property returns true if the browser is online, otherwise false.`},
                                {text: `The onLine property is read-only.`},
                            ]
                        },
                        {
                            id: 'cookieEnabled', 
                            title: 'cookieEnabled', 
                            cellDir: [
                                {text: `The cookieEnabled property returns true if cookies are enabled in the browser.`},
                            ]
                        },
                        {
                            id: 'javaEnabled', 
                            title: 'javaEnabled()', 
                            cellDir: [
                                {text: `The javaEnabled() method returns a Boolean value that specifies whether the browser has Java enabled.`},
                            ]
                        },
                        
                    ] 
                },
                {
                    id: 'screenObject',
                    title: 'Screen Object',
                    titleDir: [
                        //{text: (<>&nbsp;</>)},
                        {text: `The screen object contains information about the visitor's screen.`},
                    ],
                    RowDir: [  
                        {
                            id: 'height', 
                            title: 'height', 
                            cellDir: [
                                {text: `The height property returns the total height of the user's screen.`},
                                {text: `The height property returns the height in pixels.`},
                                {text: `The height property is read only.`},
                                {code: `let height = screen.height;`, indent: 0},
                            ]
                        },
                        {
                            id: 'width', 
                            title: 'width', 
                            cellDir: [
                                {text: `The width property returns the total width of the user's screen.`},
                                {text: `The width property returns width in pixels.`},
                                {text: `The width property is read-only.`},
                                {code: `let width = screen.width;`, indent: 0},
                            ]
                        },
                        {
                            id: 'availHeight', 
                            title: 'availHeight', 
                            cellDir: [
                                {text: `The availHeight property returns the height of the user's screen.`},
                                {text: `The availHeight property returns the height in pixels.`},
                                {text: `The availHeight property returns the height minus interface features like the Windows Taskbar.`},
                            ]
                        },
                        {
                            id: 'availWidth', 
                            title: 'availWidth', 
                            cellDir: [
                                {text: `The availWidth property returns the width of the user's screen.`},
                                {text: `The availWidth property returns the width in pixels.`},
                                {text: `The availWidth property returns the width minus interface features like the Windows Taskbar.`},
                                {text: `The availWidth property is read-only.`},
                            ]
                        },
                        {
                            id: 'pixelDepth', 
                            title: 'pixelDepth', 
                            cellDir: [
                                {text: `The pixelDepth property returns the screen's color depth.`},
                                {text: `The pixelDepth property returns the color depth in bits per pixel.`},
                                {text: `The pixelDepth property is read-only.`},
                                {code: `let depth = screen.pixelDepth;`, indent: 0},
                            ]
                        },
                        {
                            id: 'colorDepth', 
                            title: 'colorDepth', 
                            cellDir: [
                                {text: `The colorDepth property returns the screen's color depth.`},
                                {text: `The colorDepth property returns the depth in bits per pixel.`},
                                {text: `The colorDepth property is read-only.`},
                                {code: `let depth = screen.colorDepth;`, indent: 0},
                            ]
                        },
                        
                        
                    ] 
                },
                {
                    id: 'fullscreenApi',
                    title: 'Fullscreen API',
                    titleDir: [
                        {text: `The Fullscreen API has methods and properties to handle HTML elements in full-screen.`},
                    ],
                    RowDir: [
                        {
                            id: 'fullscreenElement', 
                            title: 'fullscreenElement', 
                            cellDir: [
                                {text: `Returns the element that is in full-screen mode,`},
                            ]
                        },
                        {
                            id: 'requestFullscreen', 
                            title: 'requestFullscreen()', 
                            cellDir: [
                                {text: `Opens an element in fullscreen mode`},
                            ]
                        },
                        {
                            id: 'exitFullscreen', 
                            title: 'exitFullscreen()', 
                            cellDir: [
                                {text: `Cancels the element in fullscreen mode`},
                            ]
                        },
                        {
                            id: 'fullscreenEnabled', 
                            title: 'fullscreenEnabled()', 
                            cellDir: [
                                {text: `Returns true if the document can be viewed in fullscreen mode`},
                            ]
                        },
                        
                    ] 
                },
                {
                    id: 'consoleObject',
                    title: 'Console Object',
                    titleDir: [
                        {text: `The console object provides access to the browser's debugging console.`},
                        {text: `The console object is a property of the window object.`},
                        {code: `window.console.error("You made a mistake");`, indent: 0},
                        {code: `console.error("You made a mistake");`, indent: 0},
                    ],
                    RowDir: [                      
                        {
                            id: 'log', 
                            title: 'log()', 
                            cellDir: [
                                {text: `The log() method writes (logs) a message to the console.`},
                                {text: `The log() method is useful for testing purposes.`},
                                {text: `When testing console methods, be sure to have the console view visible.`},
                                {text: `Press F12 to open the console veiw.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `console.log(message)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `console.log("Hello world!");`, indent: 0},
                            ]
                        },
                        {
                            id: 'group', 
                            title: 'group()', 
                            cellDir: [
                                {text: `The group() method starts a message group.`},
                                {text: `All new messages will be written inside this group.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `console.group(label)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `console.group("Logs");`, indent: 0},
                            ]
                        },
                        {
                            id: 'groupCollapsed', 
                            title: 'groupCollapsed()', 
                            cellDir: [
                                {text: `The groupCollapsed() method starts a collapsed message group.`},
                                {text: `In the Console, click the expand button to open the new message group.`},
                                {text: `All new messages will now be written inside this group.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `console.groupCollapsed(label)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `console.groupCollapsed("Logs");`, indent: 0},
                            ]
                        },
                        {
                            id: 'groupEnd', 
                            title: 'groupEnd()', 
                            cellDir: [
                                {text: `The groupEnd() ends a message group.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `console.groupEnd()`, indent: 0},
                            ]
                        },
                        {
                            id: 'info', 
                            title: 'info()', 
                            cellDir: [
                                {text: ``},
                                {text: (<><b>Syntax</b></>)},
                                {code: `The info() method writes a message to the console.`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `console.info("Hello world!");`, indent: 0},
                            ]
                        },
                        {
                            id: 'warn', 
                            title: 'warn()', 
                            cellDir: [
                                {text: `The warn() method writes a warning to the console.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `console.warn(message)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `console.warn("This is a warning!");`, indent: 0},
                            ]
                        },
                        {
                            id: 'error', 
                            title: 'error()', 
                            cellDir: [
                                {text: `The error() method writes an error message to the console.`},
                                {text: `The console is useful for testing purposes.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `console.error(message)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `console.error("You made a mistake");`, indent: 0},
                            ]
                        },
                        {
                            id: 'assert', 
                            title: 'assert()', 
                            cellDir: [
                                {text: `The assert() method writes a message to the console if an expression evaluates to false.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `console.assert(expression, message)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `console.assert(x + y == 11, "Expression returned false");`, indent: 0},
                            ]
                        },
                        {
                            id: 'clear', 
                            title: 'clear()', 
                            cellDir: [
                                {text: `The clear() method clears the console.`},
                                {text: `The clear() method also write "Console was cleared" in the console.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `console.clear();`, indent: 0},
                            ]
                        },
                        {
                            id: 'count', 
                            title: 'count()', 
                            cellDir: [
                                {text: `The count() method counts the number of times console.count() is called.`},
                                {text: `The count() method this number to the console.`},
                                {text: `You can add a label that will be included in the console view.`},
                                {text: `As a default value the label "Default" is used.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `console.count(label)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `console.count("myLabel");`, indent: 0},
                            ]
                        },
                        {
                            id: 'table', 
                            title: 'table()', 
                            cellDir: [
                                {text: `The table() method writes a table to the console.`},
                                {code: `console.table(tabledata, tablecolumns)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Write an array as a table in the console:`},
                                {code: `console.table(["Audi", "Volvo", "Ford"]); `, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Write an object as a table in the console:`},
                                {code: `console.table({firstname:"John", lastname:"Doe"});`, indent: 0},
                                {text: (<>&nbsp;</>)},
                            ]
                        },
                        {
                            id: 'trace', 
                            title: 'trace()', 
                            cellDir: [
                                {text: `The trace() method displays a trace that show how the code ended up at a certain point.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `console.trace(label)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `console.trace("Traces");`, indent: 0},
                            ]
                        },
                        {
                            id: 'time', 
                            title: 'time()', 
                            cellDir: [
                                {text: `The time() method starts a timer in the console view.`},
                                {text: `The time() method allows you to time code for testing purposes.`},
                                {text: `You can run many timers at the same time.`},
                                {text: `Use the label parameter to name different timers.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `console.time(label)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `console.time("error time");`, indent: 0},
                            ]
                        },
                        {
                            id: 'timeEnd', 
                            title: 'timeEnd()', 
                            cellDir: [
                                {text: `The timeEnd() method ends a timer, and writes the result to the console.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `console.timeEnd(label)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `console.timeEnd("error time");`, indent: 0},
                            ]
                        },
                        
                    ] 
                },
                {
                    id: 'documentObject',
                    title: 'Document Object',
                    titleDir: [
                        {text: `When an HTML document is loaded into a web browser, it becomes a document object.`},
                        {text: `The document object is the root node of the HTML document.`},
                        {text: `The document object is a property of the window object.`},
                        {text: `The document object is accessed with window.document or just document`},
                        {code: `let url = window.document.URL;`, indent: 0},
                        {code: `let url = document.URL;`, indent: 0},
                    ],
                    RowDir: [
                        {
                            id: 'documentObjectProperties', 
                            title: 'Properties',
                            headCellDir: []
                        },
                                                             
                        {
                            id: 'documentElement', 
                            title: 'documentElement', 
                            cellDir: [
                                {text: `The documentElement property returns a document's element (as an Element object).`},
                                {text: `The documentElement is read-only.`},
                                {text: `For HTML documents the returned object is the <html> element.`},
                            ]
                        },
                        {
                            id: 'doctype', 
                            title: 'doctype', 
                            cellDir: [
                                {text: `The doctype property returns a document's doctype (as a DocumentType object).`},
                                {text: `The doctype property returns null if the document has no doctype.`},
                                {text: `The doctype property is read-only.`},
                                {text: `The doctype.name property returns the name of the doctype.`},
                            ]
                        },
                        {
                            id: 'URL', 
                            title: 'URL', 
                            cellDir: [
                                {text: `The URL property returns the full URL of the document.`},
                            ]
                        },
                        {
                            id: 'referrer', 
                            title: 'referrer', 
                            cellDir: [
                                {text: `The referrer property returns the URL of the document that loaded the current document.`},
                                {text: `The referrer property is read-only.`},
                            ]
                        },
                        {
                            id: 'documentURI', 
                            title: 'documentURI', 
                            cellDir: [
                                {text: `The documentURI property sets or returns a document's location.`},
                                {text: `The documentURI property returns null if the document was created in memory.`},
                                {text: `The documentURI property can be used on any document types.`},
                                {text: `The document.URL property can only be used on HTML documents.`},
                            ]
                        },
                        {
                            id: 'baseURI', 
                            title: 'baseURI', 
                            cellDir: [
                                {text: `The baseURI property returns the base URI of the document.`},
                                {text: `The baseURI property is read-only.`},
                            ]
                        },
                        {
                            id: 'domain', 
                            title: 'domain', 
                            cellDir: [
                                {text: `The domain property returns the domain name of the server (the document was loaded from).`},
                                {text: `The domain property returns null if the document was created in memory.`},
                            ]
                        },
                        {
                            id: 'implementation', 
                            title: 'implementation', 
                            cellDir: [
                                {text: `The implementation property returns the DOMimplementation object that handles the document.`},
                            ]
                        },
                        {
                            id: 'readyState', 
                            title: 'readyState', 
                            cellDir: [
                                {text: `The readyState property returns the (loading) status of the current document.`},
                                {text: `The readyState property is read-only.`},
                            ]
                        },
                        {
                            id: 'cookie', 
                            title: 'cookie', 
                            cellDir: [
                                {text: `The  cookie property sets or returns a semicolon-separated list of key=value pairs (document cookies).`},
                                {text: `An example of creating a cookie:`},
                                {code: `document.cookie="username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/";`, indent: 0},
                            ]
                        },
                        {
                            id: 'designMode', 
                            title: 'designMode', 
                            cellDir: [
                                {text: `The designMode property sets or returns if the document is editable.`},
                            ]
                        },
                        {
                            id: 'lastModified', 
                            title: 'lastModified', 
                            cellDir: [
                                {text: `The lastModified property returns the date and time the document was last modified.`},
                                {text: `The lastModified property is read-only.`},
                            ]
                        },
                                                      
                        {
                            id: 'defaultView', 
                            title: 'defaultView', 
                            cellDir: [
                                {text: `The defaultView property returns the document's window object.`},
                            ]
                        },
                        {
                            id: 'characterSet', 
                            title: 'characterSet', 
                            cellDir: [
                                {text: `The characterSet property returns the character encoding for a document.`},
                                {code: `document.characterSet`, indent: 0},
                            ]
                        },
                        {
                            id: 'title', 
                            title: 'title', 
                            cellDir: [
                                {text: `The title property sets or returns the title of the document.`},
                                {code: `document.title`, indent: 0},
                                {code: `document.title = newTitle`, indent: 0},
                            ]
                        },
                        {
                            id: 'head', 
                            title: 'head', 
                            cellDir: [
                                {text: `Returns the <head> element of the document`},
                            ]
                        },
                        {
                            id: 'scripts', 
                            title: 'scripts', 
                            cellDir: [
                                {text: `Returns a collection of <script> elements in the document`},
                            ]
                        },
                        {
                            id: 'body', 
                            title: 'body', 
                            cellDir: [
                                {text: `Sets or returns the document's body (the <body> element)`},
                            ]
                        },
                        {
                            id: 'links', 
                            title: 'links', 
                            cellDir: [
                                {text: `Returns a collection of all <a> and <area> elements in the document that have a href attribute`},
                            ]
                        },
                        {
                            id: 'forms', 
                            title: 'forms', 
                            cellDir: [
                                {text: `Returns a collection of all <form> elements in the document`},
                            ]
                        },
                        {
                            id: 'images', 
                            title: 'images', 
                            cellDir: [
                                {text: `Returns a collection of all <img> elements in the document`},
                            ]
                        },
                        {
                            id: 'embeds', 
                            title: 'embeds', 
                            cellDir: [
                                {text: `Returns a collection of all <embed> elements the document`},
                            ]
                        },
                        {
                            id: 'activeElement', 
                            title: 'activeElement', 
                            cellDir: [
                                {text: `The activeElement property returns the HTML element that have focus.`},
                                {text: `The activeElement property is read-only.`},
                            ]
                        },
                        {
                            id: 'documentObjectMethods', 
                            title: 'Methods',
                            headCellDir: []
                        },
                        {
                            id: 'getElementById', 
                            title: 'getElementById()', 
                            cellDir: [
                                {text: `The getElementById() method returns an element with a specified value.`},
                                {text: `The getElementById() method returns null if the element does not exist.`},
                                {text: `The getElementById() method is one of the most common methods in the HTML DOM. It is used almost every time you want to read or edit an HTML element.`},
                                {text: `Any id should be unique, but if two or more elements with the same id exist, getElementById() returns the first.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.getElementById(elementID)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.getElementById("demo");`, indent: 0},
                            ]
                        },
                        {
                            id: 'getElementsByClassName', 
                            title: 'getElementsByClassName()', 
                            cellDir: [
                                {text: `The getElementsByClassName() method returns a collection of elements with a specified class name(s).`},
                                {text: `The getElementsByClassName() method returns an HTMLCollection.`},
                                {text: `The getElementsByClassName() property is read-only.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.getElementsByClassName(classname)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.getElementsByClassName("example");`, indent: 0},
                            ]
                        },
                        {
                            id: 'getElementsByName', 
                            title: 'getElementsByName()', 
                            cellDir: [
                                {text: `The getElementsByName() method returns a collection of elements with a specified name.`},
                                {text: `The getElementsByName() method returns a live NodeList.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.getElementsByName(name)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.getElementsByName("animal")`, indent: 0},
                            ]
                        },
                        {
                            id: 'getElementsByTagName', 
                            title: 'getElementsByTagName()', 
                            cellDir: [
                                {text: `The getElementsByTagName() method returns a collection of all elements with a specified tag name.`},
                                {text: `The getElementsByTagName() method returns an HTMLCollection.`},
                                {text: `The getElementsByTagName() property is read-only.`},
                                {text: `getElementsByTagName("*") returns all elements in the document.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.getElementsByTagName(tagname)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.getElementsByTagName("li");`, indent: 0},
                            ]
                        },
                        {
                            id: 'createElement', 
                            title: 'createElement()', 
                            cellDir: [
                                {text: `The createElement() method creates an element node.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.createElement(type)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.createElement("p");`, indent: 0},
                            ]
                        },
                        {
                            id: 'createAttribute', 
                            title: 'createAttribute()', 
                            cellDir: [
                                {text: `The createAttribute() method creates an attribute and returns the attribute as an Attr object.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.createAttribute(name)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const att = document.createAttribute("style");`, indent: 0},
                                {code: `att.value = "color:red";`, indent: 0},
                            ]
                        },
                        {
                            id: 'createTextNode', 
                            title: 'createTextNode()', 
                            cellDir: [
                                {text: `The createTextNode() method creates a text node.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.createTextNode(text)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const textNode = document.createTextNode("Hello World");`, indent: 0},
                            ]
                        },
                        {
                            id: 'createDocumentFragment', 
                            title: 'createDocumentFragment()', 
                            cellDir: [
                                {text: `The createDocumentFragment() method creates an offscreen node.`},
                                {text: `The offscreen node can be used to build a new document fragment that can be insert into any document.`},
                                {text: `The createDocumentFragment() method can also be used to extract parts of a document, change, add, or delete some of the content, and insert it back to the document.`},
                                {text: (<><b>Note </b></>)},
                                {text: `You can always edit HTML elements directly. But a better way is to construct an (offscreen) document fragment, and attach this fragment to the real (live) DOM when it is ready. Because you insert the fragment when it is ready, there will be only one reflow and one single render.`},
                                {text: `If you want to append HTML elements items in a loops, using document fragments also improves performance.`},
                                {text: (<><b>Warning!</b></>)},
                                {text: `Document nodes appended to the document fragment, are removed from the original document.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.createDocumentFragment()`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const dFrag = document.createDocumentFragment();`, indent: 0},
                                {code: `dFrag.appendChild(li);`, indent: 0},
                            ]
                        },
                        {
                            id: 'createComment', 
                            title: 'createComment()', 
                            cellDir: [
                                {text: `The createComment() method creates a comment and returns the comment node.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.createComment(text)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.createComment("My comments");`, indent: 0},
                            ]
                        },
                        {
                            id: 'createEvent', 
                            title: 'createEvent()', 
                            cellDir: [
                                {text: `The createEvent() method creates an event object.`},
                                {text: `The event must be of a legal event type, and must be initialized (dipatched) before use.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.createEvent(type)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const ev = document.createEvent("MouseEvent");`, indent: 0},
                                {code: `ev.initMouseEvent("mouseover", true, true, `, indent: 0},
                                {code: `window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `document.getElementById("myDiv").dispatchEvent(ev);`, indent: 0},
                            ]
                        },
                        {
                            id: 'importNode', 
                            title: 'importNode()', 
                            cellDir: [
                                {text: `The importNode() method imports a node from another document.`},
                                {text: `Whith the second parameter set to true, child nodes will also be imported.`},
                                {text: `The imported node is not removed from the original document.`},
                                {text: `The imported node is a copy of the original.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.importNode(node, deep)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.importNode(h1, true);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                `node`, 
                                                (<>
                                                Required.<br/>
                                                A node from another document.<br/>
                                                Can be type of node.
                                                </>)
                                            ],
                                            [
                                                `deep`, 
                                                (<>
                                                Required.<br/>
                                                false: only the node itself is imported.<br/>
                                                true: child nodes (descendants) are also imported.
                                                </>)
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'adoptNode', 
                            title: 'adoptNode()', 
                            cellDir: [
                                {text: `The adoptNode() method adopts a node from another document.`},
                                {text: `The adopted node can be of all types.`},
                                {text: `Any child nodes (descendants) of the adopted node, are also adopted.`},
                                {text: `The original node (with child nodes) is removed from the other document.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.adoptNode(node)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.adoptNode(h1);`, indent: 0},
                            ]
                        },
                        {
                            id: 'querySelector', 
                            title: 'querySelector()', 
                            cellDir: [
                                {text: `The querySelector() method returns the first element that matches a CSS selector.`},
                                {text: `To return all matches (not only the first), use the querySelectorAll() instead.`},
                                {text: `Both querySelector() and querySelectorAll() throw a SYNTAX_ERR exception if the selector(s) is invalid.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.querySelector(CSS selectors)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Get the first <p> element:`},
                                {code: `document.querySelector("p");`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: `Get the first element with class="example":`},
                                {code: `document.querySelector(".example");`, indent: 0},
                            ]
                        },
                        {
                            id: 'querySelectorAll', 
                            title: 'querySelectorAll()', 
                            cellDir: [
                                {text: `The querySelectorAll() method returns all elements that matches a CSS selector(s).`},
                                {text: `The querySelectorAll() method returns a NodeList.`},
                                {text: `The querySelectorAll() method throws a SYNTAX_ERR exception if the selector(s) is invalid`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.querySelectorAll(CSS selectors)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.querySelectorAll(".example");`, indent: 0},
                            ]
                        },
                        {
                            id: 'open', 
                            title: 'open()', 
                            cellDir: [
                                {text: `The open() method opens a document for writing.`},
                                {text: (<><b>Warning: </b>{'All existing document content will be cleared.'}</>)},
                                {text: ``},
                                {text: (<><b>Note: </b>{'Do not confuse this method with the window.open() method, which opens a new browser window.'}</>)},
                                {text: ``},
                            ]
                        },
                        {
                            id: 'close', 
                            title: 'close()', 
                            cellDir: [
                                {text: `The close() method closes a window previously opened with the open() method.`},
                            ]
                        },
                        {
                            id: 'write', 
                            title: 'write()', 
                            cellDir: [
                                {text: `The write() method writes directly to an open (HTML) document stream.`},
                                {text: (<><b>Warning</b></>)},
                                {text: `The write() method deletes all existing HTML when used on a loaded document.`},
                                {text: `The write() method cannot be used in XHTML or XML.`},
                                {text: (<><b>Note</b></>)},
                                {text: `write() method is most often used to write to output streams opened by the the open() method.`},
                                {code: `document.write("<h2>Hello World!</h2><p>Have a nice day!</p>");`, indent: 0},
                            ]
                        },
                        {
                            id: 'writeln', 
                            title: 'writeln()', 
                            cellDir: [
                                {text: `The writeln() method writes directly to an open (HTML) document stream.`},
                                {text: `The writeln() method is identical to the write() method, with the addition of writing a newline character after each statement.`},
                                {text: (<><b>Warning</b></>)},
                                {text: `The writeln() method deletes all existing HTML when used on a loaded document.`},
                                {text: `The writeln() method cannot be used in XHTML or XML.`},
                                {text: (<><b>Note</b></>)},
                                {text: `It makes no sense to use writeln() in HTML.`},
                                {text: `If you want new lines in HTML, you must use paragraphs or <br> tags.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.writeln(exp1, exp2, exp3, ...)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.writeln("Hello World!");`, indent: 0},
                                {code: `document.writeln("Have a nice day!");`, indent: 0},
                                {code: `Hello World!`, indent: 0},
                                {code: `Have a nice day!`, indent: 0},
                            ]
                        },
                        {
                            id: 'normalize', 
                            title: 'normalize()', 
                            cellDir: [
                                {text: `The normalize() method removes empty text nodes, and joins adjacent text nodes.`},
                            ]
                        },
                        {
                            id: 'hasFocus', 
                            title: 'hasFocus()', 
                            cellDir: [
                                {text: `The hasFocus() method returns a true if the document (or any element in the document) has focus.`},
                                {text: `Otherwise it returns false.`},
                            ]
                        },
                        {
                            id: 'addEventListener', 
                            title: 'addEventListener()', 
                            cellDir: [
                                {text: `The addEventListener() method attaches an event handler to a document`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.addEventListener(event, function, Capture)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.addEventListener("click", myFunction);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                `event`, 
                                                (<>
                                                Required.<br/>
                                                The event name.<br/>
                                                {'Do not use the "on" prefix.'}<br/>
                                                {'Use "click" instead of "onclick".'}
                                                </>)
                                            ],
                                            [
                                                `function`, 
                                                (<>
                                                Required.<br/>
                                                The function to run when the event occurs. <br/>
                                                {'When the event occurs, an event object is passed to the function as the first parameter. The type of the event object depends on the specified event. For example, the "click" event belongs to the MouseEvent object.'}
                                                </>)
                                            ],
                                            [
                                                `capture`, 
                                                (<>
                                                Optional (default = false).<br/>
                                                true - The handler is executed in the capturing phase.<br/>
                                                false - The handler is executed in the bubbling phase.
                                                </>)
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'removeEventListener', 
                            title: 'removeEventListener()', 
                            cellDir: [
                                {text: `The removeEventListener() method removes an event handler from a document.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `document.removeEventListener(event, function, capture)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.removeEventListener("mousemove", myFunction);`, indent: 0},
                            ]
                        },
                    ] 
                },
                {
                    id: 'elementObject',
                    title: 'Element Object',
                    titleDir: [
                        {text: `In the HTML DOM, the Element object represents an HTML element, like P, DIV, A, TABLE, or any other HTML element.`},
                    ],
                    RowDir: [
                        {
                            id: 'elementObjectProperties', 
                            title: 'Properties',
                            headCellDir: []
                        },
                        {
                            id: 'attributes', 
                            title: 'attributes', 
                            cellDir: [
                                {text: `The attributes property returns a collection of attributes in an element.`},
                                {text: `The attributes property returns a NamedNodeMap.`},
                                {code: `const nodeMap = document.getElementById("myImg").attributes;`, indent: 0},
                                {code: `let text = "";`, indent: 0},
                                {code: `or (let i = 0; i < nodeMap.length; i++) {`, indent: 0},
                                {code: `text += nodeMap[i].name + " = " + nodeMap[i].value + "<br>";`, indent: 1},
                                {code: `}`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `document.getElementById("demo").innerHTML = text;`, indent: 0},
                                {code: `id = myImg;alt = Flower;src = klematis.jpg;width = 150;height = 113`, indent: 0},
                            ]
                        },
                        {
                            id: 'attrObject', 
                            title: 'Attr Object', 
                            cellDir: [
                                {text: `In the HTML DOM, an Attr object represents an HTML attribute.`},
                                {text: `An HTML attribute always belongs to an HTML element.`},
                                {text: (<><b>{'name'}</b></>)},
                                {text: `The name property returns the name of an attribute.`},
                                {text: `The name property is read-only.`},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'value'}</b></>)},
                                {text: `The value property sets or returns the value of an attribute.`},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'specified'}</b></>)},
                                {text: `The specified property returns true if an attribute is specified.`},
                                {text: (<><b>Warning: </b>{'This property returns an error if the attribute is not specified. This might crash your program.'}</>)},
                            ]
                        },
                        {
                            id: 'namedNodeMapObject', 
                            title: 'NamedNodeMap Object', 
                            cellDir: [
                                {text: `A NamedNodeMap is an array-like unordered collection of an element's attributes.`},
                                {text: `In other words: a NamedNodeMap is a list of Attr objects.`},
                                {text: `A NamedNodeMap has a length property that returns the number of nodes.`},
                                {text: `The nodes can be accessed by name or index numbes. The index starts at 0.`},
                                {text: (<><b>{'getNamedItem()'}</b></>)},
                                {text: `The getNamedItem() method returns an attribute node from a NamedNodeMap object.`},
                                {text: `It is easier to use the element.getAttribute() method.`},
                                {code: `namednodemap.getNamedItem(nodename)`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `const nodeMap = document.getElementById("myButton");`, indent: 0},
                                {code: `let value = nodeMap.getNamedItem("onclick").value;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'item()'}</b></>)},
                                {text: `The item() method returns an attribute (by index) from a NamedNodeMap.`},
                                {code: `namednodemap.item(index)`, indent: 0},
                                {code: `namednodemap[index]`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `const nodeMap = document.getElementById("myDiv").attributes;`, indent: 0},
                                {code: `let name1 = nodeMap.item(0).name;`, indent: 0},
                                {code: `let name2 = nodeMap.item(1).name;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `const nodeMap = document.getElementById("myDiv").attributes;`, indent: 0},
                                {code: `let name1 = nodeMap[0].name;`, indent: 0},
                                {code: `let name2 = nodeMap[1].name;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'length'}</b></>)},
                                {text: `The length property returns the number of nodes in a NamedNodeMap.`},
                                {text: `The length property is read-only.`},
                                {code: `namednodemap.length`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `document.getElementById("myButton").attributes.length;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'removeNamedItem()'}</b></>)},
                                {text: `The removeNamedItem() method removes a node (by name) in a NamedNodeMap.`},
                                {text: (<><b>Note: </b>{'When removing the type attribute of an input element, the element will be of type text, which is the default value.'}</>)},
                                {code: `namednodemap.removeNamedItem(nodename)`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `const nodeMap = document.getElementById("myInput").attributes;`, indent: 0},
                                {code: `nodeMap.removeNamedItem("type");`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'setNamedItem()'}</b></>)},
                                {text: `The setNamedItem() method adds an attribute node to a NamedNodeMap.`},
                                {text: `If the attribute node already exists, it will be replaced, and the replaced attribute node is returned, otherwise the return value is null.`},
                                {code: `namednodemap.setNamedItem(node)`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `const element = document.getElementsByTagName("H1")[0];`, indent: 0},
                                {code: `element.setAttribute("class", "democlass");`, indent: 0},
                            ]
                        },
                        {
                            id: 'accessKey', 
                            title: 'accessKey', 
                            cellDir: [
                                {text: `The accessKey property sets or returns the accesskey attribute of an element.`},
                                {text: `The accessKey property specifies a shortcut key to activate or focus an element.`},
                                {text: (<><b>Warning: </b>{'Using accesskeys is difficult because they may conflict with other key standards in the browser. To avoid this problem, most browsers will use accesskeys only if pressed together with the Alt key.'}</>)},
                                {text: (<><b>Conserns: </b>{'Adapting accesskeys to all internatinal languages is difficult. The accesskey value may not be present on all keyboards. Because of these conserns, it is advised not to use accesskeys.'}</>)},
                            ]
                        },
                        {
                            id: 'classList', 
                            title: 'classList', 
                            cellDir: [
                                {text: `The classList property returns the CSS classnames of an element.`},
                                {text: `The classList property returns a DOMTokenList.`},
                            ]
                        },
                        {
                            id: 'className', 
                            title: 'className', 
                            cellDir: [
                                {text: `The className property sets or returns an element's class attribute.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `HTMLElementObject.className = class`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `element.className = "myStyle";`, indent: 0},
                            ]
                        },
                        {
                            id: 'contentEditable', 
                            title: 'contentEditable', 
                            cellDir: [
                                {text: `The contentEditable property sets or returns if the content of an element is editable.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.contentEditable = value`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.getElementById("myP").contentEditable = "true";`, indent: 0},
                            ]
                        },
                        {
                            id: 'isContentEditable', 
                            title: 'isContentEditable', 
                            cellDir: [
                                {text: `The isContentEditable property returns true if the content of an element is editable.`},
                                {text: `isContentEditable property is read-only.`},
                            ]
                        },
                        {
                            id: 'dir', 
                            title: 'dir', 
                            cellDir: [
                                {text: `The dir property sets or returns an elements's dir attribute.`},
                                {text: `The dir attribute specifies the text-direction.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.dir = "ltr|rtl|auto"`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.body.dir = "rtl";`, indent: 0},
                            ]
                        },
                        {
                            id: 'id', 
                            title: 'id', 
                            cellDir: [
                                {text: `The id property sets or returns the value of an element's id attribute.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.id = id`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.getElementById("demo").id = "newid";`, indent: 0},
                            ]
                        },
                        {
                            id: 'lang', 
                            title: 'lang', 
                            cellDir: [
                                {text: `The lang property sets or returns the value of an element's lang attribute.`},
                                {text: `The lang attribute specifies the element's language code, like "en" for English, "es" for Spanish, or "fr" for French.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.lang = lang_code`, indent: 0},
                            ]
                        },
                        {
                            id: 'style', 
                            title: 'style', 
                            cellDir: [
                                {text: `The style property returns the values of an element's style attribute.`},
                                {text: `The style property returns a CSSStyleDeclaration object.`},
                                {text: `The CSSStyleDeclaration object contains all inline styles properties for the element. It does not contain any style properties set in the <head> section or in any external style sheets.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.style.property = value`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.getElementById("myH1").style.color = "red";`, indent: 0},
                            ]
                        },
                        {
                            id: 'tabIndex', 
                            title: 'tabIndex', 
                            cellDir: [
                                {text: `The tabIndex property sets or returns the value of the tabindex attribute of an element.`},
                                {text: `The tabindex attribute specifies the tab order of an element, when the "tab" button is used for navigating.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.tabIndex = number`, indent: 0},
                            ]
                        },
                        {
                            id: 'title', 
                            title: 'title', 
                            cellDir: [
                                {text: `The title property sets or returns the value of an element's title attribute.`},
                                {text: `The title attribute specifies extra information about an element. It can be shown as a tooltip text when the mouse moves over the element.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.title = text`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `element.title = "The World's Largest Web Development Site";`, indent: 0},
                            ]
                        },
                        {
                            id: 'tagName', 
                            title: 'tagName', 
                            cellDir: [
                                {text: `The tagName property returns the tag name of an element. h1, h2, body, p, button`},
                                {text: `The tagName property returns the tag name in UPPERCASE.`},
                                {text: `The tagName property is read-only.`},
                                {text: (<><b>{'Difference Between tagName and nodeName'}</b></>)},
                                {text: `The nodeName property also returns the tag name of an element.`},
                                {text: `The nodeName can also return the tag name of attribute nodes, text nodes, and comment nodes.`},
                            ]
                        },
                        {
                            id: 'ownerDocument', 
                            title: 'ownerDocument', 
                            cellDir: [
                                {text: `The ownerDocument property returns the owner document of a node, as a Document object.`},
                                {text: `In HTML, the HTML document itself is always the ownerDocument of an element.`},
                            ]
                        },
                        {
                            id: 'namespaceURI', 
                            title: 'namespaceURI', 
                            cellDir: [
                                {text: `The namespaceURI property returns the URI of an elements namespace.`},
                                {text: `The namespaceURI property is read-only.`},
                                {text: `The namespaceURI property has no practical use in HTML.`},
                                {text: `The default namespace URI is the same for HTML and XHTML documents.`},
                            ]
                        },
                        {
                            id: 'innerHTML', 
                            title: 'innerHTML', 
                            cellDir: [
                                {text: `The innerHTML property sets or returns the HTML content (inner HTML) of an element. `},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.innerHTML = text`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `Change the HTML content of an element with id="demo":`, indent: 0},
                                {code: `document.getElementById("demo").innerHTML = "I have changed!";`, indent: 0},
                            ]
                        },
                        {
                            id: 'innerText', 
                            title: 'innerText', 
                            cellDir: [
                                {text: `The innerText property sets or returns the text content of an element.`},
                                {text: `When you set the innerText property, all child nodes are removed and replaced by only one new text node.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.innerText = text`, indent: 0},
                                {code: `node.innerText = text`, indent: 0},
                            ]
                        },
                        {
                            id: 'textContent', 
                            title: 'textContent', 
                            cellDir: [
                                {text: `e textContent property sets or returns the text content of the specified node, and all its descendants.`},
                                {text: `When you set the textContent property, all child nodes are removed and replaced by only one new text node.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.textContent = text`, indent: 0},
                                {code: `node.textContent = text`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'The Differences Between innerHTML, innerText and textContent'}</b></>)},
                                {text: `The innerHTML property returns the text content of the element, including all spacing and inner HTML tags.`},
                                {text: `This element has extra spacing and contains <span>a span element</span>.`},
                                {text: (<>&nbsp;</>)},
                                {text: `The innerText property returns just the text content of the element and all its children, without CSS hidden text spacing and tags, except <script> and <style> elements.`},
                                {text: `This element has extra spacing and contains a span element.`},
                                {text: (<>&nbsp;</>)},
                                {text: `The textContent property returns the text content of the element and all descendaces, with spacing and CSS hidden text, but without tags.`},
                                {text: `This element has extra spacing and contains a span element.`},
                            ]
                        },
                        {
                            id: 'outerHTML', 
                            title: 'outerHTML', 
                            cellDir: [
                                {text: `The outerHTML property sets or returns the HTML element, including attributes, start tag, and end tag.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.outerHTML = text`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let html = document.getElementsByTagName("ul")[0].outerHTML;`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `e.outerHTML`, indent: 0},
                                {code: `<ul id="myList">`, indent: 1},
                                {code: `<li>Coffee</li>`, indent: 1},
                                {code: `<li>Tea</li>`, indent: 0},
                                {code: `</ul>`, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `e.innerHTML`, indent: 0},
                                {code: `<li>Coffee</li>`, indent: 0},
                                {code: `<li>Tea</li>`, indent: 0},
                            ]
                        },
                        {
                            id: 'outerText', 
                            title: 'outerText', 
                            cellDir: [
                                {text: `The outerText property sets or returns the text content of the specified node.`},
                                {text: `This property is similar to the inner innerText property, in fact getting the outerText returns the same result as getting the innerText property.`},
                                {text: `There are an important difference when setting an element's outerText, because the element itself is removed (same as outerHTML).`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `node.outerText = text`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.getElementById("myH1").outerText = "Changed content!";`, indent: 0},
                            ]
                        },
                        {
                            id: 'clientHeight', 
                            title: 'clientHeight', 
                            cellDir: [
                                {text: `Returns the height of an element, including padding`},
                            ]
                        },
                        {
                            id: 'clientWidth', 
                            title: 'clientWidth', 
                            cellDir: [
                                {text: `Returns the width of an element, including padding`},
                            ]
                        },
                        {
                            id: 'clientTop', 
                            title: 'clientTop', 
                            cellDir: [
                                {text: `Returns the width of the top border of an element`},
                            ]
                        },
                        {
                            id: 'clientLeft', 
                            title: 'clientLeft', 
                            cellDir: [
                                {text: `Returns the width of the left border of an element`},
                            ]
                        },
                        {
                            id: 'scrollHeight', 
                            title: 'scrollHeight', 
                            cellDir: [
                                {text: `Returns the entire height of an element, including padding`},
                            ]
                        },
                        {
                            id: 'scrollWidth', 
                            title: 'scrollWidth', 
                            cellDir: [
                                {text: `Returns the entire width of an element, including padding`},
                            ]
                        },
                        {
                            id: 'scrollTop', 
                            title: 'scrollTop', 
                            cellDir: [
                                {text: `Sets or returns the number of pixels an element's content is scrolled vertically`},
                            ]
                        },
                        {
                            id: 'scrollLeft', 
                            title: 'scrollLeft', 
                            cellDir: [
                                {text: `Sets or returns the number of pixels an element's content is scrolled horizontally`},
                            ]
                        },
                        {
                            id: 'offsetHeight', 
                            title: 'offsetHeight', 
                            cellDir: [
                                {text: `Returns the height of an element, including padding, border and scrollbar`},
                            ]
                        },
                        {
                            id: 'offsetWidth', 
                            title: 'offsetWidth', 
                            cellDir: [
                                {text: `Returns the width of an element, including padding, border and scrollbar`},
                            ]
                        },
                        {
                            id: 'offsetTop', 
                            title: 'offsetTop', 
                            cellDir: [
                                {text: `Returns the vertical offset position of an element`},
                            ]
                        },
                        {
                            id: 'offsetLeft', 
                            title: 'offsetLeft', 
                            cellDir: [
                                {text: `Returns the horizontal offset position of an element`},
                            ]
                        },
                        {
                            id: 'offsetParent', 
                            title: 'offsetParent', 
                            cellDir: [
                                {text: `Returns the offset container of an element`},
                            ]
                        },
                        {
                            id: 'children', 
                            title: 'children', 
                            cellDir: [
                                {text: `The children property returns a collection of an element's child elements.`},
                                {text: `The children property returns an HTMLCollection object.`},
                            ]
                        },
                        {
                            id: 'childElementCount', 
                            title: 'childElementCount', 
                            cellDir: [
                                {text: `The childElementCount property returns the number of child elements of an element.`},
                                {text: `The childElementCount property returns the same as children.length.`},
                                {text: `The childElementCount is read only.`},
                            ]
                        },
                        {
                            id: 'firstElementChild', 
                            title: 'firstElementChild', 
                            cellDir: [
                                {text: `Returns the first child element of an element`},
                            ]
                        },
                        {
                            id: 'lastElementChild', 
                            title: 'lastElementChild', 
                            cellDir: [
                                {text: `Returns the last child element of an element`},
                            ]
                        },
                        {
                            id: 'nextElementSibling', 
                            title: 'nextElementSibling', 
                            cellDir: [
                                {text: `Returns the next element at the same node tree level`},
                            ]
                        },
                        {
                            id: 'previousElementSibling', 
                            title: 'previousElementSibling', 
                            cellDir: [
                                {text: `Returns the previous element at the same node tree level`},
                            ]
                        },
                        {
                            id: 'parentElement', 
                            title: 'parentElement', 
                            cellDir: [
                                {text: `Returns the parent element node of an element`},
                            ]
                        },
                        {
                            id: 'nodeNameN', 
                            title: 'nodeName', 
                            cellDir: [
                                {text: `The nodeName property returns the name of a node:`},
                                {text: `The nodeName property is read-only.`},
                            ]
                        },
                        {
                            id: 'nodeType', 
                            title: 'nodeType', 
                            cellDir: [
                                {text: `The nodeType property returns the node type, as a number, of the specified node.`},
                                {text: `This property is read-only.`},
                            ]
                        },
                        {
                            id: 'nodeValue', 
                            title: 'nodeValue', 
                            cellDir: [
                                {text: `Sets or returns the value of a node`},
                            ]
                        },
                        {
                            id: 'childNodes', 
                            title: 'childNodes', 
                            cellDir: [
                                {text: `Returns a NodeList of an element's child nodes`},
                            ]
                        },
                        {
                            id: 'firstChild', 
                            title: 'firstChild', 
                            cellDir: [
                                {text: `Returns the first child node of an element`},
                            ]
                        },
                        {
                            id: 'lastChild', 
                            title: 'lastChild', 
                            cellDir: [
                                {text: `Returns the last child node of an element`},
                            ]
                        },
                        {
                            id: 'nextSibling', 
                            title: 'nextSibling', 
                            cellDir: [
                                {text: `Returns the next node at the same node tree level`},
                            ]
                        },
                        {
                            id: 'previousSibling', 
                            title: 'previousSibling', 
                            cellDir: [
                                {text: `Returns the previous node at the same node tree level`},
                            ]
                        },
                        {
                            id: 'parentNode', 
                            title: 'parentNode', 
                            cellDir: [
                                {text: `Returns the parent node of an element`},
                            ]
                        },
                        {
                            id: 'elementObjectMethods', 
                            title: 'Methods',
                            headCellDir: []
                        },
                        {
                            id: 'getAttribute', 
                            title: 'getAttribute()', 
                            cellDir: [
                                {text: `The  getAttribute() method returns the value of an element's attribute.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.getAttribute(name)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let text = element.getAttribute("class");`, indent: 0},
                                {code: `let text = myAnchor.getAttribute("target");`, indent: 0},
                            ]
                        },
                        {
                            id: 'getAttributeNode', 
                            title: 'getAttributeNode()', 
                            cellDir: [
                                {text: `The getAttributeNode() method returns an element's attribute.`},
                                {text: `The getAttributeNode() method returns an Attribute object.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.getAttributeNode(name)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `element.getAttributeNode("class").value;`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'The Difference Between getAttribute() and getAttributeNode()'}</b></>)},
                                {text: `The getAttribute() method returns the value of an attribute.`},
                                {text: `The getAttributeNode() method returns an  Attr object, and you must use the Attr value property to get the value.`},
                                {text: `The result will be the same.`},
                            ]
                        },
                        {
                            id: 'hasAttribute', 
                            title: 'hasAttribute()', 
                            cellDir: [
                                {text: `The hasAttribute() method returns true if the attribute exists, otherwise false.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.hasAttribute(name)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `myButton.hasAttribute("onclick")`, indent: 0},
                            ]
                        },
                        {
                            id: 'hasAttributes', 
                            title: 'hasAttributes()', 
                            cellDir: [
                                {text: `The hasAttributes() method returns true if a node has attributes, otherwise false.`},
                                {text: `The hasAttributes() method always returns false if the node is not an element node.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.hasAttributes()`, indent: 0},
                                {code: `node.hasAttributes()`, indent: 0},
                            ]
                        },
                        {
                            id: 'removeAttribute', 
                            title: 'removeAttribute()', 
                            cellDir: [
                                {text: `The removeAttribute() method removes an attribute from an element.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.removeAttribute(name)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `document.getElementById("myAnchor").removeAttribute("href");`, indent: 0},
                            ]
                        },
                        {
                            id: 'removeAttributeNode', 
                            title: 'removeAttributeNode()', 
                            cellDir: [
                                {text: `The removeAttributeNode() method removes an attribute from an element.`},
                                {text: `The removeAttributeNode() method returns an Attribute object.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.removeAttributeNode(node)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `element.removeAttributeNode("class");`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'The Difference Between removeAttribute() and removeAttributeNode()'}</b></>)},
                                {text: `The removeAttribute() method removes an attribute, and does not have a return value.`},
                                {text: `The removeAttributeNode() method removes an Attr object, and returns the removed object.`},
                                {text: `The result will be the same.`},
                            ]
                        },
                        {
                            id: 'setAttribute', 
                            title: 'setAttribute()', 
                            cellDir: [
                                {text: `The setAttribute() method sets a new value to an attribute.`},
                                {text: `If the attribute does not exist, it is created first.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.setAttribute(name, value)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `element.setAttribute("class", "democlass");`, indent: 0},
                            ]
                        },
                        {
                            id: 'setAttributeNode', 
                            title: 'setAttributeNode()', 
                            cellDir: [
                                {text: `The setAttributeNode() method adds an attribute node to an element.`},
                                {text: `The setAttributeNode() method replaces existing attribute nodes.`},
                                {text: `The setAttributeNode() method returns an Attribute object.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.setAttributeNode(node)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `h1.setAttributeNode("class")`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>{'The Difference Between setAttribute() and setAttributeNode()'}</b></>)},
                                {text: `The setAttribute() method replaces attribute values.`},
                                {text: `The setAttributeNode() method replaces Attribute objects.`},
                                {text: `You must create an Attr object and set the Attr value before adding the attribute to an element.`},
                                {text: `The result will be the same.`},
                            ]
                        },
                        {
                            id: 'getElementsByClassName', 
                            title: 'getElementsByClassName()', 
                            cellDir: [
                                {text: `The getElementsByClassName() method returns a collection of child elements with a given class name.`},
                                {text: `The getElementsByClassName() method returns a NodeList object.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.getElementsByClassName(classname)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `element.getElementsByClassName("child");`, indent: 0},
                            ]
                        },
                        {
                            id: 'getElementsByTagName', 
                            title: 'getElementsByTagName()', 
                            cellDir: [
                                {text: `The getElementsByTagName() method returns a collection of child elements with a given tag name.`},
                                {text: `getElementsByTagName() method returns a NodeList object.`},
                                {text: `The tag name "*" returns all child elements.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.getElementsByTagName("p");`, indent: 0},
                            ]
                        },
                        {
                            id: 'getBoundingClientRect', 
                            title: 'getBoundingClientRect()', 
                            cellDir: [
                                {text: `The getBoundingClientRect() method returns the size of an element and its position relative to the viewport.`},
                                {text: `The getBoundingClientRect() method returns a DOMRect object with eight properties: left, top, right, bottom, x, y, width, height.`},
                                {text: `The scrolling that has been done is taken into account. This means that the rectangle's edges (top, left, bottom, and right) change their values every time the scrolling position changes.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.getBoundingClientRect()`, indent: 0},
                            ]
                        },
                        {
                            id: 'insertAdjacentElement', 
                            title: 'insertAdjacentElement()', 
                            cellDir: [
                                {text: `The insertAdjacentElement() method inserts a an element into a specified position.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.insertAdjacentElement(position, element)`, indent: 0},
                                {code: `node.insertAdjacentElement(position, element)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `h2.insertAdjacentElement("afterend", span);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                `afterbegin`, 
                                                `After the beginning of the element (first child)`
                                            ],
                                            [
                                                `afterend`, 
                                                `After the element`
                                            ],
                                            [
                                                `beforebegin`, 
                                                `Before the element`
                                            ],
                                            [
                                                `beforeend`, 
                                                `Before the end of the element (last child)`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'insertAdjacentHTML', 
                            title: 'insertAdjacentHTML()', 
                            cellDir: [
                                {text: `The insertAdjacentHTML() method inserts HTML code into a specified position.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.insertAdjacentHTML(position, html)`, indent: 0},
                                {code: `node.insertAdjacentHTML(position, html)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let html = "<p>My new paragraph.</p>";`, indent: 0},
                                {code: `h2.insertAdjacentHTML("afterend", html);`, indent: 0},
                            ]
                        },
                        {
                            id: 'insertAdjacentText', 
                            title: 'insertAdjacentText()', 
                            cellDir: [
                                {text: `The insertAdjacentText() method inserts a a text into a specified position.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.insertAdjacentText(position, text)`, indent: 0},
                                {code: `node.insertAdjacentText(position, text)`, indent: 0},
                            ]
                        },
                        {
                            id: 'click', 
                            title: 'click()', 
                            cellDir: [
                                {text: `The click() method simulates a mouse-click on an element.`},
                                {text: `This method can be used to execute a click on an element as if the user manually clicked on it.`},
                            ]
                        },
                        {
                            id: 'blur', 
                            title: 'blur()', 
                            cellDir: [
                                {text: `Removes focus from an element`},
                            ]
                        },
                        {
                            id: 'focus', 
                            title: 'focus()', 
                            cellDir: [
                                {text: `Gives focus to an element`},
                            ]
                        },
                        {
                            id: 'closest', 
                            title: 'closest()', 
                            cellDir: [
                                {text: `The closest() method searches up the DOM tree for elements which matches a specified CSS selector.`},
                                {text: `The closest() method starts at the element itself, then the anchestors (parent, grandparent, ...) until a match is found.`},
                                {text: `The closest() method returns null() if no match is found.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.closest(selectors)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const element = document.getElementById(".container, .wrapper");`, indent: 0},
                                {code: `const closest = element.closest(".container");`, indent: 0},
                            ]
                        },
                        {
                            id: 'matches', 
                            title: 'matches()', 
                            cellDir: [
                                {text: `The matches() method returns true if an element matches a specific CSS selector(s).`},
                                {text: `The matches() method returns false if not.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.matches(selectors)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const element = document.getElementById("demo");`, indent: 0},
                                {code: `let answer = element.matches(".container");`, indent: 0},
                            ]
                        },
                        {
                            id: 'normalize', 
                            title: 'normalize()', 
                            cellDir: [
                                {text: `The normalize() method removes empty text nodes, and joins adjacent text nodes.`},
                            ]
                        },
                        {
                            id: 'remove', 
                            title: 'remove()', 
                            cellDir: [
                                {text: `The remove() method removes an element (or node) from the document.`},
                            ]
                        },
                        {
                            id: 'cloneNode', 
                            title: 'cloneNode()', 
                            cellDir: [
                                {text: `The cloneNode() method creates a copy of a node, and returns the clone.`},
                                {text: `cloneNode() method clones all attributes and their values.`},
                                {text: `Set the deep parameter to true if you also want to clone descendants (children).`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `node.cloneNode(deep)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const clone = node.cloneNode(true);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                `deep`, 
                                                (<>
                                                Optional.<br/>
                                                false - Default. Clone only the node and its attributes.<br/>
                                                true - Clone the node, its attributes, and its descendants.
                                                </>)
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'isEqualNode', 
                            title: 'isEqualNode()', 
                            cellDir: [
                                {text: `The isEqualNode() returns true if two elements (or nodes) are equal.`},
                                {text: `Two nodes are equal if all of the following conditions are true:`},
                                {list: [
                                    'They have the same nodeType',
                                    'They have the same nodeName',
                                    'They have the same nodeValue',
                                    'They have the same nameSpaceURI',
                                    'They have the same childNodes with all the descendants',
                                    'They have the same attributes and attribute values',
                                    'They have the same localName and prefix',
                                ]},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.isEqualNode(node)`, indent: 0},
                                {code: `node.isEqualNode(node)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `var item1 = document.getElementById("myList1").firstChild;`, indent: 0},
                                {code: `var item2 = document.getElementById("myList2").firstChild;`, indent: 0},
                                {code: `var x = item1.isEqualNode(item2);`, indent: 0},
                            ]
                        },
                        {
                            id: 'isSameNode', 
                            title: 'isSameNode()', 
                            cellDir: [
                                {text: `The isSameNode() method checks if two nodes are the same node.`},
                                {text: `The isSameNode() method returns true if the two nodes are the same node, otherwise false.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `node.isSameNode(node)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `var item1 = document.getElementById("myList1");`, indent: 0},
                                {code: `var item2 = document.getElementsByTagName("UL")[0];`, indent: 0},
                                {code: `var x = item1.isSameNode(item2);`, indent: 0},
                            ]
                        },
                        {
                            id: 'scrollIntoView', 
                            title: 'scrollIntoView()', 
                            cellDir: [
                                {text: `The scrollIntoView() method scrolls an element into the visible area of the browser window.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.scrollIntoView(align)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const element = document.getElementById("content");`, indent: 0},
                                {code: `element.scrollIntoView();`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: ['Value', 'Description'],
                                        body: [
                                            [
                                                `align`, 
                                                (<>
                                                Optional.<br/>
                                                A boolean that indicates the type of the align:<br/><br/>
                                                true - the top of the element will be aligned to the top of the visible area of the scrollable ancestor<br/><br/>
                                                false - the bottom of the element will be aligned to the bottom of the visible area of the scrollable ancestor.<br/><br/>
                                                If omitted, it will scroll to the top of the element.<br/><br/>
                                                <b>Note: </b>Depending on the layout of other elements, some elements may not be scrolled completely to the top or to the bottom.
                                                </>)
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'compareDocumentPosition', 
                            title: 'compareDocumentPosition()', 
                            cellDir: [
                                {text: `The compareDocumentPosition() method compares two nodes, and returns an integer describing where they are positioned in the document:`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `node.compareDocumentPosition(node)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const p1 = document.getElementById("p1");`, indent: 0},
                                {code: `const p2 = document.getElementById("p2");`, indent: 0},
                                {code: `let position = p1.compareDocumentPosition(p2);`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                `1`, 
                                                `The nodes do not belong to the same document`
                                            ],
                                            [
                                                `2`, 
                                                `The first node is positioned after the second`
                                            ],
                                            [
                                                `4`, 
                                                `The first node is positioned before the second`
                                            ],
                                            [
                                                `8`, 
                                                `The first node is positioned inside the second`
                                            ],
                                            [
                                                `16`, 
                                                `The second node is positioned inside the first`
                                            ],
                                            [
                                                `32`, 
                                                `The nodes are attributes on the same element`
                                            ],

                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'hasChildNodes', 
                            title: 'hasChildNodes()', 
                            cellDir: [
                                {text: `The hasChildNodes() method returns true if the specified node has any child nodes, otherwise false.`},
                                {text: `The hasChildNodes() method is read-only.`},
                            ]
                        },
                        {
                            id: 'appendChild', 
                            title: 'appendChild()', 
                            cellDir: [
                                {text: `The appendChild() method appends a node (element) as the last child of an element.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.appendChild(node)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const node = document.getElementById("myList2").lastElementChild;`, indent: 0},
                                {code: `document.getElementById("myList1").appendChild(node);`, indent: 0},
                            ]
                        },
                        {
                            id: 'insertBefore', 
                            title: 'insertBefore()', 
                            cellDir: [
                                {text: `The insertBefore() method inserts a child node before an existing child.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.insertBefore(new, existing)   * If null, it will be inserted at the end.`, indent: 0},
                                {code: `node.insertBefore(new, existing)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const node = document.getElementById("myList2").lastElementChild;`, indent: 0},
                                {code: `const list = document.getElementById("myList1");`, indent: 0},
                                {code: `list.insertBefore(node, null);`, indent: 0},
                            ]
                        },
                        {
                            id: 'removeChild', 
                            title: 'removeChild()', 
                            cellDir: [
                                {text: `The removeChild() method removes an element's child.`},
                                {text: `The child is removed from the Document Object Model (the DOM).`},
                                {text: `However, the returned node can be modified and inserted back into the DOM (See "More Examples").`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.removeChild(node)`, indent: 0},
                                {code: `node.removeChild(node)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const list = document.getElementById("myList");`, indent: 0},
                                {code: `list.removeChild(list.firstChild);`, indent: 0},
                            ]
                        },
                        {
                            id: 'replaceChild', 
                            title: 'replaceChild()', 
                            cellDir: [
                                {text: `The replaceChild() method replaces a child node with a new node.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `node.replaceChild(newnode, oldnode)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const newNode = document.createTextNode("Water");`, indent: 0},
                                {code: `const element = document.getElementById("myList").children[0];`, indent: 0},
                                {code: `element.replaceChild(newNode, element.childNodes[0]);`, indent: 0},
                            ]
                        },
                        {
                            id: 'contains', 
                            title: 'contains()', 
                            cellDir: [
                                {text: `The contains() method returns true if a node is a descendant of a node.`},
                                {text: `The contains() method returns false if not.`},
                                {text: `A descendant can be a child, grandchild, great-grandchild, ...`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `node.contains(node)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `const span = document.getElementById("mySPAN");`, indent: 0},
                                {code: `let answer = document.getElementById("myDIV").contains(span);`, indent: 0},
                            ]
                        },
                        {
                            id: 'querySelector', 
                            title: 'querySelector()', 
                            cellDir: [
                                {text: `The querySelector() method returns the first child element that matches a specified CSS selector(s) of an element.`},
                                {text: (<><b>Note: </b>{'The querySelector() method only returns the first element that matches the specified selectors. To return all the matches, use the querySelectorAll() method instead.'}</>)},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.querySelector(CSS selectors)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `element.querySelector(".example").innerHTML = "Hello World!";`, indent: 0},
                            ]
                        },
                        {
                            id: 'querySelectorAll', 
                            title: 'querySelectorAll()', 
                            cellDir: [
                                {text: `The querySelectorAll() method returns a collection of an element's child elements that match a specified CSS selector(s), as a static NodeList object.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.querySelectorAll(CSS selectors)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `// Get the element with id="myDIV" (a div), then get all elements inside div with class="example"`, indent: 0},
                                {code: `var x = document.getElementById("myDIV").querySelectorAll(".example");  `, indent: 0},
                                {code: (<>&nbsp;</>), indent: 0},
                                {code: `// Set the background color of the first element with class="example" (index 0) in div`, indent: 0},
                                {code: `x[0].style.backgroundColor = "red"; `, indent: 0},
                            ]
                        },
                        {
                            id: 'isDefaultNamespace', 
                            title: 'isDefaultNamespace()', 
                            cellDir: [
                                {text: `The isDefaultNamespace() method returns true if the elements's namespace is default.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.isDefaultNamespace(namespaceURI)`, indent: 0},
                                {code: `node.isDefaultNamespace(namespaceURI)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `let answer = element.isDefaultNamespace("http://www.w3.org/1999/xhtml");`, indent: 0},
                            ]
                        },
                        {
                            id: 'addEventListener', 
                            title: 'addEventListener()', 
                            cellDir: [
                                {text: `The addEventListener() method attaches an event handler to an element.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.addEventListener(event, function, useCapture)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `element.addEventListener("click", myFunction);`, indent: 0},
                                {code: ``, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {
                                    table: {
                                        head: [],
                                        body: [
                                            [
                                                `useCapture`, 
                                                (<>
                                                Optional (default = false).<br/>
                                                false - The handler is executed in the bubbling phase.<br/>
                                                true - The handler is executed in the capturing phase.
                                                </>)
                                            ],
                                            
                                        ]

                                    }
                                }
                            ]
                        },
                        {
                            id: 'removeEventListener', 
                            title: 'removeEventListener()', 
                            cellDir: [
                                {text: `The removeEventListener() method removes an event handler from an element.`},
                                {text: (<><b>Syntax</b></>)},
                                {code: `element.removeEventListener(event, function, capture)`, indent: 0},
                                {text: (<>&nbsp;</>)},
                                {text: (<><b>Example</b></>)},
                                {code: `myDIV.removeEventListener("mousemove", myFunction);`, indent: 0},
                            ]
                        },
                        
                    ] 
                },
                {
                    id: 'htmlDomEvents',
                    title: 'HTML DOM Events',
                    titleDir: [
                        {text: `HTML DOM events allow JavaScript to register different event handlers on elements in an HTML document.`},
                        {text: `Events are normally used in combination with functions, and the function will not be executed before the event occurs (such as when a user clicks a button).`},
                        {code: `In HTML:`, indent: 0},
                        {code: `<element onclick="myScript">`, indent: 0},
                        {code: (<>&nbsp;</>), indent: 0},
                        {code: `In JavaScript:`, indent: 0},
                        {code: `object.onclick = function(){myScript};`, indent: 0},
                        {code: (<>&nbsp;</>), indent: 0},
                        {code: `In JavaScript, using the addEventListener() method:`, indent: 0},
                        {code: `object.addEventListener("click", myScript);`, indent: 0},
                        {code: (<>&nbsp;</>), indent: 0},
                        {code: `Event Property & Method Syntax:`, indent: 0},
                        {code: `event.which`, indent: 0},
                        {code: `event.getModifierState()`, indent: 0},
                        {text: (<>&nbsp;</>)},
                        {text: `All event objects in the DOM are based on the Event Object.`},
                        {text: `Therefore, all other event objects (like MouseEvent and KeyboardEvent) has access to the Event Object's properties and methods.`},
                    ],
                    RowDir: [
                        {
                            id: 'open', 
                            title: 'open', 
                            cellDir: [
                                {text: `The onopen event occurs when a connection with an event source is opened.`},
                            ]
                        },
                        {
                            id: 'show', 
                            title: 'show', 
                            cellDir: [
                                {text: `The onshow event occurs when a <menu> element is shown as a context menu.`},
                            ]
                        },
                        {
                            id: 'toggle', 
                            title: 'toggle', 
                            cellDir: [
                                {text: `The ontoggle event occurs when the user opens or closes the <details> element.`},
                                {text: `The <details> element specifies additional details that the user can view or hide on demand`},
                            ]
                        },
                        {
                            id: 'message', 
                            title: 'message', 
                            cellDir: [
                                {text: `The onmessage event occurs when a message is received through an event source.`},
                            ]
                        },
                        {
                            id: 'load', 
                            title: 'load', 
                            cellDir: [
                                {text: `The onload event occurs when an object has been loaded.`},
                                {text: `onload is most often used within the <body> element to execute a script once a web page has completely loaded all content (including images, script files, CSS files, etc.).`},
                                {text: `The onload event can be used to check the visitor's browser type and browser version, and load the proper version of the web page based on the information.`},
                                {text: `The onload event can also be used to deal with cookies (see "More Examples" below).`},
                            ]
                        },
                        {
                            id: 'unload', 
                            title: 'unload', 
                            cellDir: [
                                {text: `The onunload event occurs once a page has unloaded (or the browser window has been closed).`},
                                {text: `onunload occurs when the user navigates away from the page (by clicking on a link, submitting a form, closing the browser window, etc.).`},
                                {text: (<><b>Note: </b>{'The onunload event is also triggered when a user reloads the page (and the onload event).'}</>)},
                            ]
                        },
                        {
                            id: 'beforeunload', 
                            title: 'beforeunload', 
                            cellDir: [
                                {text: `The onbeforeunload event occurs when the document is about to be unloaded. `},
                                {text: `This event allows you to display a message in a confirmation dialog box to inform the user whether he/she wants to stay or leave the current page.`},
                                {text: `The default message that appears in the confirmation box, is different in different browsers. However, the standard message is something like "Are you sure you want to leave this page?". This message cannot be removed.`},
                                {text: ``},
                                {text: (<>{'However, you can write a custom message together with the default message. See the first example on this page.'}<b>Note: </b>{'This only works in Internet Explorer.'}</>)},
                                {text: (<><b>Note: </b>{'If the onbeforeunload event is not assigned to the <body> element, you must assign/attach the event on the window object, and use the returnValue property to create a custom message (see syntax examples below).'}</>)},
                            ]
                        },
                        {
                            id: 'error', 
                            title: 'error', 
                            cellDir: [
                                {text: `The onerror event is triggered if an error occurs while loading an external file (e.g. a document or an image).`},
                            ]
                        },
                        {
                            id: 'offline', 
                            title: 'offline', 
                            cellDir: [
                                {text: `The onoffline event occurs when the browser starts to work offline.`},
                            ]
                        },
                        {
                            id: 'online', 
                            title: 'online', 
                            cellDir: [
                                {text: `The ononline event occurs when the browser starts to work online.`},
                            ]
                        },
                        {
                            id: 'resize', 
                            title: 'resize', 
                            cellDir: [
                                {text: `The onresize event occurs when the browser window has been resized.`},
                            ]
                        },
                        {
                            id: 'scroll', 
                            title: 'scroll', 
                            cellDir: [
                                {text: `The event occurs when an element's scrollbar is being scrolled`},
                            ]
                        },
                        {
                            id: 'fullscreenchange', 
                            title: 'fullscreenchange', 
                            cellDir: [
                                {text: `The fullscreenchange event occurs when an element is viewed in fullscreen mode.`},
                                {text: (<><b>Note: </b>{'This event requires specific prefixes to work in different browsers (see Browser Support below).'}</>)},
                            ]
                        },
                                                                     
                        {
                            id: 'fullscreenerror', 
                            title: 'fullscreenerror', 
                            cellDir: [
                                {text: `The fullscreenerror event occurs when an element can not be viewed in fullscreen mode, even if it has been requested.`},
                                {text: (<><b>Note: </b>{'This event requires specific prefixes to work in different browsers (see Browser Support below).'}</>)},
                            ]
                        },
                        {
                            id: 'afterprint', 
                            title: 'afterprint', 
                            cellDir: [
                                {text: `The onafterprint event occurs when a page has started printing, or if the print dialogue box has been closed.`},
                            ]
                        },
                        {
                            id: 'beforeprint', 
                            title: 'beforeprint', 
                            cellDir: [
                                {text: `The onbeforeprint event occurs when a page is about to be printed (before the print dialogue box appears).`},
                            ]
                        },
                        {
                            id: 'invalid', 
                            title: 'invalid', 
                            cellDir: [
                                {text: `The oninvalid event occurs when a submittable <input> element is invalid.`},
                            ]
                        },
                        {
                            id: 'input', 
                            title: 'input', 
                            cellDir: [
                                {text: `The onbeforeprint event occurs when a page is about to be printed (before the print dialogue box appears).`},
                            ]
                        },
                        {
                            id: 'select', 
                            title: 'select', 
                            cellDir: [
                                {text: `The onselect event occurs after some text has been selected in an element.`},
                                {text: `The onselect event is mostly used on <input type="text"> or <textarea> elements.`},
                            ]
                        },
                        {
                            id: 'search', 
                            title: 'search', 
                            cellDir: [
                                {text: `The onsearch event occurs when a user presses the "ENTER" key or clicks the "x" button in an <input> element with type="search".`},
                            ]
                        },
                        {
                            id: 'change', 
                            title: 'change', 
                            cellDir: [
                                {text: `The onchange event occurs when the value of an element has been changed.`},
                                {text: `For radiobuttons and checkboxes, the onchange event occurs when the checked state has been changed.`},
                                {text: (<><b>Tip: </b>{'This event is similar to the oninput event. The difference is that the oninput event occurs immediately after the value of an element has changed, while onchange occurs when the element loses focus, after the content has been changed. The other difference is that the onchange event also works on <select> elements.'}</>)},
                            ]
                        },
                        {
                            id: 'submit', 
                            title: 'submit', 
                            cellDir: [
                                {text: `The event occurs when a form is submitted`},
                            ]
                        },
                        {
                            id: 'reset', 
                            title: 'reset', 
                            cellDir: [
                                {text: `The event occurs when a form is reset`},
                            ]
                        },
                        {
                            id: 'play', 
                            title: 'play', 
                            cellDir: [
                                {text: `The event occurs when the media has been started or is no longer paused`},
                            ]
                        },
                        {
                            id: 'playing', 
                            title: 'playing', 
                            cellDir: [
                                {text: `The event occurs when the media is playing after having been paused or stopped for buffering`},
                            ]
                        },
                        {
                            id: 'pause', 
                            title: 'pause', 
                            cellDir: [
                                {text: `The event occurs when the media is paused either by the user or programmatically`},
                            ]
                        },
                        {
                            id: 'ended', 
                            title: 'ended', 
                            cellDir: [
                                {text: `The event occurs when the media has reach the end (useful for messages like "thanks for listening")`},
                            ]
                        },
                        {
                            id: 'seeking', 
                            title: 'seeking', 
                            cellDir: [
                                {text: `The event occurs when the user starts moving/skipping to a new position in the media`},
                            ]
                        },
                        {
                            id: 'seeked', 
                            title: 'seeked', 
                            cellDir: [
                                {text: `The event occurs when the user is finished moving/skipping to a new position in the media`},
                            ]
                        },                                      
                        {
                            id: 'volumechange', 
                            title: 'volumechange', 
                            cellDir: [
                                {text: `The event occurs when the volume of the media has changed (includes setting the volume to "mute")`},
                            ]
                        },
                        {
                            id: 'timeupdate', 
                            title: 'timeupdate', 
                            cellDir: [
                                {text: `The ontimeupdate event occurs when the playing position of an audio/video has changed.`},
                                {text: `This event is invoked by:`},
                                {list: [
                                    'Playing the audio/video',
                                    'Moving the playback position (like when the user fast forwards to a different point in the audio/video)',
                                ]},
                                {text: (<><b>Tip: </b>{'The ontimeupdate event is often used together with the currentTime property of the Audio/Video Object, which returns the current position of the audio/video playback, in seconds.'}</>)},
                            ]
                        },
                        {
                            id: 'ratechange', 
                            title: 'ratechange', 
                            cellDir: [
                                {text: `The onratechange event occurs when the playing speed of the audio/video is changed (like when a user switches to a slow motion or fast forward mode).`},
                                {text: `This event is invoked by the playbackRate property of the Audio/Video Object, which sets or returns the current playback speed of an audio/video.`},
                            ]
                        },
                        {
                            id: 'durationchange', 
                            title: 'durationchange', 
                            cellDir: [
                                {text: `The ondurationchange event occurs when the duration of the audio/video is changed.`},
                                {text: (<><b>Note: </b>{'When the audio/video is loaded, the duration will change from "NaN" to the actual duration of the audio/video.'}</>)},
                            ]
                        },
                        {
                            id: 'canplay', 
                            title: 'canplay', 
                            cellDir: [
                                {text: `The event occurs when the browser can start playing the media (when it has buffered enough to begin)`},
                            ]
                        },
                        {
                            id: 'canplaythrough', 
                            title: 'canplaythrough', 
                            cellDir: [
                                {text: `The event occurs when the browser can play through the media without stopping for buffering`},
                            ]
                        },
                        {
                            id: 'loadeddata', 
                            title: 'loadeddata', 
                            cellDir: [
                                {text: `The event occurs when media data is loaded`},
                            ]
                        },
                        {
                            id: 'loadedmetadata', 
                            title: 'loadedmetadata', 
                            cellDir: [
                                {text: `The onloadedmetadata event occurs when meta data for the specified audio/video has been loaded.`},
                                {text: `Meta data for audio/video consists of: duration, dimensions (video only) and text tracks.`},
                            ]
                        },
                        {
                            id: 'progress', 
                            title: 'progress', 
                            cellDir: [
                                {text: `The event occurs when the browser is in the process of getting the media data (downloading the media)`},
                            ]
                        },
                        {
                            id: 'waiting', 
                            title: 'waiting', 
                            cellDir: [
                                {text: `The onwaiting event occurs when the video stops because it needs to buffer the next frame.`},
                                {text: `This event can also be used on <audio> elements, but it is mostly used for videos.`},
                            ]
                        },
                        {
                            id: 'stalled', 
                            title: 'stalled', 
                            cellDir: [
                                {text: `The event occurs when the browser is trying to get media data, but data is not available`},
                            ]
                        },
                        {
                            id: 'suspend', 
                            title: 'suspend', 
                            cellDir: [
                                {text: `The onsuspend event occurs when the browser is intentionally not getting media data.`},
                                {text: `This event occurs when the loading of the media is suspended (prevented from continuing). This can happen when the download has completed, or because it has been paused for some reason.`},
                            ]
                        },
                        {
                            id: 'abort', 
                            title: 'abort', 
                            cellDir: [
                                {text: `The onabort event occurs when the loading of an audio/video is aborted.`},
                                {text: `This event occurs when the media data download has been aborted, and not because of an error.`},
                            ]
                        },
                        {
                            id: 'eventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },
                                                               
                        {
                            id: 'type', 
                            title: 'type', 
                            cellDir: [
                                {text: `The type event property returns the type of the triggered event.`},
                            ]
                        },
                        {
                            id: 'target', 
                            title: 'target', 
                            cellDir: [
                                {text: `The target event property returns the element that triggered the event.`},
                                {text: `The target property gets the element on which the event originally occurred, opposed to the currentTarget property, which always refers to the element whose event listener triggered the event.`},
                            ]
                        },
                        {
                            id: 'currentTarget', 
                            title: 'currentTarget', 
                            cellDir: [
                                {text: `The currentTarget event property returns the element whose event listeners triggered the event.`},
                                {text: `This is particularly useful during capturing and bubbling.`},
                                {text: `The currentTarget property always refers to the element whose event listener triggered the event, opposed to the targetproperty, which returns the element that triggered the event.`},
                            ]
                        },
                        {
                            id: 'timeStamp', 
                            title: 'timeStamp', 
                            cellDir: [
                                {text: `The timeStamp event property returns the number of milliseconds from the document was finished loading until the specific event was created.`},
                                {text: `Not all systems provide this information, therefore, timeStamp may be not available for all systems/events.`},
                            ]
                        },
                        {
                            id: 'isTrusted', 
                            title: 'isTrusted', 
                            cellDir: [
                                {text: `The isTrusted event property returns a Boolean value indicating whether the event is trusted or not.`},
                                {text: (<><b>Note: </b>{'In Chrome, Firefox and Opera, the event is trusted if it is invoked by the user, and not trusted if it is invoked by a script. In IE, all events are trusted except those that are created with the createEvent() method.'}</>)},
                            ]
                        },
                        {
                            id: 'composed', 
                            title: 'composed', 
                            cellDir: [
                                {text: `Returns whether the event is composed or not `},
                            ]
                        },
                        {
                            id: 'cancelable', 
                            title: 'cancelable', 
                            cellDir: [
                                {text: `The cancelable event property returns a Boolean value indicating whether or not an event is a cancelable event.`},
                                {text: `The event is cancelable if it is possible to prevent the events default action.`},
                                {text: `To cancel an event, use the preventDefault() method.`},
                            ]
                        },
                        {
                            id: 'bubbles', 
                            title: 'bubbles', 
                            cellDir: [
                                {text: `The bubbles event property returns a Boolean value that indicates whether or not an event is a bubbling event.`},
                                {text: `Event bubbling directs an event to its intended target, it works like this:`},
                                {list: [
                                    'A button is clicked and the event is directed to the button',
                                    'If an event handler is set for that object, the event is triggered',
                                    'If no event handler is set for that object, the event bubbles up (like a bubble in water) to the objects parent',
                                ]}
                            ]
                        },
                        {
                            id: 'eventPhase', 
                            title: 'eventPhase', 
                            cellDir: [
                                {text: `The eventPhase event property returns a number that indicates which phase of the event flow is currently being evaluated.`},
                                {text: `The number is represented by 4 constants:`},
                                {list: [
                                    '0. NONE',
                                    '1. CAPTURING_PHASE - The event flow is in capturing phase',
                                    '2. AT_TARGET - The event flow is in target phase, i.e. it is being evaluated at the event target',
                                    '3. BUBBLING_PHASE - The event flow is in bubbling phase',
                                ]}
                            ]
                        },
                        {
                            id: 'defaultPrevented', 
                            title: 'defaultPrevented', 
                            cellDir: [
                                {text: `The defaultPrevented event property checks whether the preventDefault() method was called for the event.`},
                            ]
                        },
                        {
                            id: 'onemptied', 
                            title: 'onemptied', 
                            cellDir: [
                                {text: `The event occurs when something bad happens and the media file is suddenly unavailable (like unexpectedly disconnects)`},
                            ]
                        },
                        {
                            id: 'preventDefault', 
                            title: 'preventDefault()', 
                            cellDir: [
                                {text: `The preventDefault() method cancels the event if it is cancelable, meaning that the default action that belongs to the event will not occur.`},
                                {text: `For example, this can be useful when:`},
                                {list: [
                                    'Clicking on a "Submit" button, prevent it from submitting a form',
                                    'Clicking on a link, prevent the link from following the URL',
                                ]},
                                {text: (<><b>Note: </b>{'Not all events are cancelable. Use the cancelable property to find out if an event is cancelable.'}</>)},
                                {text: (<><b>Note: </b>{'The preventDefault() method does not prevent further propagation of an event through the DOM. Use the stopPropagation() method to handle this.'}</>)},
                            ]
                        },
                        {
                            id: 'stopPropagation', 
                            title: 'stopPropagation()', 
                            cellDir: [
                                {text: `The stopPropagation() method prevents propagation of the same event from being called.`},
                                {text: `Propagation means bubbling up to parent elements or capturing down to child elements.`},
                            ]
                        },
                        {
                            id: 'stopImmediatePropagation', 
                            title: 'stopImmediatePropagation()',
                            cellDir: [
                                {text: `The stopImmediatePropagation() method prevents other listeners of the same event from being called.`},
                            ]
                        },
                    ] 
                },
                {
                    id: 'mouseEvent',
                    title: 'Mouse Events',
                    titleDir: [
                        {text: `Events that occur when the mouse interacts with the HTML document, belongs to the MouseEvent Object.`},
                    ],
                    RowDir: [              
                        {
                            id: 'onclick', 
                            title: 'onclick', 
                            cellDir: [
                                {text: `The event occurs when the user clicks on an element`},
                            ]
                        },
                        {
                            id: 'ondblclick', 
                            title: 'ondblclick', 
                            cellDir: [
                                {text: `The event occurs when the user double-clicks on an element`},
                            ]
                        },
                        {
                            id: 'onmousedown', 
                            title: 'onmousedown', 
                            cellDir: [
                                {text: `The event occurs when the user presses a mouse button over an element`},
                            ]
                        },
                        {
                            id: 'onmouseup', 
                            title: 'onmouseup', 
                            cellDir: [
                                {text: `The event occurs when a user releases a mouse button over an element`},
                            ]
                        },
                        {
                            id: 'onmouseenter', 
                            title: 'onmouseenter', 
                            cellDir: [
                                {text: `The event occurs when the pointer is moved onto an element`},
                            ]
                        },
                        {
                            id: 'onmouseover', 
                            title: 'onmouseover', 
                            cellDir: [
                                {text: `The event occurs when the pointer is moved onto an element, or onto one of its children`},
                            ]
                        },
                        {
                            id: 'onmousemove', 
                            title: 'onmousemove', 
                            cellDir: [
                                {text: `The event occurs when the pointer is moving while it is over an element`},
                            ]
                        },
                        {
                            id: 'onmouseleave', 
                            title: 'onmouseleave', 
                            cellDir: [
                                {text: `The event occurs when the pointer is moved out of an element`},
                            ]
                        },
                        {
                            id: 'onmouseout', 
                            title: 'onmouseout', 
                            cellDir: [
                                {text: `The event occurs when a user moves the mouse pointer out of an element, or out of one of its children`},
                            ]
                        },
                        {
                            id: 'oncontextmenu', 
                            title: 'oncontextmenu', 
                            cellDir: [
                                {text: `The event occurs when the user right-clicks on an element to open a context menu`},
                            ]
                        },
                        
                        {
                            id: 'mouseEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },
                                                                              
                        {
                            id: 'which', 
                            title: 'which', 
                            cellDir: [
                                {text: `The which property returns a number that indicates which mouse button was pressed when a mouse event was triggered.`},
                                {text: `This property is mostly used together with the onmousedown event.`},
                                {text: (<><b>Note: </b>{'The values returned by this property are the same as those returned by the button property plus one.'}</>)},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'button', 
                            title: 'button', 
                            cellDir: [
                                {text: `The button property returns a number that indicates which mouse button was pressed when a mouse event was triggered.`},
                                {code: `This property is mostly used together with the onmousedown event.`, indent: 0},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                                {text: `Possible values:`},
                                {list: [
                                    '0 : Left mouse button', 
                                    '1 : Wheel button or middle button (if present)', 
                                    '2 : Right mouse button', 
                                ]},
                            ]
                        },
                        {
                            id: 'buttons', 
                            title: 'buttons', 
                            cellDir: [
                                {text: `The buttons property returns a number that indicates which mouse button or mouse buttons were pressed when a mouse event was triggered.`},
                                {text: `This property is mostly used together with the onmousedown event.`},
                                {text: (<><b>Tip: </b>{'Due to lack of browser support, you may want to look at the button property instead.'}</>)},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                                {text: `Possible values:`},
                                {list: [
                                    '1 : Left mouse button', 
                                    '2 : Right mouse button', 
                                    '4 : Wheel button or middle button', 
                                    '8 : Fourth mouse button (typically the "Browser Back" button)', 
                                    '16 : Fifth mouse button (typically the "Browser Forward" button)', 
                                ]},
                            ]
                        },
                        {
                            id: 'ctrlKey', 
                            title: 'ctrlKey', 
                            cellDir: [
                                {text: `The ctrlKey property returns a Boolean value that indicates whether or not the "CTRL" key was pressed when a mouse event was triggered.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'altKey', 
                            title: 'altKey', 
                            cellDir: [
                                {text: `The altKey property returns a Boolean value that indicates whether or not the "ALT" key was pressed when a mouse event was triggered.`},
                                {text: (<><b>Note: </b>{'On some Mac keyboards, the "ALT" key is displayed as "Option" or "Opt".'}</>)},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'shiftKey', 
                            title: 'shiftKey', 
                            cellDir: [
                                {text: `The shiftKey property returns a Boolean value that indicates whether or not the "SHIFT" key was pressed when a mouse event was triggered.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'metaKey', 
                            title: 'metaKey', 
                            cellDir: [
                                {text: `The metaKey property returns a Boolean value that indicates whether or not the "META" key was pressed when a mouse event was triggered.`},
                                {text: `Not all keyboards have the meta key. It is common for Sun microsystem keyboards, and MIT and LISP machine keyboards. The meta key is either labeled "META" or marked with a solid diamond "◆" symbol.`},
                                {text: `On Mac keyboards, the META key is represented by the the "Command/Cmd" ("⌘") key. `},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'relatedTarget', 
                            title: 'relatedTarget', 
                            cellDir: [
                                {text: `The relatedTarget property returns the element related to the element that triggered the mouse event.`},
                                {text: `The relatedTargert property can be used with the mouseover event to indicate the element the cursor just exited, or with the mouseout event to indicate the element the cursor just entered.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'screenX', 
                            title: 'screenX', 
                            cellDir: [
                                {text: `The screenX property returns the horizontal coordinate (according to the users computer screen) of the mouse pointer when an event was triggered.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'screenY', 
                            title: 'screenY', 
                            cellDir: [
                                {text: `The screenY property returns the vertical coordinate (according to the users computer screen) of the mouse pointer when an event was triggered.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'pageX', 
                            title: 'pageX', 
                            cellDir: [
                                {text: `The pageX property returns the horizontal coordinate (according to the document) of the mouse pointer when a mouse event was triggered.`},
                                {text: `The document is the web page.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                                {text: (<><b>Note: </b>{'This property is non-standard, but works in most major browsers.'}</>)},
                            ]
                        },
                        {
                            id: 'pageY', 
                            title: 'pageY', 
                            cellDir: [
                                {text: `The pageX property returns the horizontal coordinate (according to the document) of the mouse pointer when a mouse event was triggered.`},
                                {text: `The document is the web page.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                                {text: (<><b>Note: </b>{'This property is non-standard, but works in most major browsers.'}</>)},
                            ]
                        },
                        {
                            id: 'MovementX', 
                            title: 'MovementX', 
                            cellDir: [
                                {text: `Returns the horizontal coordinate of the mouse pointer relative to the position of the last mousemove event`},
                            ]
                        },
                        {
                            id: 'MovementY', 
                            title: 'MovementY', 
                            cellDir: [
                                {text: `Returns the vertical coordinate of the mouse pointer relative to the position of the last mousemove event`},
                            ]
                        },
                        {
                            id: 'offsetX', 
                            title: 'offsetX', 
                            cellDir: [
                                {text: `The offsetX property returns the x-coordinate of the mouse pointer, relative to the target element.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'offsetY', 
                            title: 'offsetY', 
                            cellDir: [
                                {text: `The offsetY property returns the y-coordinate of the mouse pointer, relative to the target element.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'clientX', 
                            title: 'clientX', 
                            cellDir: [
                                {text: `The clientX property returns the horizontal coordinate (according to the client area) of the mouse pointer when a mouse event was triggered.`},
                                {text: `The client area is the current window.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'clientY', 
                            title: 'clientY', 
                            cellDir: [
                                {text: `The clientY property returns the vertical coordinate (according to the client area) of the mouse pointer when a mouse event was triggered.`},
                                {text: `The client area is the current window.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'getModifierState', 
                            title: 'getModifierState()', 
                            cellDir: [
                                {text: `The getModifierState() method returns true if the specified modifier key was pressed, or activated.`},
                                {text: `Modifier keys that are activated only when they are being pressed down:`},
                                {list: [
                                    'Alt', 
                                    'AltGraph', 
                                    'Control', 
                                    'Meta', 
                                    'Shift', 
                                ]},
                                {text: `Modifier keys that are activated when they are clicked, and deactivated when they are clicked again:`},
                                {list: [
                                    'CapsLock', 
                                    'NumLock', 
                                    'ScrollLock', 
                                ]},
                                {code: `event.getModifierState(modifierKey)`, indent: 0},
                                {code: `var x = event.getModifierState("CapsLock");`, indent: 0},
                            ]
                        },
                        {
                            id: 'inheritedPropertiesAndMethods', 
                            title: 'Inherited Properties and Methods',
                            headCellDir: [
                                {text: `The MouseEvent inherits all the properties and methods from:`},
                                {list: [
                                    'The UiEvent', 
                                ]},
                            ]
                        },
                    ] 
                },
                {
                    id: 'wheelEvent',
                    title: 'Wheel Events',
                    titleDir: [
                        {text: `Events that occur when the mouse wheel is scrolling, belongs to the WheelEvent Object.`},
                    ],
                    RowDir: [
                        {
                            id: 'wheel', 
                            title: 'wheel', 
                            cellDir: [
                                {text: `The onwheel event occurs when the mouse wheel is rolled up or down over an element.`},
                                {text: `The onwheel event also occurs when the user scrolls or zooms in or out of an element by using a touchpad (like the "mouse" of a laptop).`},
                            ]
                        },
                        
                        {
                            id: 'wheelEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },  
                        {
                            id: 'deltaMode', 
                            title: 'deltaMode', 
                            cellDir: [
                                {text: `The deltaMode property returns a number representing the length unit of the scrolling values (deltaX, deltaY, and deltaZ).`},
                                {list: [
                                    '0 = pixels', 
                                    '1 = lines', 
                                    '2 = pages', 
                                ]},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'deltaX', 
                            title: 'deltaX', 
                            cellDir: [
                                {text: `The deltaX property returns a positive value when scrolling to the right, and a negative value when scrolling to the left, otherwise 0.`},
                                {text: (<><b>Note: </b>{'Most mouse devices do not have the ability to scroll left and right, and will always return 0.'}</>)},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'deltaY', 
                            title: 'deltaY', 
                            cellDir: [
                                {text: `The deltaY property returns a positive value when scrolling down, and a negative value when scrolling up, otherwise 0.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'deltaZ', 
                            title: 'deltaZ', 
                            cellDir: [
                                {text: `The deltaZ property returns a positive value when scrolling in, and a negative value when scrolling out, otherwise 0.`},
                                {text: (<><b>Note: </b>{'Most mouse devices do not have the ability to scroll along the z-axis, and will always return 0.'}</>)},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'inheritedPropertiesAndMethods', 
                            title: 'Inherited Properties and Methods',
                            headCellDir: [
                                {text: `The WheelEvent inherits all the properties and methods from:`},
                                {list: [
                                    'The MouseEvent', 
                                    'The UiEvent', 
                                ]},
                            ]
                        },
                    ] 
                },
                {
                    id: 'dragEvent',
                    title: 'Drag Events',
                    titleDir: [
                        {text: `Events that occur when elements are dragged and/or dropped, belongs to the DragEvent Object.`},
                    ],
                    RowDir: [
                                          
                        {
                            id: 'ondrag', 
                            title: 'ondrag', 
                            cellDir: [
                                {text: `The ondrag event occurs when an element or text selection is being dragged.`},
                                {text: `Drag and drop is a very common feature in HTML5. It is when you "grab" an object and drag it to a different location. For `},
                                {text: (<><b>Note: </b>{'To make an element draggable, use the global HTML5 draggable attribute.'}</>)},
                                {text: (<><b>Tip: </b>{'Links and images are draggable by default, and do not need the draggable attribute.'}</>)},
                            ]
                        },
                        {
                            id: 'ondragstart', 
                            title: 'ondragstart', 
                            cellDir: [
                                {text: `The ondragstart event occurs when the user starts to drag an element or text selection.`},
                            ]
                        },
                        {
                            id: 'ondragend', 
                            title: 'ondragend', 
                            cellDir: [
                                {text: `The ondragend event occurs when the user has finished dragging an element or text selection.`},
                            ]
                        },
                        {
                            id: 'ondragenter', 
                            title: 'ondragenter', 
                            cellDir: [
                                {text: `The ondragenter event occurs when a draggable element or text selection enters a valid drop target.`},
                            ]
                        },
                        {
                            id: 'ondragover', 
                            title: 'ondragover', 
                            cellDir: [
                                {text: `The ondragover event occurs when a draggable element or text selection is being dragged over a valid drop target.`},
                            ]
                        },
                        {
                            id: 'ondragleave', 
                            title: 'ondragleave', 
                            cellDir: [
                                {text: `The ondragleave event occurs when a draggable element or text selection leaves a valid drop target.`},
                            ]
                        },
                        {
                            id: 'ondrop', 
                            title: 'ondrop', 
                            cellDir: [
                                {text: `The ondrop event occurs when a draggable element or text selection is dropped on a valid drop target.`},
                            ]
                        },
                        
                        {
                            id: 'dragEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },
                        {
                            id: 'dataTransfer', 
                            title: 'dataTransfer', 
                            cellDir: [
                                {text: `Returns an object containing the data being dragged/dropped, or inserted/deleted`},
                            ]
                        },
                        {
                            id: 'inheritedPropertiesAndMethods', 
                            title: 'Inherited Properties and Methods',
                            headCellDir: [
                                {text: `The DragEvent inherits all the properties and methods from:`},
                                {list: [
                                    'The MouseEvent', 
                                ]},
                            ]
                        },
                    ] 
                },
                {
                    id: 'keyboardEvent',
                    title: 'Keyboard Events',
                    titleDir: [
                        {text: `Events that occur when user presses a key on the keyboard, belongs to the KeyboardEvent Object.`},
                    ],
                    RowDir: [
                        {
                            id: 'onkeypress', 
                            title: 'onkeypress', 
                            cellDir: [
                                {text: `The onkeypress event occurs when the user presses a key (on the keyboard).`},
                                {text: (<><b>Note: </b>{'The onkeypress event is not fired for all keys (e.g. ALT, CTRL, SHIFT, ESC) in all browsers. To detect only whether the user has pressed a key, use the onkeydown event instead, because it works for all keys.'}</>)},
                            ]
                        },
                        {
                            id: 'onkeydown', 
                            title: 'onkeydown', 
                            cellDir: [
                                {text: `The onkeydown event occurs when the user is pressing a key (on the keyboard).`},
                            ]
                        },
                        {
                            id: 'onkeyup', 
                            title: 'onkeyup', 
                            cellDir: [
                                {text: `The onkeyup event occurs when the user releases a key (on the keyboard).`},
                            ]
                        },
                        {
                            id: 'keyboardEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },
                                                         
                        {
                            id: 'key', 
                            title: 'key', 
                            cellDir: [
                                {text: `The key property returns the identifier of the key that was pressed when a key event occured.`},
                                {text: `Key identifiers are strings that identify keyboard buttons. The return value of this property can be a string of:`},
                                {list: [
                                    'A single character (like "a", "W", "4", "+" or "$")',
                                    'A multicharacter (like "F1", "Enter", "HOME" or "CAPS LOCK")',
                                ]},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                                {text: (<><b>Tip: </b>{'If you want to find out whether the "ALT", "CTRL", "META" or "SHIFT" key was pressed when a key event occured, use the altKey, ctrlKey, metaKey or shiftKey property.'}</>)},
                            ]
                        },
                        {
                            id: 'code', 
                            title: 'code', 
                            cellDir: [
                                {text: `The code property returns the key that triggered the event.`},
                                {text: (<><b>Note: </b>{'This property returns different values for different keyboard layouts.'}</>)},
                                {text: (<><b>Tip: </b>{'To make sure you return the correct character, use event.key instead'}</>)},
                            ]
                        },
                        {
                            id: 'which', 
                            title: 'which', 
                            cellDir: [
                                {text: `The which property returns the Unicode character code of the key that triggered the onkeypress event, or the Unicode key code of the key that triggered the onkeydown or onkeyup event.`},
                                {text: `The difference between the two code types:`},
                                {list: [
                                    'Character codes - A number which represents an ASCII character ("W" = the number "87")',
                                    'Key codes - A number which represents an actual key on the keyboard',
                                ]},
                                {text: `These types do not always mean the same thing; for example, a lower case "w" and an upper case "W" have the same keyboard code, because the key that is pressed on the keyboard is the same (just "W" = the number "87"), but a different character code because the resulting character is different (either "w" or "W", which is "119" or "87") `},
                                {text: (<><b>Tip: </b>{'To find out if the user is pressing a printable key (e.g. "a" or "5"), it is recommended to use this property on the onkeypress event. To find out if the user is pressing a function key (e.g. "F1", "CAPS LOCK" or "Home") use the onkeydown or onkeyup event.'}</>)},
                                {text: (<><b>Tip: </b>{'For a list of all Unicode characters, please study our Complete Unicode Reference.'}</>)},
                                {text: (<><b>Tip: </b>{'If you want to convert the returned Unicode value into a character, use the fromCharCode() method.'}</>)},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                                {text: (<><b>Note: </b>{'The latest version of the DOM Events Specification recommend using the key property instead (if available).'}</>)},
                                {text: (<><b>Tip: </b>{'If you want to find out whether the "ALT", "CTRL", "META" or "SHIFT" key was pressed when a key event occured, use the altKey, ctrlKey, metaKey or shiftKey property.'}</>)},
                            ]
                        },
                        {
                            id: 'charCode', 
                            title: 'charCode', 
                            cellDir: [
                                {text: `The charCode property returns the Unicode character code of the key that triggered the onkeypress event.`},
                                {text: `The Unicode character code is the number of a character (e.g. the number "97" represents the letter "a").`},
                                {text: (<><b>Tip: </b>{'For a list of all Unicode characters, please study our Complete Unicode Reference.'}</>)},
                                {text: (<><b>Tip: </b>{'If you want to convert the Unicode value into a character, use the fromCharCode() method.'}</>)},
                                {text: (<><b>Note: </b>{'If this property is used on onkeydown or onkeyup events, the returned value is always "0".'}</>)},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'location', 
                            title: 'location', 
                            cellDir: [
                                {text: `The location property returns a number that indicates the location of a key on the keyboard or device.`},
                                {text: `The number is represented by 4 constants:`},
                                {text: (<><b>{'0. DOM_KEY_LOCATION_STANDARD:'}</b></>)},
                                {text: `The key is not pressed on the right or left side of the keyboard, and was not pressed on the numeric keypad (this value represents almost every key on the keyboard, e.g. "A", "U", "SPACE" or "5")`},
                                {text: (<><b>{'1. DOM_KEY_LOCATION_LEFT:'}</b></>)},
                                {text: `A left key was pressed (e.g. the left "CTRL" key or left "ALT" key on a standard 101 key US keyboard)`},
                                {text: (<><b>{'2. DOM_KEY_LOCATION_RIGHT:'}</b></>)},
                                {text: `A right key was pressed (e.g. the right "CTRL" key or right "CTRL" key on a standard 101 key US keyboard)`},
                                {text: (<><b>{'3. DOM_KEY_LOCATION_NUMPAD:'}</b></>)},
                                {text: `The key was pressed on the numeric keypad (e.g. the "2" key on the right side on a standard keyboard)`},
                                {text: (<><b>Note: </b>{'The location property can only be used on the onkeydown and onkeyup event, not onkeypress.'}</>)},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'repeat', 
                            title: 'repeat', 
                            cellDir: [
                                {text: `Returns whether a key is being hold down repeatedly, or not`},
                            ]
                        },
                        {
                            id: 'ctrlKey', 
                            title: 'ctrlKey', 
                            cellDir: [
                                {text: `The ctrlKey property returns a Boolean value that indicates whether or not the "CTRL" key was pressed when a key event was triggered.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'altKey', 
                            title: 'altKey', 
                            cellDir: [
                                {text: `The altKey property returns a Boolean value that indicates whether or not the "ALT" key was pressed when a key event was triggered.`},
                                {text: (<><b>Note: </b>{'On some Mac keyboards, the "ALT" key is displayed as "Option" or "Opt".'}</>)},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'shiftKey', 
                            title: 'shiftKey', 
                            cellDir: [
                                {text: `The shiftKey property returns a Boolean value that indicates whether or not the "SHIFT" key was pressed when a key event was triggered.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'metaKey', 
                            title: 'metaKey', 
                            cellDir: [
                                {text: `The metaKey property returns a Boolean value that indicates whether or not the "META" key was pressed when a key event was triggered.`},
                                {text: `Not all keyboards have the meta key. It is common for Sun microsystem keyboards, and MIT and LISP machine keyboards. The meta key is either labeled "META" or marked with a solid diamond "◆" symbol.`},
                                {text: `On Mac keyboards, the META key is represented by the the "Command/Cmd" ("⌘") key. `},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'isComposing', 
                            title: 'isComposing', 
                            cellDir: [
                                {text: `Returns whether the state of the event is composing or not`},
                            ]
                        },
                        {
                            id: 'getModifierState', 
                            title: 'getModifierState()', 
                            cellDir: [
                                {text: `The getModifierState() method returns true if the specified modifier key was pressed, or activated.`},
                                {text: `Modifier keys that are activated only when they are being pressed down:`},
                                {list: [
                                    'Alt', 
                                    'AltGraph', 
                                    'Control', 
                                    'Meta', 
                                    'Shift', 
                                ]},
                                {text: `Modifier keys that are activated when they are clicked, and deactivated when they are clicked again:`},
                                {list: [
                                    'CapsLock', 
                                    'NumLock', 
                                    'ScrollLock', 
                                ]},
                                {code: `event.getModifierState(modifierKey)`, indent: 0},
                            ]
                        },
                        {
                            id: 'inheritedPropertiesAndMethods', 
                            title: 'Inherited Properties and Methods',
                            headCellDir: [
                                {text: `The KeyboardEvent inherits all the properties and methods from:`},
                                {list: [
                                    'The UiEvent', 
                                ]},
                            ]
                        },
                    ] 
                },
                {
                    id: 'touchEvent', 
                    title: 'Touch Events',
                    titleDir: [
                        {text: `Events that occur when user touches a touch-based device, belongs to the TouchEvent Object.`},
                    ],
                    RowDir: [
                        {
                            id: 'ontouchstart', 
                            title: 'ontouchstart', 
                            cellDir: [
                                {text: `The touchstart event occurs when the user touches an element.`},
                                {text: (<><b>Note: </b>{'The touchstart event will only work on devices with a touch screen.'}</>)},
                            ]
                        },
                        {
                            id: 'ontouchmove', 
                            title: 'ontouchmove', 
                            cellDir: [
                                {text: `The touchmove event occurs when the user moves the finger across the screen.`},
                                {text: `The touchmove event will be triggered once for each movement, and will continue to be triggered until the finger is released.`},
                            ]
                        },
                        {
                            id: 'ontouchend', 
                            title: 'ontouchend', 
                            cellDir: [
                                {text: `The touchend event occurs when the user removes the finger from an element.`},
                            ]
                        },
                        {
                            id: 'ontouchcancel', 
                            title: 'ontouchcancel', 
                            cellDir: [
                                {text: `The touchcancel event occurs when the touch event gets interrupted.`},
                                {text: `Different devices will interrupt a touch event at different actions, and it is considered good practice to include this event to clean up code if this "error" should occur.`},
                            ]
                        },
                        {
                            id: 'touchEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },
                                          
                        {
                            id: 'touches', 
                            title: 'touches', 
                            cellDir: [
                                {text: `The touches property returns an array of Touch objects, one for each finger that is currently touching the surface.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'targetTouches', 
                            title: 'targetTouches', 
                            cellDir: [
                                {text: `The targetTouches property returns an array of Touch objects, one for each finger that is touching the current target element.`},
                                {text: (<><b>Note: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'changeTouches', 
                            title: 'changeTouches', 
                            cellDir: [
                                {text: `Returns a list of all the touch objects whose state changed between the previous touch and this touch`},
                            ]
                        },
                        {
                            id: 'ctrlKey', 
                            title: 'ctrlKey', 
                            cellDir: [
                                {text: `Returns whether the "CTRL" key was pressed when the key event was triggered`},
                            ]
                        },
                        {
                            id: 'altKey', 
                            title: 'altKey', 
                            cellDir: [
                                {text: `Returns whether the "ALT" key was pressed when the key event was triggered`},
                            ]
                        },
                        {
                            id: 'shiftKey', 
                            title: 'shiftKey', 
                            cellDir: [
                                {text: `Returns whether the "SHIFT" key was pressed when the key event was triggered`},
                            ]
                        },
                        {
                            id: 'metaKey', 
                            title: 'metaKey', 
                            cellDir: [
                                {text: `Returns whether the "meta" key was pressed when the key event was triggered`},
                            ]
                        },
                        {
                            id: 'inheritedPropertiesAndMethods', 
                            title: 'Inherited Properties and Methods',
                            headCellDir: [
                                {text: `The TouchEvent inherits all the properties and methods from:`},
                                {list: [
                                    'The UiEvent', 
                                ]},
                            ]
                        },
                    ] 
                },
                
                {
                    id: 'animationEvent',
                    title: 'Animation Events',
                    titleDir: [
                        {text: `Events that occur when a CSS animation runs, belongs to the AnimationEvent Object.`},
                    ],
                    RowDir: [
                        {
                            id: 'animationstart', 
                            title: 'animationstart', 
                            cellDir: [
                                {text: `The event occurs when a CSS animation has started`},
                            ]
                        },
                        {
                            id: 'animationend', 
                            title: 'animationend', 
                            cellDir: [
                                {text: `The event occurs when a CSS animation has completed`},
                            ]
                        },
                        {
                            id: 'animationiteration', 
                            title: 'animationiteration', 
                            cellDir: [
                                {text: `The animationiteration event occurs when a CSS animation is repeated.`},
                                {text: `If the CSS animation-iteration-count property is set to "1", meaning that the animation will only be played one time, the animationiteration event does not occur. The animation needs to run more than once for this event to fire.`},
                            ]
                        },
                        
                        {
                            id: 'animationEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },
                        {
                            id: 'animationName', 
                            title: 'animationName', 
                            cellDir: [
                                {text: `The animationName property returns the name of the animation, when an animation event occurs.`},
                                {text: `The name of the animation is the value of the animation-name CSS property.`},
                                {text: `This property is read-only.`},
                            ]
                        },
                        {
                            id: 'propertyName', 
                            title: 'propertyName', 
                            cellDir: [
                                {text: `The propertyName property returns the name of the CSS property associated with the transition, when a transitioneventoccurs.`},
                                {text: `This property is read-only.`},
                            ]
                        },
                        {
                            id: 'pseudoElement', 
                            title: 'pseudoElement', 
                            cellDir: [
                                {text: `Returns the name of the pseudo-element of the animation or transition`},
                            ]
                        },
                        {
                            id: 'elapsedTime', 
                            title: 'elapsedTime', 
                            cellDir: [
                                {text: `The elapsedTime property returns the number of seconds an animation has been running, when an animation event occurs.`},
                                {text: (<><b>Note: </b>{'The return value is not affected if the animation is paused (by using the animation-delay CSS property).'}</>)},
                                {text: (<><b>Note: </b>{'For the animationstart event, this property always returns "0".'}</>)},
                                {text: `This property is read-only.`},
                            ]
                        },
                    ] 
                },
                {
                    id: 'transitionEvent',
                    title: 'Transition Events',
                    titleDir: [
                        {text: `Events that occur when a CSS transition runs, belongs to the TransitionEvent Object.`},
                    ],
                    RowDir: [
                        {
                            id: 'transitionend', 
                            title: 'transitionend', 
                            cellDir: [
                                {text: `The transitionend event occurs when a CSS transition has completed.`},
                                {text: (<><b>Note: </b>{'If the transition is removed before completion, e.g. if the CSS transition-property property is removed, the transitionend event will not fire.'}</>)},
                            ]
                        },
                        {
                            id: 'transitionEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },
                        {
                            id: 'propertyName', 
                            title: 'propertyName', 
                            cellDir: [
                                {text: `The propertyName property returns the name of the CSS property associated with the transition, when a transitioneventoccurs.`},
                                {text: `This property is read-only.`},
                            ]
                        },
                        {
                            id: 'elapsedTime', 
                            title: 'elapsedTime', 
                            cellDir: [
                                {text: `The elapsedTime property returns the number of seconds a transition has been running, when a transitionend event occurs.`},
                                {text: (<><b>Note: </b>{'The return value is not affected if the transition is paused (by using the transition-delay CSS property).'}</>)},
                                {text: `This property is read-only.`},
                            ]
                        },
                    ] 
                },
                {
                    id: 'inputEvent',
                    title: 'Input Events',
                    titleDir: [
                        {text: `Events that occur when an form element's content changes, belongs to the InputEvent Object.`},
                    ],
                    RowDir: [
                        {
                            id: 'oninput', 
                            title: 'oninput', 
                            cellDir: [
                                {text: `The event occurs when an element gets user input`},
                            ]
                        },
                        {
                            id: 'inputEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },
                        {
                            id: 'inputType', 
                            title: 'inputType', 
                            cellDir: [
                                {text: `The oninput event occurs when an element gets user input.`},
                                {text: `This event occurs when the value of an <input> or <textarea> element is changed.`},
                                {text: (<><b>Tip: </b>{'This event is similar to the onchange event. The difference is that the oninput event occurs immediately after the value of an element has changed, while onchange occurs when the element loses focus, after the content has been changed. The other difference is that the onchange event also works on <select> elements.'}</>)},
                            ]
                        },
                        {
                            id: 'data', 
                            title: 'data', 
                            cellDir: [
                                {text: `The data property returns the character that was inserted with the event.`},
                                {text: (<><b>Nope: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'dataTransfer', 
                            title: 'dataTransfer', 
                            cellDir: [
                                {text: `Returns an object containing the data being dragged/dropped, or inserted/deleted`},
                            ]
                        },
                        {
                            id: 'isComposing', 
                            title: 'isComposing', 
                            cellDir: [
                                {text: `Returns whether the state of the event is composing or not`},
                            ]
                        },
                        {
                            id: 'getTargetRanges', 
                            title: 'getTargetRanges()', 
                            cellDir: [
                                {text: `Returns an array containing target ranges that will be affected by the insertion/deletion`},
                            ]
                        },
                        {
                            id: 'inheritedPropertiesAndMethods', 
                            title: 'Inherited Properties and Methods',
                            headCellDir: [
                                {text: `The InputEvent inherits all the properties and methods from:`},
                                {list: [
                                    'The UiEvent ', 
                                ]},
                            ]
                        },
                    ] 
                },
                {
                    id: 'uiEvent',
                    title: 'UI Events',
                    titleDir: [
                        {text: `Events that are triggered from the user interface belongs to the UiEvent Object.`},
                    ],
                    RowDir: [
                        {
                            id: 'select', 
                            title: 'select', 
                            cellDir: [
                                {text: `The onselect event occurs after some text has been selected in an element.`},
                                {text: `The onselect event is mostly used on <input type="text"> or <textarea> elements.`},
                            ]
                        },
                        {
                            id: 'resize', 
                            title: 'resize', 
                            cellDir: [
                                {text: `The onresize event occurs when the browser window has been resized.`},
                            ]
                        },
                        {
                            id: 'scroll', 
                            title: 'scroll', 
                            cellDir: [
                                {text: `The onscroll event occurs when an element's scrollbar is being scrolled.`},
                            ]
                        },
                        {
                            id: 'load', 
                            title: 'load', 
                            cellDir: [
                                {text: `The onload event occurs when an object has been loaded.`},
                                {text: `onload is most often used within the <body> element to execute a script once a web page has completely loaded all content (including images, script files, CSS files, etc.).`},
                                {text: `The onload event can be used to check the visitor's browser type and browser version, and load the proper version of the web page based on the information.`},
                                {text: `The onload event can also be used to deal with cookies (see "More Examples" below).`},
                            ]
                        },
                        {
                            id: 'unload', 
                            title: 'unload', 
                            cellDir: [
                                {text: `The onunload event occurs once a page has unloaded (or the browser window has been closed).`},
                                {text: `onunload occurs when the user navigates away from the page (by clicking on a link, submitting a form, closing the browser window, etc.).`},
                                {text: (<><b>Nope: </b>{'The onunload event is also triggered when a user reloads the page (and the onload event).'}</>)},
                            ]
                        },
                        {
                            id: 'beforeunload', 
                            title: 'beforeunload', 
                            cellDir: [
                                {text: `The onbeforeunload event occurs when the document is about to be unloaded. `},
                                {text: `This event allows you to display a message in a confirmation dialog box to inform the user whether he/she wants to stay or leave the current page.`},
                                {text: `The default message that appears in the confirmation box, is different in different browsers. However, the standard message is something like "Are you sure you want to leave this page?". This message cannot be removed.`},
                                {text: `However, you can write a custom message together with the default message. See the first example on this page. Note: This only works in Internet Explorer.`},
                                {text: (<><b>Nope: </b>{'If the onbeforeunload event is not assigned to the <body> element, you must assign/attach the event on the window object, and use the returnValue property to create a custom message (see syntax examples below).'}</>)},
                            ]
                        },
                        {
                            id: 'abort', 
                            title: 'abort', 
                            cellDir: [
                                {text: `The onabort event occurs when the loading of an audio/video is aborted.`},
                                {text: `This event occurs when the media data download has been aborted, and not because of an error.`},
                            ]
                        },
                        {
                            id: 'error', 
                            title: 'error', 
                            cellDir: [
                                {text: `The onerror event is triggered if an error occurs while loading an external file (e.g. a document or an image).`},
                            ]
                        },
                        {
                            id: 'uiEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },
                        {
                            id: 'detail', 
                            title: 'detail', 
                            cellDir: [
                                {text: `The detail property returns a number with details about the event.`},
                                {text: `When used on onclick and ondblclick, the number indicates the current click count.`},
                                {text: `When used on onmousedown and onmouseup,the number indicates the current click count plus 1.`},
                                {text: (<><b>Nope: </b>{'This property is read-only.'}</>)},
                            ]
                        },
                        {
                            id: 'view', 
                            title: 'view', 
                            cellDir: [
                                {text: `The view event property returns a reference to the Window object where the event occured.`},
                            ]
                        },
                    ] 
                },
                {
                    id: 'pageTransitionEvent',
                    title: 'Page Transition Events',
                    titleDir: [
                        {text: `Events that occur when user navigates to, and away from, a webpage.`},
                    ],
                    RowDir: [
                        {
                            id: 'pagehide', 
                            title: 'pagehide', 
                            cellDir: [
                                {text: `The onpagehide event occurs when the user is navigating away from a webpage.`},
                                {text: `There are several ways to navigate away from a page. E.g. by clicking on a link, refreshing the page, submitting a form, closing the browser window, etc.`},
                                {text: `The onpagehide event is sometimes used instead of the onunload event, as the onunload event causes the page to not be cached.`},
                                {text: `To find out if a page is loaded directly from the server or if the page is cached, you can use the persisted property of the PageTransitionEvent object. This property returns true if the page is cached by the browser, and false otherwise.`},
                            ]
                        },
                        {
                            id: 'pageshow', 
                            title: 'pageshow', 
                            cellDir: [
                                {text: `The onpageshow event occurs when a user navigates to a webpage.`},
                                {text: `The onpageshow event is similar to the onload event, except that it occurs after the onload event when the page first loads. Also, the onpageshow event occurs every time the page is loaded, whereas the onload event does not occur when the page is loaded from the cache.`},
                            ]
                        },
                        {
                            id: 'pageTransitionEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },
                        {
                            id: 'persisted', 
                            title: 'persisted', 
                            cellDir: [
                                {text: `The persisted property returns a Boolean value that indicates if the webpage is loaded directly from the server, or if the page is cached, when an onpageshow or onpagehide event occurs.`},
                                {list: [
                                    'true - The page is cached by the browser',
                                    'false - The page is NOT cached by the browser',
                                ]}
                            ]
                        },
                    ] 
                },
                {
                    id: 'progressEvent',
                    title: 'Progress Events',
                    titleDir: [
                        {text: `Events that occur when loading external resources, belongs to the ProgressEvent Object.`},
                    ],
                    RowDir: [
                        {
                            id: 'onerror', 
                            title: 'onerror', 
                            cellDir: [
                                {text: `The onerror event is triggered if an error occurs while loading an external file (e.g. a document or an image).`},
                            ]
                        },
                        {
                            id: 'onloadstart', 
                            title: 'onloadstart', 
                            cellDir: [
                                {text: `The onloadstart event occurs when the browser starts looking for the specified audio/video. This is when the loading process starts.`},
                            ]
                        },
                        {
                            id: 'progressEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },
                        {
                            id: 'total', 
                            title: 'total', 
                            cellDir: [
                                {text: `Returns the total amount of work that will be loaded`},
                            ]
                        },
                        {
                            id: 'lengthComputable', 
                            title: 'lengthComputable', 
                            cellDir: [
                                {text: `Returns whether the length of the progress can be computable or not`},
                            ]
                        },
                        {
                            id: 'loaded', 
                            title: 'loaded', 
                            cellDir: [
                                {text: `Returns how much work has been loaded`},
                            ]
                        },
                    ] 
                },
                {
                    id: 'storageEvent',
                    title: 'Storage Events',
                    titleDir: [
                        {text: `Events that occur when there is changes in the window's storage area.`},
                    ],
                    RowDir: [
                        {
                            id: 'Storage', 
                            title: 'Storage', 
                            cellDir: [
                                {text: `The event occurs when a Web Storage area is updated`},
                            ]
                        },
                        {
                            id: 'storageEvent',
                            id: 'storageEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        }, 
                        {
                            id: 'storageArea', 
                            title: 'storageArea', 
                            cellDir: [
                                {text: `The storageArea property returns the Storage Object of the changed storage item.`},
                                {text: (<><b>Nope: </b>{'The storage event is only triggered when a window other than itself makes the changes.'}</>)},
                            ]
                        },
                        {
                            id: 'key', 
                            title: 'key', 
                            cellDir: [
                                {text: `The key property returns the name of the changed storage item.`},
                            ]
                        },
                        {
                            id: 'newValue', 
                            title: 'newValue', 
                            cellDir: [
                                {text: `The newValue property returns the new value of the changed storage item.`},
                            ]
                        },
                        {
                            id: 'oldValue', 
                            title: 'oldValue', 
                            cellDir: [
                                {text: `The oldValue property returns the old value of the changed storage item.`},
                            ]
                        },
                        {
                            id: 'url', 
                            title: 'url', 
                            cellDir: [
                                {text: `Returns the URL of the changed item's document`},
                            ]
                        },
                    ] 
                },
                {
                    id: 'popStateEvent',
                    title: 'Pop State Events',
                    titleDir: [
                        {text: `Events that occur when the window's history changes.`},
                    ],
                    RowDir: [
                        {
                            id: 'Popstate', 
                            title: 'Popstate', 
                            cellDir: [
                                {text: `The event occurs when the window's history changes`},
                            ]
                        },
                        {
                            id: 'popStateEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },
                        {
                            id: 'state', 
                            title: 'state', 
                            cellDir: [
                                {text: `Returns an object containing a copy of the history entries`},
                            ]
                        },
                    ] 
                },
                {
                    id: 'hashChangeEvent',
                    title: 'Hash Change Events',
                    titleDir: [
                        {text: `Events that occur when the anchor part of the URL changes, belongs to the HashChangeEvent Object.`},
                    ],
                    RowDir: [
                        {
                            id: 'onhashchange', 
                            title: 'onhashchange', 
                            cellDir: [
                                {text: `The onhashchange event occurs when there has been changes to the anchor part (begins with a '#' symbol) of the current URL.`},
                                {text: `An example of what an anchor part actually is: Assume that the current URL is http://www.example.com/test.htm#part2 - The anchor part of this URL would be #part2.`},
                                {text: `To invoke this event, you can:`},
                                {list: [
                                    'Change the anchor part by setting the location.hash or location.href property of the Location Object',
                                    'Navigate to the current page with a different bookmark (Use the "back" or "forward" buttons)',
                                    'Click on a link to a bookmark anchor',
                                ]}
                            ]
                        },
                        {
                            id: 'hashChangeEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },
                        {
                            id: 'newURL', 
                            title: 'newURL', 
                            cellDir: [
                                {text: `The newURL property returns the URL of the document, after the hash (anchor part) has been changed.`},
                                {text: `This is the URL that was navigated to.`},
                            ]
                        },
                        {
                            id: 'oldURL', 
                            title: 'oldURL', 
                            cellDir: [
                                {text: `The oldURL property returns the URL of the document, before the hash (anchor part) was changed.`},
                                {text: `This is the URL that was navigated away from.`},
                            ]
                        },
                    ] 
                },
                {
                    id: 'focusEvent',
                    title: 'Focus Events',
                    titleDir: [
                        {text: `Events that occur when elements gets or loses focus, belongs to the FocusEvent Object.`},
                    ],
                    RowDir: [
                        {
                            id: 'onfocus', 
                            title: 'onfocus', 
                            cellDir: [
                                {text: `The onfocus event occurs when an element gets focus.`},
                                {text: `The onfocus event is most often used with <input>, <select>, and <a>.`},
                                {text: (<><b>Nope: </b>{'The onfocus event is the opposite of the onblur event.'}</>)},
                                {text: (<><b>Nope: </b>{'The onfocus event is similar to the onfocusin event. The main difference is that the onfocus event does not bubble. Therefore, if you want to find out whether an element or its child gets the focus, you could use the onfocusin event. However, you can achieve this by using the optional useCapture parameter of the addEventListener() method for the onfocus event.'}</>)},
                            ]
                        },
                        {
                            id: 'onfocusin', 
                            title: 'onfocusin', 
                            cellDir: [
                                {text: `The onfocusin event occurs when an element is about to get focus.`},
                            ]
                        },
                        {
                            id: 'onfocusout', 
                            title: 'onfocusout', 
                            cellDir: [
                                {text: `The onfocusout event occurs when an element is about to lose focus.`},
                            ]
                        },
                        {
                            id: 'onblur', 
                            title: 'onblur', 
                            cellDir: [
                                {text: `The onblur event occurs when an object loses focus.`},
                                {text: `The onblur event is most often used with form validation code (e.g. when the user leaves a form field).`},
                            ]
                        },
                        {
                            id: 'focusEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },
                        {
                            id: 'relatedTarget', 
                            title: 'relatedTarget', 
                            cellDir: [
                                {text: `The relatedTarget property returns the element related to the element that triggered the focus/blur event.`},
                            ]
                        },
                        {
                            id: 'inheritedPropertiesAndMethods', 
                            title: 'Inherited Properties and Methods',
                            headCellDir: [
                                {text: `The FocusEvent inherits all the properties and methods from:`},
                                {list: [
                                    'The UiEvent', 
                                ]},
                            ]
                        },
                    ] 
                },
                {
                    id: 'clipboardEvent',
                    title: 'Clipboard Events',
                    titleDir: [
                        {text: `Events that occur when the clipboard is modified, belongs to the ClipboardEvent Object.`},
                    ],
                    RowDir: [
                        {
                            id: 'oncopy', 
                            title: 'oncopy', 
                            cellDir: [
                                {text: `The oncopy event occurs when the user copies the content of an element.`},
                                {text: (<><b>Tip: </b>{'The oncopy event also occurs when the user copies an element, for example, an image, created with the <img> element.'}</>)},
                                {text: (<><b>Tip: </b>{'The oncopy event is mostly used on <input> elements with type="text".'}</>)},
                            ]
                        },
                        {
                            id: 'oncut', 
                            title: 'oncut', 
                            cellDir: [
                                {text: `The oncut event occurs when the user cuts the content of an element.`},
                            ]
                        },
                        {
                            id: 'onpaste', 
                            title: 'onpaste', 
                            cellDir: [
                                {text: `The onpaste event occurs when the user pastes some content in an element.`},
                            ]
                        },
                        {
                            id: 'clipboardEventPandM', 
                            title: 'Properties and Methods',
                            headCellDir: []
                        },
                        {
                            id: 'clipboardData', 
                            title: 'clipboardData', 
                            cellDir: [
                                {text: `Returns an object containing the data affected by the clipboard operation`},
                            ]
                        },
                    ] 
                },
                
            ]
        },
    ]
};